<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Boyang\Desktop\ASE15\subjects\UMAS\src\com\umas\code\CourseOffered.java"><package>package <name><name>com</name><operator>.</operator><name>umas</name><operator>.</operator><name>code</name></name>;</package>


<comment type="block" format="javadoc">/****************@author Simant Purohit*********************************/</comment>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileWriter</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>Connection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>PreparedStatement</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>ResultSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>SQLException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>mysql</name><operator>.</operator><name>jdbc</name><operator>.</operator><name>Statement</name></name>;</import>


<class><specifier>public</specifier> class <name>CourseOffered</name> <block>{
	<decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>offerID</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>Course</name></type> <name>course</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>CourseSchedule</name></type> <name>courseSchedule</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name><name>ArrayList</name><argument_list type="template">&lt;<argument><name>File</name></argument>&gt;</argument_list></name></type> <name>files</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>Professor</name></type> <name>professor</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>SemesterID</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>totalCapacity</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>currentlyFilled</name></decl>;</decl_stmt>	
	
	<comment type="block">/*
	 * Initialize a course offered object using the offer id
	 * Throws a course offering does not exist exception if the offering does not exist and
	 * throws a course does not exist exception if the course itself is non existent 
	 */</comment>
	<constructor><specifier>public</specifier> <name>CourseOffered</name><parameter_list>(<param><decl><type><name>int</name></type> <name>offerID</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name><name>Course</name><operator>.</operator><name>CourseDoesNotExistException</name></name></expr></argument>, <argument><expr><name>CourseOfferingDoesNotExistException</name></expr></argument></throws><block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>offerID</name></name> <operator>=</operator> <name>offerID</name></expr>;</expr_stmt>
		<try>try<block>{
			<decl_stmt><decl><type><name>Connection</name></type> <name>conn</name> <init>= <expr><call><name><name>Database</name><operator>.</operator><name>getConnection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<try>try<block>{
				<if>if<condition>(<expr><name>conn</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then><block>{
					
					<comment type="line">//Retrieve the current semester ID</comment>
					<decl_stmt><decl><type><name>String</name></type> <name>SemesterSelect</name> <init>= <expr><literal type="string">"Select *"</literal>
							<operator>+</operator> <literal type="string">" FROM coursesoffered"</literal>
							<operator>+</operator> <literal type="string">" WHERE OfferID= ?"</literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>PreparedStatement</name></type> <name>statement</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>prepareStatement</name></name><argument_list>(<argument><expr><name>SemesterSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name>statement</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>offerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name>ResultSet</name></type> <name>rs</name> <init>= <expr><call><name><name>statement</name><operator>.</operator><name>executeQuery</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					
					<if>if<condition>(<expr><call><name><name>rs</name><operator>.</operator><name>first</name></name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
						<comment type="block">/*
						 * course offering exists
						 */</comment>
						<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"courseID"</literal></expr></argument>, <argument><expr><literal type="string">"coursesoffered"</literal></expr></argument>, <argument><expr><literal type="string">"CourseID"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name>int</name></type> <name>courseID</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"CourseID"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name>Course</name></type> <name>course</name> <init>= <expr><operator>new</operator> <call><name>Course</name><argument_list>(<argument><expr><name>courseID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name>CourseSchedule</name></type> <name>courseSchedule</name> <init>= <expr><operator>new</operator> <call><name>CourseSchedule</name><argument_list>(<argument><expr><name>offerID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="template">&lt;<argument><name>File</name></argument>&gt;</argument_list></name></type> <name>files</name> <init>= <expr><call><name><name>File</name><operator>.</operator><name>getFiles</name></name><argument_list>(<argument><expr><name>offerID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						
						<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"taughtBy"</literal></expr></argument>, <argument><expr><literal type="string">"coursesoffered"</literal></expr></argument>, <argument><expr><literal type="string">"TaughtBy"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name>int</name></type> <name>taughtBy</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"TaughtBy"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name>Professor</name></type> <name>professor</name> <init>= <expr><operator>new</operator> <call><name>Professor</name><argument_list>(<argument><expr><name>taughtBy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						
						<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"semID"</literal></expr></argument>, <argument><expr><literal type="string">"coursesoffered"</literal></expr></argument>, <argument><expr><literal type="string">"SemesterID"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name>int</name></type> <name>semID</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"SemesterID"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><name><name>this</name><operator>.</operator><name>SemesterID</name></name> <operator>=</operator> <name>semID</name></expr>;</expr_stmt>
						
						<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"totalCapacity"</literal></expr></argument>, <argument><expr><literal type="string">"coursesoffered"</literal></expr></argument>, <argument><expr><literal type="string">"TotalCapacity"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name>int</name></type> <name>totalCapacity</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"TotalCapacity"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><name><name>this</name><operator>.</operator><name>totalCapacity</name></name> <operator>=</operator> <name>totalCapacity</name></expr>;</expr_stmt>
						
						<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"seatsFilled"</literal></expr></argument>, <argument><expr><literal type="string">"coursesoffered"</literal></expr></argument>, <argument><expr><literal type="string">"SeatsFilled"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name>int</name></type> <name>seatsFilled</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"SeatsFilled"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><name><name>this</name><operator>.</operator><name>currentlyFilled</name></name> <operator>=</operator> <name>seatsFilled</name></expr>;</expr_stmt>
						
						<expr_stmt><expr><name><name>this</name><operator>.</operator><name>professor</name></name> <operator>=</operator> <name>professor</name></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>this</name><operator>.</operator><name>course</name></name> <operator>=</operator> <name>course</name></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>this</name><operator>.</operator><name>courseSchedule</name></name> <operator>=</operator> <name>courseSchedule</name></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>this</name><operator>.</operator><name>files</name></name> <operator>=</operator> <name>files</name></expr>;</expr_stmt>
						
					}</block></then>
					
					<else>else<block>{
						<throw>throw <expr><operator>new</operator> <call><name>CourseOfferingDoesNotExistException</name><argument_list>()</argument_list></call></expr>;</throw>
					}</block></else></if>
										
					
				}</block></then></if>
			}</block>
			
			<catch>catch<parameter_list>(<param><decl><type><name>SQLException</name></type> <name>e</name></decl></param>)</parameter_list><block>{
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Error retrieving course offering"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></catch> <catch>catch <parameter_list>(<param><decl><type><name><name>Student</name><operator>.</operator><name>AccessDeniedException</name></name></type> <name>e</name></decl></param>)</parameter_list> <block>{
				<comment type="line">// TODO Auto-generated catch block</comment>
				<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></catch> <catch>catch <parameter_list>(<param><decl><type><name><name>People</name><operator>.</operator><name>PersonDoesNotExistException</name></name></type> <name>e</name></decl></param>)</parameter_list> <block>{
				<comment type="line">// TODO Auto-generated catch block</comment>
				<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
						
		}</block>
		
		<finally>finally<block>{
		}</block></finally></try>

		
	}</block></constructor>
	
	
	<comment type="block">/*
	 * Getters and setters start*****************************************************
	 */</comment>
	<comment type="block" format="javadoc">/**
	 * @return the offerID
	 */</comment>
	<function><type><specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>getOfferID</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>offerID</name></expr>;</return>
	}</block></function>

	
	<comment type="block" format="javadoc">/**
	 * @return the course
	 */</comment>
	<function><type><specifier>public</specifier> <specifier>final</specifier> <name>Course</name></type> <name>getCourse</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>course</name></expr>;</return>
	}</block></function>


	<comment type="block" format="javadoc">/**
	 * @param course the course to set
	 */</comment>
	<function><type><specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>setCourse</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>Course</name></type> <name>course</name></decl></param>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>course</name></name> <operator>=</operator> <name>course</name></expr>;</expr_stmt>
	}</block></function>


	<comment type="block" format="javadoc">/**
	 * @return the courseSchedule
	 */</comment>
	<function><type><specifier>public</specifier> <specifier>final</specifier> <name>CourseSchedule</name></type> <name>getCourseSchedule</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>courseSchedule</name></expr>;</return>
	}</block></function>


	<comment type="block" format="javadoc">/**
	 * @param courseSchedule the courseSchedule to set
	 */</comment>
	<function><type><specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>setCourseSchedule</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>CourseSchedule</name></type> <name>courseSchedule</name></decl></param>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>courseSchedule</name></name> <operator>=</operator> <name>courseSchedule</name></expr>;</expr_stmt>
	}</block></function>

	
	<comment type="block" format="javadoc">/**
	 * @return the files
	 */</comment>
	<function><type><specifier>public</specifier> <specifier>final</specifier> <name><name>ArrayList</name><argument_list type="template">&lt;<argument><name>File</name></argument>&gt;</argument_list></name></type> <name>getFiles</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>files</name></expr>;</return>
	}</block></function>
	

	<comment type="block" format="javadoc">/**
	 * @param files the files to set
	 */</comment>
	<function><type><specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>setFiles</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>ArrayList</name><argument_list type="template">&lt;<argument><name>File</name></argument>&gt;</argument_list></name></type> <name>files</name></decl></param>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>files</name></name> <operator>=</operator> <name>files</name></expr>;</expr_stmt>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * @return the professor
	 */</comment>
	<function><type><specifier>public</specifier> <specifier>final</specifier> <name>Professor</name></type> <name>getProfessor</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>professor</name></expr>;</return>
	}</block></function>


	<comment type="block" format="javadoc">/**
	 * @param professor the professor to set
	 */</comment>
	<function><type><specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>setProfessor</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>Professor</name></type> <name>professor</name></decl></param>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>professor</name></name> <operator>=</operator> <name>professor</name></expr>;</expr_stmt>
	}</block></function>


	<comment type="block" format="javadoc">/**
	 * @return the semesterID
	 */</comment>
	<function><type><specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>getSemesterID</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>SemesterID</name></expr>;</return>
	}</block></function>


	<comment type="block" format="javadoc">/**
	 * @param semesterID the semesterID to set
	 */</comment>
	<function><type><specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>setSemesterID</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>int</name></type> <name>semesterID</name></decl></param>)</parameter_list> <block>{
		<expr_stmt><expr><name>SemesterID</name> <operator>=</operator> <name>semesterID</name></expr>;</expr_stmt>
	}</block></function>


	<comment type="block" format="javadoc">/**
	 * @return the totalCapacity
	 */</comment>
	<function><type><specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>getTotalCapacity</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>totalCapacity</name></expr>;</return>
	}</block></function>


	<comment type="block" format="javadoc">/**
	 * @param totalCapacity the totalCapacity to set
	 */</comment>
	<function><type><specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>setTotalCapacity</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>int</name></type> <name>totalCapacity</name></decl></param>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>totalCapacity</name></name> <operator>=</operator> <name>totalCapacity</name></expr>;</expr_stmt>
	}</block></function>


	<comment type="block" format="javadoc">/**
	 * @return the currentlyFilled
	 */</comment>
	<function><type><specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>getCurrentlyFilled</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>currentlyFilled</name></expr>;</return>
	}</block></function>


	<comment type="block" format="javadoc">/**
	 * @param currentlyFilled the currentlyFilled to set
	 */</comment>
	<function><type><specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>setCurrentlyFilled</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>int</name></type> <name>currentlyFilled</name></decl></param>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>currentlyFilled</name></name> <operator>=</operator> <name>currentlyFilled</name></expr>;</expr_stmt>
	}</block></function>

	<function><type><specifier>public</specifier> <name>String</name></type> <name>getCourseName</name><parameter_list>()</parameter_list><block>{
		<decl_stmt><decl><type><name>Course</name></type> <name>c</name> <init>= <expr><call><name>getCourse</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<return>return <expr><call><name><name>c</name><operator>.</operator><name>getCourseName</name></name><argument_list>()</argument_list></call></expr>;</return>
	}</block></function>
	
	<function><type><specifier>public</specifier> <name>String</name></type> <name>getProfessorName</name><parameter_list>()</parameter_list><block>{
		<decl_stmt><decl><type><name>Professor</name></type> <name>p</name> <init>= <expr><call><name>getProfessor</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<return>return <expr><call><name><name>p</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr>;</return>
	}</block></function>
	
	<function><type><specifier>public</specifier> <name>String</name></type> <name>getDepartmentName</name><parameter_list>()</parameter_list><block>{
		<decl_stmt><decl><type><name>Course</name></type> <name>c</name> <init>= <expr><call><name>getCourse</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Department</name></type> <name>d</name> <init>= <expr><call><name><name>c</name><operator>.</operator><name>getDepartment</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<return>return <expr><call><name><name>d</name><operator>.</operator><name>getDepartmentName</name></name><argument_list>()</argument_list></call></expr>;</return>
	}</block></function>
	
	<function><type><specifier>public</specifier> <name>String</name></type> <name>getClassRoomName</name><parameter_list>()</parameter_list><block>{
		<decl_stmt><decl><type><name>CourseSchedule</name></type> <name>cs</name> <init>= <expr><call><name>getCourseSchedule</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Classroom</name></type> <name>cr</name> <init>= <expr><call><name><name>cs</name><operator>.</operator><name>getClassroom</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ClassroomName</name></type> <name>cn</name> <init>= <expr><call><name><name>cr</name><operator>.</operator><name>getClassroomName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<return>return <expr><call><name><name>cn</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
	}</block></function>
	
	<function><type><specifier>public</specifier> <name>String</name></type> <name>getClassRoomLocation</name><parameter_list>()</parameter_list><block>{
		<decl_stmt><decl><type><name>CourseSchedule</name></type> <name>cs</name> <init>= <expr><call><name>getCourseSchedule</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Classroom</name></type> <name>cr</name> <init>= <expr><call><name><name>cs</name><operator>.</operator><name>getClassroom</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ClassroomLocation</name></type> <name>cl</name> <init>= <expr><call><name><name>cr</name><operator>.</operator><name>getClassroomLocation</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<return>return <expr><call><name><name>cl</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
	}</block></function>
	
	<function><type><specifier>public</specifier> <name>String</name></type> <name>getTiming</name><parameter_list>()</parameter_list><block>{
		<decl_stmt><decl><type><name>CourseSchedule</name></type> <name>cs</name> <init>= <expr><call><name>getCourseSchedule</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Timeslots</name></type> <name>ts</name> <init>= <expr><call><name><name>cs</name><operator>.</operator><name>getTimeslot</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>times</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><call><name><name>ts</name><operator>.</operator><name>getTimeslotType</name></name><argument_list>()</argument_list></call><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name>times</name><operator>+=</operator><literal type="string">"M-W-F -&gt; "</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>times</name> <operator>+=</operator> <call><name><name>ts</name><operator>.</operator><name>getStartHour</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="string">"00 TO "</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>times</name> <operator>+=</operator> <call><name><name>ts</name><operator>.</operator><name>getEndHour</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="string">"00"</literal></expr>;</expr_stmt>
		}</block></then></if>
		
		<if>if<condition>(<expr><call><name><name>ts</name><operator>.</operator><name>getTimeslotType</name></name><argument_list>()</argument_list></call><operator>==</operator><literal type="number">2</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name>times</name><operator>+=</operator><literal type="string">"T-TH -&gt; "</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>times</name> <operator>+=</operator> <call><name><name>ts</name><operator>.</operator><name>getStartHour</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="string">"00 TO "</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>times</name> <operator>+=</operator> <call><name><name>ts</name><operator>.</operator><name>getEndHour</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="string">"00"</literal></expr>;</expr_stmt>
		}</block></then></if>
		
		<return>return <expr><name>times</name></expr>;</return>
		
	}</block></function>
	
	<comment type="block">/*
	 * Getters and settes end********************************************************
	 */</comment>
	
	
	<comment type="block">/*
	 * Returns all the current offerings as a ArrayList of CourseOffered objects
	 */</comment>
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>ArrayList</name><argument_list type="template">&lt;<argument><name>CourseOffered</name></argument>&gt;</argument_list></name></type> <name>getAllCurrentlyOfferedCourses</name><parameter_list>()</parameter_list><block>{
		<decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="template">&lt;<argument><name>CourseOffered</name></argument>&gt;</argument_list></name></type> <name>currentOffering</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="template">&lt;<argument><name>CourseOffered</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>currentSemID</name> <init>= <expr><call><name>getCurrentSemesterID</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<try>try<block>{
			<decl_stmt><decl><type><name>Connection</name></type> <name>conn</name> <init>= <expr><call><name><name>Database</name><operator>.</operator><name>getConnection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<try>try<block>{
				<if>if<condition>(<expr><name>conn</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then><block>{
					
					<comment type="line">//Retrieve the current semester ID</comment>
					<decl_stmt><decl><type><name>String</name></type> <name>SQLSelect</name> <init>= <expr><literal type="string">"Select *"</literal>
							<operator>+</operator> <literal type="string">" FROM coursesoffered"</literal>
							<operator>+</operator> <literal type="string">" WHERE SemesterID= ?"</literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>PreparedStatement</name></type> <name>statement</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>prepareStatement</name></name><argument_list>(<argument><expr><name>SQLSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name>statement</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>currentSemID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name>ResultSet</name></type> <name>rs</name> <init>= <expr><call><name><name>statement</name><operator>.</operator><name>executeQuery</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					
					<while>while<condition>(<expr><call><name><name>rs</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{
						<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"offerID"</literal></expr></argument>, <argument><expr><literal type="string">"coursesoffered"</literal></expr></argument>, <argument><expr><literal type="string">"OfferID"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name>int</name></type> <name>offerID</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"OfferID"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name>CourseOffered</name></type> <name>c</name> <init>= <expr><operator>new</operator> <call><name>CourseOffered</name><argument_list>(<argument><expr><name>offerID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name>currentOffering</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></while>
										
				}</block></then></if>
			}</block>
			
			<catch>catch<parameter_list>(<param><decl><type><name>SQLException</name></type> <name>e</name></decl></param>)</parameter_list><block>{
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Error retrieving course offering"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></catch> <catch>catch <parameter_list>(<param><decl><type><name><name>Course</name><operator>.</operator><name>CourseDoesNotExistException</name></name></type> <name>e</name></decl></param>)</parameter_list> <block>{
				<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></catch> <catch>catch <parameter_list>(<param><decl><type><name>CourseOfferingDoesNotExistException</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
				<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>			
		}</block>
		
		<finally>finally<block>{
		}</block></finally></try>
		
		<return>return <expr><name>currentOffering</name></expr>;</return>
	}</block></function>
	
	<comment type="block">/*
	 * Returns a HashMap of OfferID and CourseOffered for all the currently offered courses
	 */</comment>
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>HashMap</name><argument_list type="template">&lt;<argument><name>Integer</name></argument>,<argument><name>CourseOffered</name></argument>&gt;</argument_list></name></type> <name>getAllOfferedIDAndCourseOffered</name><parameter_list>()</parameter_list><block>{
		<decl_stmt><decl><type><name><name>HashMap</name><argument_list type="template">&lt;<argument><name>Integer</name></argument>, <argument><name>CourseOffered</name></argument>&gt;</argument_list></name></type> <name>offerdCourses</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="template">&lt;<argument><name>Integer</name></argument>, <argument><name>CourseOffered</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>currentSemID</name> <init>= <expr><call><name>getCurrentSemesterID</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<try>try<block>{
			<decl_stmt><decl><type><name>Connection</name></type> <name>conn</name> <init>= <expr><call><name><name>Database</name><operator>.</operator><name>getConnection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<try>try<block>{
				<if>if<condition>(<expr><name>conn</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then><block>{
					
					<comment type="line">//Retrieve the current semester ID</comment>
					<decl_stmt><decl><type><name>String</name></type> <name>SemesterSelect</name> <init>= <expr><literal type="string">"Select *"</literal>
							<operator>+</operator> <literal type="string">" FROM coursesoffered"</literal>
							<operator>+</operator> <literal type="string">" WHERE SemesterID= ?"</literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>PreparedStatement</name></type> <name>statement</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>prepareStatement</name></name><argument_list>(<argument><expr><name>SemesterSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name>statement</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>currentSemID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name>ResultSet</name></type> <name>rs</name> <init>= <expr><call><name><name>statement</name><operator>.</operator><name>executeQuery</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					
					<while>while<condition>(<expr><call><name><name>rs</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{
						<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"offerID"</literal></expr></argument>, <argument><expr><literal type="string">"coursesoffered"</literal></expr></argument>, <argument><expr><literal type="string">"OfferID"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name>int</name></type> <name>offerID</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"OfferID"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name>CourseOffered</name></type> <name>c</name> <init>= <expr><operator>new</operator> <call><name>CourseOffered</name><argument_list>(<argument><expr><name>offerID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name>offerdCourses</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>offerID</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></while>
										
				}</block></then></if>
			}</block>
			
			<catch>catch<parameter_list>(<param><decl><type><name>SQLException</name></type> <name>e</name></decl></param>)</parameter_list><block>{
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Error  course offering"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></catch> <catch>catch <parameter_list>(<param><decl><type><name><name>Course</name><operator>.</operator><name>CourseDoesNotExistException</name></name></type> <name>e</name></decl></param>)</parameter_list> <block>{
				<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></catch> <catch>catch <parameter_list>(<param><decl><type><name>CourseOfferingDoesNotExistException</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
				<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>			
		}</block>
		
		<finally>finally<block>{
		}</block></finally></try>
		
		<return>return <expr><name>offerdCourses</name></expr>;</return>
	}</block></function>
	
	<comment type="block">/*
	 * Returns all the current and previous offerings as a ArrayList of CourseOffered objects
	 */</comment>
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>ArrayList</name><argument_list type="template">&lt;<argument><name>CourseOffered</name></argument>&gt;</argument_list></name></type> <name>getAllOfferedCourses</name><parameter_list>()</parameter_list><block>{
		<decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="template">&lt;<argument><name>CourseOffered</name></argument>&gt;</argument_list></name></type> <name>currentOffering</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="template">&lt;<argument><name>CourseOffered</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>		
		<try>try<block>{
			<decl_stmt><decl><type><name>Connection</name></type> <name>conn</name> <init>= <expr><call><name><name>Database</name><operator>.</operator><name>getConnection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<try>try<block>{
				<if>if<condition>(<expr><name>conn</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then><block>{
					
					<comment type="line">//Retrieve the current semester ID</comment>
					<decl_stmt><decl><type><name>String</name></type> <name>SemesterSelect</name> <init>= <expr><literal type="string">"Select *"</literal>
							<operator>+</operator> <literal type="string">" FROM coursesoffered"</literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>PreparedStatement</name></type> <name>statement</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>prepareStatement</name></name><argument_list>(<argument><expr><name>SemesterSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>ResultSet</name></type> <name>rs</name> <init>= <expr><call><name><name>statement</name><operator>.</operator><name>executeQuery</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					
					<while>while<condition>(<expr><call><name><name>rs</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{
						<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"offerID"</literal></expr></argument>, <argument><expr><literal type="string">"coursesoffered"</literal></expr></argument>, <argument><expr><literal type="string">"OfferID"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name>int</name></type> <name>offerID</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"OfferID"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name>CourseOffered</name></type> <name>c</name> <init>= <expr><operator>new</operator> <call><name>CourseOffered</name><argument_list>(<argument><expr><name>offerID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name>currentOffering</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></while>
										
				}</block></then></if>
			}</block>
			
			<catch>catch<parameter_list>(<param><decl><type><name>SQLException</name></type> <name>e</name></decl></param>)</parameter_list><block>{
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Error  course offering"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></catch> <catch>catch <parameter_list>(<param><decl><type><name><name>Course</name><operator>.</operator><name>CourseDoesNotExistException</name></name></type> <name>e</name></decl></param>)</parameter_list> <block>{
				<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></catch> <catch>catch <parameter_list>(<param><decl><type><name>CourseOfferingDoesNotExistException</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
				<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>			
		}</block>
		
		<finally>finally<block>{
		}</block></finally></try>
		
		<return>return <expr><name>currentOffering</name></expr>;</return>
	}</block></function>
	
	<comment type="block">/*
	 * Add the course offering as a current offering to the database for the specified course, professor and capacity combo
	 * The functions tries to see if the course can be scheduled in any classroom or not and schedules it if possible
	 * The function also creates a default information file for the course offering  and adds the file to the course folder
	 * Class the function in CourseExam to create a table to store all the course exam and test details
	 * Throws a CourseOffering already exists exception if the offering already exists in the database for the current semester
	 * Throws a COurseOffering not schedulable exception is the course offering cannot be scheduled in any classroom
	 */</comment>
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>addCourseOfferingToDatabase</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>Course</name></type> <name>course</name></decl></param>,  <param><decl><type><specifier>final</specifier> <name>Professor</name></type> <name>professor</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>int</name></type> <name>capacity</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>CourseOfferingAlreadyExistsException</name></expr></argument>, <argument><expr><name>CourseOfferingNotSchedulable</name></expr></argument></throws><block>{
		<if>if<condition>(<expr><name>course</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name>professor</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name>capacity</name> <operator>&lt;=</operator><literal type="number">0</literal></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
		
		
		<decl_stmt><decl><type><name>int</name></type> <name>profID</name> <init>= <expr><call><name><name>professor</name><operator>.</operator><name>getUIN</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>courseID</name> <init>= <expr><call><name><name>course</name><operator>.</operator><name>getCourseID</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>totalCap</name> <init>= <expr><name>capacity</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>minCap</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>boolean</name></type> <name>addFlag</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
		
		<comment type="line">//Check if the same professor is teaching the same course in the current semester</comment>
		<comment type="line">//if yes then add the course offering in the table</comment>
		<comment type="line">//then retrieve the same course in a result set</comment>
		<try>try<block>{
			<decl_stmt><decl><type><name>Connection</name></type> <name>conn</name> <init>= <expr><call><name><name>Database</name><operator>.</operator><name>getConnection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<try>try<block>{
				<if>if<condition>(<expr><name>conn</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then><block>{
					
					<decl_stmt><decl><type><name>int</name></type> <name>semesterID</name> <init>= <expr><call><name>getCurrentSemesterID</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>String</name></type> <name>SQLSelect</name><init>= <expr><literal type="string">"Select OfferID"</literal>
							<operator>+</operator> <literal type="string">" FROM coursesoffered"</literal>
							<operator>+</operator> <literal type="string">" WHERE courseID= ? and TaughtBy= ? and SemesterID= ?"</literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>PreparedStatement</name></type> <name>statement</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>prepareStatement</name></name><argument_list>(<argument><expr><name>SQLSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name>statement</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>courseID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>statement</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>profID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>statement</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>semesterID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name>ResultSet</name></type> <name>rs</name> <init>=  <expr><call><name><name>statement</name><operator>.</operator><name>executeQuery</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					
					<if>if<condition>(<expr><call><name><name>rs</name><operator>.</operator><name>first</name></name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
						<comment type="block">/*
						 * course offerings with the same courses exist
						 */</comment>
						<throw>throw <expr><operator>new</operator> <call><name>CourseOfferingAlreadyExistsException</name><argument_list>()</argument_list></call></expr>;</throw>
					}</block></then>
					
					<else>else<block>{
						<comment type="block">/*
						 * Check if the course offering is schedulable
						 */</comment>
						<if>if<condition>(<expr><operator>!</operator><call><name><name>CourseSchedule</name><operator>.</operator><name>isAnotherCourseSchedulable</name></name><argument_list>(<argument><expr><name>capacity</name></expr></argument>)</argument_list></call></expr>)</condition><then>
							<block type="pseudo"><throw>throw <expr><operator>new</operator> <call><name>CourseOfferingNotSchedulable</name><argument_list>()</argument_list></call></expr>;</throw></block></then></if>
						
						<comment type="block">/*
						 * Add the object data to the courseOffered table
						 */</comment>
						
						<comment type="block">/*
						 * Annotating the insert statement here
						 */</comment>
						
						<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"courseID"</literal></expr></argument>, <argument><expr><literal type="string">"coursesoffered"</literal></expr></argument>, <argument><expr><literal type="string">"CourseID"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"semesterID"</literal></expr></argument>, <argument><expr><literal type="string">"coursesoffered"</literal></expr></argument>, <argument><expr><literal type="string">"SemesterID"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"totalCap"</literal></expr></argument>, <argument><expr><literal type="string">"coursesoffered"</literal></expr></argument>, <argument><expr><literal type="string">"TotalCapacity"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"minCap"</literal></expr></argument>, <argument><expr><literal type="string">"coursesoffered"</literal></expr></argument>, <argument><expr><literal type="string">"SeatsFilled"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"profID"</literal></expr></argument>, <argument><expr><literal type="string">"coursesoffered"</literal></expr></argument>, <argument><expr><literal type="string">"TaughtBy"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						
						<decl_stmt><decl><type><name>String</name></type> <name>SQLInsert</name> <init>= <expr><literal type="string">"Insert into coursesoffered"</literal>
								<operator>+</operator> <literal type="string">"(CourseID,SemesterID,TotalCapacity,SeatsFilled,TaughtBy)"</literal>
								<operator>+</operator> <literal type="string">"Values(?,?,?,?,?);"</literal></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><name>statement</name> <operator>=</operator> <call><name><name>conn</name><operator>.</operator><name>prepareStatement</name></name><argument_list>(<argument><expr><name>SQLInsert</name></expr></argument>, <argument><expr><name><name>Statement</name><operator>.</operator><name>RETURN_GENERATED_KEYS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name>statement</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>courseID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name>statement</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>semesterID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name>statement</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>totalCap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name>statement</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>minCap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name>statement</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>profID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name>statement</name><operator>.</operator><name>executeUpdate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name>ResultSet</name></type> <name>generatedSet</name> <init>= <expr><call><name><name>statement</name><operator>.</operator><name>getGeneratedKeys</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
						
						<decl_stmt><decl><type><name>int</name></type> <name>generatedID</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
						
						<if>if<condition>(<expr><call><name><name>generatedSet</name><operator>.</operator><name>first</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
							<block type="pseudo"><expr_stmt><expr><name>generatedID</name> <operator>=</operator> <call><name><name>generatedSet</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
						<else>else
							<block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></else></if>
						<comment type="block">/*
						 * flag to see if the table for exams was created
						 */</comment>
						<decl_stmt><decl><type><name>boolean</name></type> <name>tableFlag</name> <init>= <expr><call><name><name>CourseExams</name><operator>.</operator><name>createCourseExamMarksTable</name></name><argument_list>(<argument><expr><call><name><name>course</name><operator>.</operator><name>getCourseName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>generatedID</name></expr></argument>, <argument><expr><call><name>getCurrentSemesterID</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<comment type="block">/*
						 * flag to see if the course was successfully scheduled
						 */</comment>
						<decl_stmt><decl><type><name>boolean</name></type> <name>flag</name> <init>= <expr><call><name><name>CourseSchedule</name><operator>.</operator><name>scheduleCourseUsingID</name></name><argument_list>(<argument><expr><name>generatedID</name></expr></argument>, <argument><expr><name>totalCap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<comment type="block">/*
						 * flag to see if the default file with course details was created to be added to this course
						 */</comment>
						<decl_stmt><decl><type><name>boolean</name></type> <name>fileFlag</name> <init>= <expr><call><name>makeDefaultCourseFile</name><argument_list>(<argument><expr><name>generatedID</name></expr></argument>, <argument><expr><call><name><name>course</name><operator>.</operator><name>getCourseName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>professor</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						
						<comment type="block">/*
						 * Checks if the file was created and adds it to the database
						 */</comment>
						
												
						<if>if<condition>(<expr><name>fileFlag</name></expr>)</condition><then><block>{
							<comment type="line">//String currentPath = System.getProperty("user.dir");</comment>
							<comment type="line">//String fileDir = currentPath+"/Files/"+course.getCourseName()+"-"+generatedID;</comment>
							<decl_stmt><decl><type><name>String</name></type> <name>fileDir</name> <init>= <expr><literal type="string">"/Files/"</literal><operator>+</operator><call><name><name>course</name><operator>.</operator><name>getCourseName</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="string">"-"</literal><operator>+</operator><name>generatedID</name></expr></init></decl>;</decl_stmt>
							<decl_stmt><decl><type><name>String</name></type> <name>fileName</name> <init>= <expr><call><name><name>course</name><operator>.</operator><name>getCourseName</name></name><argument_list>()</argument_list></call><operator>+</operator><name>generatedID</name><operator>+</operator><literal type="string">"-details.txt"</literal></expr></init></decl>;</decl_stmt>
							<expr_stmt><expr><name>fileFlag</name> <operator>=</operator> <call><name><name>File</name><operator>.</operator><name>addFileToDB</name></name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><name>fileDir</name></expr></argument>, <argument><expr><name>generatedID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></then></if>
						
						
						
						<comment type="block">/*
						 * If the scheduling, file creation, exam table creation and the file addition to database is successful
						 * commit the whole transaction to the database
						 */</comment>
						<if>if<condition>(<expr><name>flag</name> <operator>&amp;&amp;</operator> <name>tableFlag</name> <operator>&amp;&amp;</operator> <name>fileFlag</name></expr>)</condition><then><block>{		
							<expr_stmt><expr><call><name><name>Database</name><operator>.</operator><name>commitTransaction</name></name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Added file------------------------"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><name>addFlag</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
						}</block></then></if>
																				
					}</block></else></if>
				}</block></then></if>
			}</block>
			
			<catch>catch<parameter_list>(<param><decl><type><name>SQLException</name></type> <name>e</name></decl></param>)</parameter_list><block>{
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Error addind course offering"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
			
		}</block>
		
		<finally>finally<block>{
		}</block></finally></try>
		
		<return>return <expr><name>addFlag</name></expr>;</return>
		
	}</block></function>

	<comment type="block">/*
	 * Function to update the professor teaching the course currently
	 */</comment>
	<function><type><specifier>public</specifier> <name>boolean</name></type> <name>updateCourseOffering</name><parameter_list>(<param><decl><type><name>Professor</name></type> <name>professor</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>CourseOfferingDoesNotExistException</name></expr></argument></throws><block>{		
		<if>if<condition>(<expr><operator>!</operator><call><name>checkIfCurrent</name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
			<return>return <expr><literal type="boolean">false</literal></expr>;</return>
		}</block></then></if>
		
		<decl_stmt><decl><type><name>boolean</name></type> <name>isUpdated</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>	
		<try>try<block>{
			<decl_stmt><decl><type><name>Connection</name></type> <name>conn</name> <init>= <expr><call><name><name>Database</name><operator>.</operator><name>getConnection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<try>try<block>{
				<if>if<condition>(<expr><name>conn</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then><block>{
					
					<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"profID"</literal></expr></argument>, <argument><expr><literal type="string">"coursesoffered"</literal></expr></argument>, <argument><expr><literal type="string">"TaughtBy"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"offerID"</literal></expr></argument>, <argument><expr><literal type="string">"coursesoffered"</literal></expr></argument>, <argument><expr><literal type="string">"OfferID"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name>String</name></type> <name>SQLUpdate</name> <init>= <expr><literal type="string">"UPDATE coursesoffered "</literal>
							<operator>+</operator> <literal type="string">"SET Taughtby= ? "</literal>
							<operator>+</operator> <literal type="string">"WHERE offerID= ?"</literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>PreparedStatement</name></type> <name>statement</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>prepareStatement</name></name><argument_list>(<argument><expr><name>SQLUpdate</name></expr></argument>, <argument><expr><name><name>ResultSet</name><operator>.</operator><name>CONCUR_UPDATABLE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>int</name></type> <name>profID</name> <init>= <expr><call><name><name>professor</name><operator>.</operator><name>getUIN</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>int</name></type> <name>offerID</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>getOfferID</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name>statement</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>profID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>statement</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>offerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>statement</name><operator>.</operator><name>executeUpdate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>Database</name><operator>.</operator><name>commitTransaction</name></name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>isUpdated</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
				}</block></then></if>
			}</block>
			
			<catch>catch<parameter_list>(<param><decl><type><name>SQLException</name></type> <name>e</name></decl></param>)</parameter_list><block>{
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Error updating course offering"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
			
		}</block>
		
		<finally>finally<block>{
		}</block></finally></try>
		
		<return>return <expr><name>isUpdated</name></expr>;</return>
		
	}</block></function>

	<comment type="block">/*
	 * Makes a folder in the Files folder (present in the course folder) for storing all the course related files
	 */</comment>
	<function><type><specifier>private</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>makeDefaultCourseFile</name><parameter_list>(<param><decl><type><name>int</name></type> <name>offerID</name></decl></param>, <param><decl><type><name>String</name></type> <name>courseName</name></decl></param>, <param><decl><type><name>String</name></type> <name>Professor</name></decl></param>)</parameter_list><block>{
		<try>try<block>{
			<decl_stmt><decl><type><name>String</name></type> <name>currentPath</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"user.dir"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>String</name></type> <name>fileDir</name> <init>= <expr><name>currentPath</name><operator>+</operator><literal type="string">"/Files/"</literal><operator>+</operator><name>courseName</name><operator>+</operator><literal type="string">"-"</literal><operator>+</operator><name>offerID</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>boolean</name></type> <name>dir</name> <init>= <expr><operator>new</operator> <call><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name><argument_list>(<argument><expr><name>fileDir</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>mkdirs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name></type> <name>newFile</name> <init>= <expr><operator>new</operator> <call><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name><argument_list>(<argument><expr><name>fileDir</name><operator>+</operator><literal type="string">"/"</literal><operator>+</operator><name>courseName</name><operator>+</operator><name>offerID</name><operator>+</operator><literal type="string">"-details.txt"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>FileWriter</name></type> <name>writer</name> <init>= <expr><operator>new</operator> <call><name>FileWriter</name><argument_list>(<argument><expr><name>newFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><literal type="string">"Course Details:\n Course name:"</literal><operator>+</operator><name>courseName</name><operator>+</operator><literal type="string">"\nTaught by:"</literal><operator>+</operator><name>Professor</name><operator>+</operator><literal type="string">"\nPlease check your"</literal>
					<operator>+</operator> <literal type="string">" courses tab for more details"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="boolean">true</literal></expr>;</return>
		}</block>
		
		<catch>catch<parameter_list>(<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>)</parameter_list><block>{
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"IO error Not formed"</literal><operator>+</operator> <call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="boolean">false</literal></expr>;</return>
		}</block></catch>
		
		<catch>catch<parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list><block>{
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Not formed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="boolean">false</literal></expr>;</return>
		}</block></catch></try>
		
		
	}</block></function>
	
	
	<comment type="block">/*
	 * Returns an array list of all the current CourseOffered objects for the specified student 
	 */</comment>
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>ArrayList</name><argument_list type="template">&lt;<argument><name>CourseOffered</name></argument>&gt;</argument_list></name></type> <name>getStudentCourses</name><parameter_list>(<param><decl><type><name>Student</name></type> <name>student</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name><name>Course</name><operator>.</operator><name>CourseDoesNotExistException</name></name></expr></argument>, <argument><expr><name>CourseOfferingDoesNotExistException</name></expr></argument></throws><block>{
		<if>if<condition>(<expr><name>student</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<throw>throw <expr><operator>new</operator> <call><name>NullPointerException</name><argument_list>()</argument_list></call></expr>;</throw>
		}</block></then></if>
		
		<decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="template">&lt;<argument><name>CourseOffered</name></argument>&gt;</argument_list></name></type> <name>studentCourses</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="template">&lt;<argument><name>CourseOffered</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<try>try<block>{
			<decl_stmt><decl><type><name>Connection</name></type> <name>conn</name> <init>= <expr><call><name><name>Database</name><operator>.</operator><name>getConnection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<try>try<block>{
				<if>if<condition>(<expr><name>conn</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then><block>{
					
					<comment type="line">//Retrieve the current semester ID</comment>
					<decl_stmt><decl><type><name>String</name></type> <name>SQLSelect</name> <init>= <expr><literal type="string">"Select *"</literal>
							<operator>+</operator> <literal type="string">" FROM studentenrollment"</literal>
							<operator>+</operator> <literal type="string">" WHERE UIN= ?"</literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>PreparedStatement</name></type> <name>statement</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>prepareStatement</name></name><argument_list>(<argument><expr><name>SQLSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name>statement</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>student</name><operator>.</operator><name>getUIN</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name>ResultSet</name></type> <name>rs</name> <init>= <expr><call><name><name>statement</name><operator>.</operator><name>executeQuery</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					
					<while>while<condition>(<expr><call><name><name>rs</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{
						<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"offerID"</literal></expr></argument>, <argument><expr><literal type="string">"studentenrollment"</literal></expr></argument>, <argument><expr><literal type="string">"OfferID"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name>int</name></type> <name>offerID</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"OfferID"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name>CourseOffered</name></type> <name>course</name> <init>= <expr><operator>new</operator> <call><name>CourseOffered</name><argument_list>(<argument><expr><name>offerID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name>studentCourses</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>course</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></while>
					
				}</block></then></if>
					
			}</block>
			
			<catch>catch<parameter_list>(<param><decl><type><name>SQLException</name></type> <name>e</name></decl></param>)</parameter_list><block>{
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Error retrieving course offering"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				
			}</block></catch>
				
			<finally>finally<block>{
			}</block></finally></try>
			
		
			<return>return <expr><name>studentCourses</name></expr>;</return>
		}</block>
		
		<finally>finally<block>{
		}</block></finally></try>
		
	}</block></function>
	
	<comment type="block">/*
	 * returns all the students who have registered for the course offering 
	 */</comment>
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>ArrayList</name><argument_list type="template">&lt;<argument><name>Student</name></argument>&gt;</argument_list></name></type> <name>getAllStudentsInCourse</name><parameter_list>(<param><decl><type><name>CourseOffered</name></type> <name>courseOffered</name></decl></param>)</parameter_list><block>{
		<if>if<condition>(<expr><name>courseOffered</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<throw>throw <expr><operator>new</operator> <call><name>NullPointerException</name><argument_list>()</argument_list></call></expr>;</throw>
		}</block></then></if>
		<decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="template">&lt;<argument><name>Student</name></argument>&gt;</argument_list></name></type> <name>students</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="template">&lt;<argument><name>Student</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<try>try<block>{
			<decl_stmt><decl><type><name>Connection</name></type> <name>conn</name> <init>= <expr><call><name><name>Database</name><operator>.</operator><name>getConnection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<try>try<block>{
				<if>if<condition>(<expr><name>conn</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then><block>{
					
					<comment type="line">//Retrieve the current semester ID</comment>
					<decl_stmt><decl><type><name>String</name></type> <name>studentSelect</name> <init>= <expr><literal type="string">"Select *"</literal>
							<operator>+</operator> <literal type="string">" FROM studentenrollment"</literal>
							<operator>+</operator> <literal type="string">" WHERE OfferID=?"</literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>PreparedStatement</name></type> <name>statement</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>prepareStatement</name></name><argument_list>(<argument><expr><name>studentSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name>statement</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>courseOffered</name><operator>.</operator><name>getOfferID</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name>ResultSet</name></type> <name>rs</name> <init>= <expr><call><name><name>statement</name><operator>.</operator><name>executeQuery</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					
					<while>while<condition>(<expr><call><name><name>rs</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{
						<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"UIN"</literal></expr></argument>, <argument><expr><literal type="string">"studentenrollment"</literal></expr></argument>, <argument><expr><literal type="string">"UIN"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name>int</name></type> <name>UIN</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"UIN"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name>Student</name></type> <name>s</name> <init>= <expr><operator>new</operator> <call><name>Student</name><argument_list>(<argument><expr><name>UIN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<if>if<condition>(<expr><name>s</name><operator>!=</operator><literal type="null">null</literal></expr>)</condition><then>
							<block type="pseudo"><expr_stmt><expr><call><name><name>students</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
					}</block></while>
					
				}</block></then>
					
					
				<else>else<block>{
					<throw>throw <expr><operator>new</operator> <call><name>CourseOfferingDoesNotExistException</name><argument_list>()</argument_list></call></expr>;</throw>
				}</block></else></if>
										
					
				
			}</block>
			
			<catch>catch<parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list><block>{
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				
			}</block></catch></try>			
		}</block>
				
		<finally>finally<block>{
		}</block></finally></try>
		
		<return>return <expr><name>students</name></expr>;</return>
		
	}</block></function>
	
	<comment type="block">/*
	 * Returns all the current courses that the specified professor is teaching
	 */</comment>
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>ArrayList</name><argument_list type="template">&lt;<argument><name>CourseOffered</name></argument>&gt;</argument_list></name></type> <name>getCurrentProfessorCourses</name><parameter_list>(<param><decl><type><name>Professor</name></type> <name>professor</name></decl></param>)</parameter_list><block>{
		<if>if<condition>(<expr><name>professor</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><literal type="null">null</literal></expr>;</return></block></then></if>
		
		<decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="template">&lt;<argument><name>CourseOffered</name></argument>&gt;</argument_list></name></type> <name>profCourses</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="template">&lt;<argument><name>CourseOffered</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>professorID</name> <init>= <expr><call><name><name>professor</name><operator>.</operator><name>getUIN</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>currentSemesterID</name> <init>= <expr><call><name>getCurrentSemesterID</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<try>try<block>{
			<decl_stmt><decl><type><name>Connection</name></type> <name>conn</name> <init>= <expr><call><name><name>Database</name><operator>.</operator><name>getConnection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<try>try<block>{
				<if>if<condition>(<expr><name>conn</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then><block>{
					
					<comment type="line">//Retrieve the current semester ID</comment>
					<decl_stmt><decl><type><name>String</name></type> <name>SQLSelect</name> <init>= <expr><literal type="string">"Select *"</literal>
							<operator>+</operator> <literal type="string">" FROM coursesoffered"</literal>
							<operator>+</operator> <literal type="string">" WHERE TaughtBy=? and SemesterID= ?"</literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>PreparedStatement</name></type> <name>statement</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>prepareStatement</name></name><argument_list>(<argument><expr><name>SQLSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name>statement</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>professorID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>statement</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>currentSemesterID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name>ResultSet</name></type> <name>rs</name> <init>= <expr><call><name><name>statement</name><operator>.</operator><name>executeQuery</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					
					<while>while<condition>(<expr><call><name><name>rs</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{
						<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"offerID"</literal></expr></argument>, <argument><expr><literal type="string">"coursesoffered"</literal></expr></argument>, <argument><expr><literal type="string">"OfferID"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name>int</name></type> <name>offerID</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"OfferID"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name>CourseOffered</name></type> <name>c</name> <init>= <expr><operator>new</operator> <call><name>CourseOffered</name><argument_list>(<argument><expr><name>offerID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name>profCourses</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></while>
					
				}</block></then>
					
					
				<else>else<block>{
					<throw>throw <expr><operator>new</operator> <call><name>IllegalAccessException</name><argument_list>(<argument><expr><literal type="string">"Professor deos not exist"</literal></expr></argument>)</argument_list></call></expr>;</throw>
				}</block></else></if>
										
					
				
			}</block>
			
			<catch>catch<parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list><block>{
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				
			}</block></catch></try>
			
		}</block>
		<finally>finally<block>{
		}</block></finally></try>
		
		<return>return <expr><name>profCourses</name></expr>;</return>
	}</block></function>
	
	<comment type="block">/*
	 * Returns all the courses that are being currently TAed by the TA
	 */</comment>
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>ArrayList</name><argument_list type="template">&lt;<argument><name>CourseOffered</name></argument>&gt;</argument_list></name></type> <name>getAllCurrentCoursesTAedBy</name><parameter_list>(<param><decl><type><name>TA</name></type> <name>ta</name></decl></param>)</parameter_list><block>{
		<if>if<condition>(<expr><name>ta</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><literal type="null">null</literal></expr>;</return></block></then></if>
		
		<decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="template">&lt;<argument><name>CourseOffered</name></argument>&gt;</argument_list></name></type> <name>taCourses</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="template">&lt;<argument><name>CourseOffered</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>TAID</name> <init>= <expr><call><name><name>ta</name><operator>.</operator><name>getUIN</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>currentSemesterID</name> <init>= <expr><call><name>getCurrentSemesterID</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<try>try<block>{
			<decl_stmt><decl><type><name>Connection</name></type> <name>conn</name> <init>= <expr><call><name><name>Database</name><operator>.</operator><name>getConnection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<try>try<block>{
				<if>if<condition>(<expr><name>conn</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then><block>{
					
					<comment type="line">//Retrieve the current semester ID</comment>
					<decl_stmt><decl><type><name>String</name></type> <name>SemesterSelect</name> <init>= <expr><literal type="string">"Select *"</literal>
							<operator>+</operator> <literal type="string">" FROM coursesoffered as c join teachingassistant as t"</literal>
							<operator>+</operator> <literal type="string">" WHERE c.SemesterID= ? and t.OfferID = c.OfferID and TaUIN= ?"</literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>PreparedStatement</name></type> <name>statement</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>prepareStatement</name></name><argument_list>(<argument><expr><name>SemesterSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name>statement</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>currentSemesterID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>statement</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>TAID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name>ResultSet</name></type> <name>rs</name> <init>= <expr><call><name><name>statement</name><operator>.</operator><name>executeQuery</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					
					<while>while<condition>(<expr><call><name><name>rs</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{
						<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"offerID"</literal></expr></argument>, <argument><expr><literal type="string">"coursesoffered"</literal></expr></argument>, <argument><expr><literal type="string">"OfferID"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name>int</name></type> <name>offerID</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"OfferID"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name>CourseOffered</name></type> <name>c</name> <init>= <expr><operator>new</operator> <call><name>CourseOffered</name><argument_list>(<argument><expr><name>offerID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name>taCourses</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></while>
					
				}</block></then>
					
					
				<else>else<block>{
					<throw>throw <expr><operator>new</operator> <call><name>IllegalAccessException</name><argument_list>(<argument><expr><literal type="string">"TA does not exits - CoursesOffered.java"</literal></expr></argument>)</argument_list></call></expr>;</throw>
				}</block></else></if>
										
					
				
			}</block>
			
			<catch>catch<parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list><block>{
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				
			}</block></catch></try>
			
		}</block>
		<finally>finally<block>{
		}</block></finally></try>
		
		<return>return <expr><name>taCourses</name></expr>;</return>
	}</block></function>

	<comment type="block">/*
	 * Returns all the courses that the TA is currently enrolled in
	 */</comment>
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>ArrayList</name><argument_list type="template">&lt;<argument><name>CourseOffered</name></argument>&gt;</argument_list></name></type> <name>getAllCurrentCoursesTakenBy</name><parameter_list>(<param><decl><type><name>TA</name></type> <name>ta</name></decl></param>)</parameter_list><block>{
		<if>if<condition>(<expr><name>ta</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<throw>throw <expr><operator>new</operator> <call><name>NullPointerException</name><argument_list>()</argument_list></call></expr>;</throw>
		}</block></then></if>
		
		<decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="template">&lt;<argument><name>CourseOffered</name></argument>&gt;</argument_list></name></type> <name>studentCourses</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="template">&lt;<argument><name>CourseOffered</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<try>try<block>{
			<decl_stmt><decl><type><name>Connection</name></type> <name>conn</name> <init>= <expr><call><name><name>Database</name><operator>.</operator><name>getConnection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<try>try<block>{
				<if>if<condition>(<expr><name>conn</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then><block>{
					
					<decl_stmt><decl><type><name>String</name></type> <name>SemesterSelect</name> <init>= <expr><literal type="string">"Select *"</literal>
							<operator>+</operator> <literal type="string">" FROM studentenrollment"</literal>
							<operator>+</operator> <literal type="string">" WHERE UIN= ?"</literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>PreparedStatement</name></type> <name>statement</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>prepareStatement</name></name><argument_list>(<argument><expr><name>SemesterSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name>statement</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>ta</name><operator>.</operator><name>getUIN</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name>ResultSet</name></type> <name>rs</name> <init>= <expr><call><name><name>statement</name><operator>.</operator><name>executeQuery</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					
					<while>while<condition>(<expr><call><name><name>rs</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{
						<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"offerID"</literal></expr></argument>, <argument><expr><literal type="string">"studentenrollment"</literal></expr></argument>, <argument><expr><literal type="string">"OfferID"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name>int</name></type> <name>offerID</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"OfferID"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name>CourseOffered</name></type> <name>course</name> <init>= <expr><operator>new</operator> <call><name>CourseOffered</name><argument_list>(<argument><expr><name>offerID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name>studentCourses</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>course</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></while>
					
				}</block></then></if>
					
			}</block>
			
			<catch>catch<parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list><block>{
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				
			}</block></catch></try>
					
		}</block>
		
		<finally>finally<block>{
		}</block></finally></try>
		
		<return>return <expr><name>studentCourses</name></expr>;</return>
	}</block></function>
	
	
	<comment type="block">/*
	 * Returns if the course offering is full or not 
	 */</comment>
	<function><type><specifier>public</specifier> <name>boolean</name></type> <name>isCourseFull</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>CourseOfferingDoesNotExistException</name></expr></argument></throws><block>{
		<return>return <expr><operator>(</operator><operator>(</operator><call><name><name>this</name><operator>.</operator><name>getTotalCapacity</name></name><argument_list>()</argument_list></call> <operator>-</operator> <call><name><name>this</name><operator>.</operator><name>getCurrentlyFilled</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>&lt;=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
	}</block></function>
	
	<comment type="block">/*
	 * Adds one to the seats filled for the course offering
	 * Called after a student registers for a course
	 */</comment>
	<function><type><specifier>public</specifier> <name>boolean</name></type> <name>addOneSeatFilledToCourseOffered</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>CourseOfferingNotCurrentException</name></expr></argument></throws><block>{
		<decl_stmt><decl><type><name>boolean</name></type> <name>success</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>currentlyFilled</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><operator>!</operator><call><name>checkIfCurrent</name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
			<throw>throw <expr><operator>new</operator> <call><name>CourseOfferingNotCurrentException</name><argument_list>(<argument><expr><literal type="string">"This course offering is not current"</literal></expr></argument>)</argument_list></call></expr>;</throw>
		}</block></then></if>
		
		<try>try<block>{
			<decl_stmt><decl><type><name>Connection</name></type> <name>conn</name> <init>= <expr><call><name><name>Database</name><operator>.</operator><name>getConnection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<try>try<block>{
				
				<if>if<condition>(<expr><call><name>isCourseFull</name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
					<return>return <expr><literal type="boolean">false</literal></expr>;</return>
				}</block></then></if>
				
				<if>if<condition>(<expr><name>conn</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then><block>{
					<decl_stmt><decl><type><name>String</name></type> <name>courseOfferSelect</name> <init>= <expr><literal type="string">"Select *"</literal>
							<operator>+</operator> <literal type="string">" FROM coursesoffered"</literal>
							<operator>+</operator> <literal type="string">" WHERE OfferID= ?"</literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>PreparedStatement</name></type> <name>statement</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>prepareStatement</name></name><argument_list>(<argument><expr><name>courseOfferSelect</name></expr></argument>, <argument><expr><name><name>ResultSet</name><operator>.</operator><name>CONCUR_UPDATABLE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name>statement</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>this</name><operator>.</operator><name>getOfferID</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name>ResultSet</name></type> <name>rs</name> <init>= <expr><call><name><name>statement</name><operator>.</operator><name>executeQuery</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					
					<if>if<condition>(<expr><call><name><name>rs</name><operator>.</operator><name>first</name></name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
						<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"seatsFilled"</literal></expr></argument>, <argument><expr><literal type="string">"coursesoffered"</literal></expr></argument>, <argument><expr><literal type="string">"SeatsFilled"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name>int</name></type> <name>seatsFilled</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"SeatsFilled"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><name>currentlyFilled</name> <operator>=</operator> <name>seatsFilled</name></expr>;</expr_stmt>
						<expr_stmt><expr><name>currentlyFilled</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
					}</block></then>
					
					<else>else<block>{
						<throw>throw <expr><operator>new</operator> <call><name>CourseOfferingDoesNotExistException</name><argument_list>()</argument_list></call></expr>;</throw>
					}</block></else></if>
					
					<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"currentlyFilled"</literal></expr></argument>, <argument><expr><literal type="string">"coursesoffered"</literal></expr></argument>, <argument><expr><literal type="string">"SeatsFilled"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"offerID"</literal></expr></argument>, <argument><expr><literal type="string">"coursesoffered"</literal></expr></argument>, <argument><expr><literal type="string">"OfferID"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					
					<decl_stmt><decl><type><name>String</name></type> <name>updateStatement</name> <init>= <expr><literal type="string">"UPDATE coursesoffered "</literal>
							<operator>+</operator> <literal type="string">"SET SeatsFilled= ? "</literal>
							<operator>+</operator> <literal type="string">"WHERE OfferID= ? ;"</literal></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><name>statement</name> <operator>=</operator> <call><name><name>conn</name><operator>.</operator><name>prepareStatement</name></name><argument_list>(<argument><expr><name>updateStatement</name></expr></argument>, <argument><expr><name><name>ResultSet</name><operator>.</operator><name>CONCUR_UPDATABLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>statement</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>currentlyFilled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name>int</name></type> <name>offerID</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>getOfferID</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name>statement</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>offerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>statement</name><operator>.</operator><name>executeUpdate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>Database</name><operator>.</operator><name>commitTransaction</name></name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>success</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
										
				}</block></then></if>					
				
			}</block>
			
			<catch>catch<parameter_list>(<param><decl><type><name>SQLException</name></type> <name>e</name></decl></param>)</parameter_list><block>{
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Error in adding one seat"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>	
			}</block></catch> <catch>catch <parameter_list>(<param><decl><type><name>CourseOfferingDoesNotExistException</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
				<comment type="line">// TODO Auto-generated catch block</comment>
				<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
			
			
		}</block>
		
		
		<finally>finally<block>{
		}</block></finally></try>
		
		<return>return <expr><name>success</name></expr>;</return>
	}</block></function>
	
	<comment type="block">/*
	 * Subtracts one seat from the course offering after the student unregisters
	 */</comment>
	<function><type><specifier>public</specifier> <name>boolean</name></type> <name>removeOneSeatFromCourseOffered</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name><name>CourseOffered</name><operator>.</operator><name>CourseOfferingDoesNotExistException</name></name></expr></argument></throws><block>{
		<decl_stmt><decl><type><name>boolean</name></type> <name>seatRemoved</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>offerID</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>getOfferID</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<try>try<block>{
			<decl_stmt><decl><type><name>Connection</name></type> <name>conn</name> <init>= <expr><call><name><name>Database</name><operator>.</operator><name>getConnection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<try>try<block>{
				<if>if<condition>(<expr><name>conn</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then><block>{
					<decl_stmt><decl><type><name>String</name></type> <name>SQLcoursesOfferedSelect</name> <init>= <expr><literal type="string">"Select * FROM coursesoffered WHERE OfferID= ?;"</literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>PreparedStatement</name></type> <name>statement</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>prepareStatement</name></name><argument_list>(<argument><expr><name>SQLcoursesOfferedSelect</name></expr></argument>,<argument><expr><name><name>ResultSet</name><operator>.</operator><name>TYPE_FORWARD_ONLY</name></name></expr></argument>, <argument><expr><name><name>ResultSet</name><operator>.</operator><name>CONCUR_UPDATABLE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name>statement</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>offerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name>ResultSet</name></type> <name>rs</name> <init>= <expr><call><name><name>statement</name><operator>.</operator><name>executeQuery</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					<if>if<condition>(<expr><call><name><name>rs</name><operator>.</operator><name>first</name></name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
						<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"currentlyFilled"</literal></expr></argument>, <argument><expr><literal type="string">"coursesoffered"</literal></expr></argument>, <argument><expr><literal type="string">"SeatsFilled"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name>int</name></type> <name>currentlyFilled</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"SeatsFilled"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<if>if<condition>(<expr><name>currentlyFilled</name><operator>&lt;=</operator><literal type="number">0</literal></expr>)</condition><then>
							<block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
						<expr_stmt><expr><name>currentlyFilled</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name>rs</name><operator>.</operator><name>updateInt</name></name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>currentlyFilled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name>Database</name><operator>.</operator><name>commitTransaction</name></name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name>seatRemoved</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
					}</block></then>
					<else>else<block>{
						<throw>throw <expr><operator>new</operator> <call><name><name>CourseOffered</name><operator>.</operator><name>CourseOfferingDoesNotExistException</name></name><argument_list>()</argument_list></call></expr>;</throw>
					}</block></else></if>
					
				}</block></then></if>						
					
			}</block> <catch>catch<parameter_list>(<param><decl><type><name>SQLException</name></type> <name>e</name></decl></param>)</parameter_list><block>{
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Error addind course offering"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>Database</name><operator>.</operator><name>rollBackTransaction</name></name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
		}</block> <catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
			
		<return>return <expr><name>seatRemoved</name></expr> ;</return>
	}</block></function>
	
	<comment type="block">/*
	 * Checks if the current course offering is scheduled or not
	 * Basically it acts as a safety check for some of the functions
	 */</comment>
	<function><type><specifier>public</specifier> <name>boolean</name></type> <name>checkIfScheduled</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>CourseOfferingNotCurrentException</name></expr></argument></throws><block>{
		<if>if<condition>(<expr><operator>!</operator><call><name>checkIfCurrent</name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
			<return>return <expr><literal type="boolean">false</literal></expr>;</return>
		}</block></then></if>
		
		<decl_stmt><decl><type><name>boolean</name></type> <name>doesExist</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
		
		<try>try<block>{
			<decl_stmt><decl><type><name>Connection</name></type> <name>conn</name> <init>= <expr><call><name><name>Database</name><operator>.</operator><name>getConnection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<try>try<block>{
				<if>if<condition>(<expr><name>conn</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then><block>{
					
					<comment type="line">//Retrieve the current semester ID</comment>
					<decl_stmt><decl><type><name>String</name></type> <name>scheduleSelect</name> <init>= <expr><literal type="string">"Select *"</literal>
							<operator>+</operator> <literal type="string">" FROM courseschedule"</literal>
							<operator>+</operator> <literal type="string">" WHERE OfferID= ?"</literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>PreparedStatement</name></type> <name>statement</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>prepareStatement</name></name><argument_list>(<argument><expr><name>scheduleSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name>statement</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>this</name><operator>.</operator><name>getOfferID</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name>ResultSet</name></type> <name>rs</name> <init>= <expr><call><name><name>statement</name><operator>.</operator><name>executeQuery</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					
					<if>if<condition>(<expr><call><name><name>rs</name><operator>.</operator><name>first</name></name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
						<expr_stmt><expr><name>doesExist</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>	
					}</block></then></if>							
					
				}</block></then></if>
			}</block>
			
			<catch>catch<parameter_list>(<param><decl><type><name>SQLException</name></type> <name>e</name></decl></param>)</parameter_list><block>{
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Error in SQL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
						
		}</block>
		
		<finally>finally<block>{
		}</block></finally></try>
		
		<return>return <expr><name>doesExist</name></expr>;</return>
	}</block></function>
	
	<comment type="block">/*
	 * Checks of the offer id exists in the database 
	 */</comment>
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>checkIfExists</name><parameter_list>(<param><decl><type><name>int</name></type> <name>offerID</name></decl></param>)</parameter_list><block>{
		<decl_stmt><decl><type><name>boolean</name></type> <name>doesExist</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
		
		<try>try<block>{
			<decl_stmt><decl><type><name>Connection</name></type> <name>conn</name> <init>= <expr><call><name><name>Database</name><operator>.</operator><name>getConnection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<try>try<block>{
				<if>if<condition>(<expr><name>conn</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then><block>{
					
					<comment type="line">//Retrieve the current semester ID</comment>
					<decl_stmt><decl><type><name>String</name></type> <name>scheduleSelect</name> <init>= <expr><literal type="string">"Select *"</literal>
							<operator>+</operator> <literal type="string">" FROM coursesoffered"</literal>
							<operator>+</operator> <literal type="string">" WHERE OfferID= ?"</literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>PreparedStatement</name></type> <name>statement</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>prepareStatement</name></name><argument_list>(<argument><expr><name>scheduleSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name>statement</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>offerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name>ResultSet</name></type> <name>rs</name> <init>= <expr><call><name><name>statement</name><operator>.</operator><name>executeQuery</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					
					<if>if<condition>(<expr><call><name><name>rs</name><operator>.</operator><name>first</name></name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
						<expr_stmt><expr><name>doesExist</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>	
					}</block></then></if>							
					
				}</block></then></if>
			}</block>
			
			<catch>catch<parameter_list>(<param><decl><type><name>SQLException</name></type> <name>e</name></decl></param>)</parameter_list><block>{
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Error in SQL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
						
		}</block>
		
		<finally>finally<block>{
		}</block></finally></try>
		
		<return>return <expr><name>doesExist</name></expr>;</return>
	}</block></function>
	
	<comment type="block">/*
	 * Returns the semester id of teh current on going semester
	 */</comment>
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getCurrentSemesterID</name><parameter_list>()</parameter_list><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>current</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<try>try<block>{
			<decl_stmt><decl><type><name>Connection</name></type> <name>conn</name> <init>= <expr><call><name><name>Database</name><operator>.</operator><name>getConnection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<try>try<block>{
				<if>if<condition>(<expr><name>conn</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then><block>{
					
					<comment type="line">//Retrieve the current semester ID</comment>
					<decl_stmt><decl><type><name>String</name></type> <name>semSelect</name> <init>= <expr><literal type="string">"Select *"</literal>
							<operator>+</operator> <literal type="string">" FROM semester"</literal>
							<operator>+</operator> <literal type="string">" WHERE isCurrent= ?"</literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>PreparedStatement</name></type> <name>statement</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>prepareStatement</name></name><argument_list>(<argument><expr><name>semSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name>statement</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name>ResultSet</name></type> <name>rs</name> <init>= <expr><call><name><name>statement</name><operator>.</operator><name>executeQuery</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					
					<if>if<condition>(<expr><call><name><name>rs</name><operator>.</operator><name>first</name></name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
						<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"current"</literal></expr></argument>, <argument><expr><literal type="string">"semester"</literal></expr></argument>, <argument><expr><literal type="string">"SemesterID"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name>current</name> <operator>=</operator> <call><name><name>rs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"SemesterID"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if>							
					
				}</block></then></if>
			}</block>
			
			<catch>catch<parameter_list>(<param><decl><type><name>SQLException</name></type> <name>e</name></decl></param>)</parameter_list><block>{
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Error in SQL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
			
			<return>return <expr><name>current</name></expr>;</return>
						
		}</block>
		
		<finally>finally<block>{
		}</block></finally></try>
	}</block></function>
	
	<comment type="block">/*
	 * Checks of the course offering is current or if it was a previously offered course
	 */</comment>
	<function><type><specifier>public</specifier> <name>boolean</name></type> <name>checkIfCurrent</name><parameter_list>()</parameter_list><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>semID</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>getSemesterID</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<return>return <expr><operator>(</operator><name>semID</name> <operator>==</operator> <call><name>getCurrentSemesterID</name><argument_list>()</argument_list></call><operator>)</operator></expr>;</return>
	}</block></function>
	
	<comment type="block">/*
	 * Checks if the course is register-able by the student passed
	 */</comment>
	<function><type><specifier>public</specifier> <name>boolean</name></type> <name>isCourseRegistrableBy</name><parameter_list>(<param><decl><type><name>Student</name></type> <name>student</name></decl></param>)</parameter_list><block>{
		
		<if>if<condition>(<expr><call><name><name>WaitList</name><operator>.</operator><name>isStudentEmailed</name></name><argument_list>(<argument><expr><name>student</name></expr></argument>, <argument><expr><name>offerID</name></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
			<return>return <expr><literal type="boolean">true</literal></expr>;</return>
		}</block></then></if>
		
		<decl_stmt><decl><type><name>int</name></type> <name>availableSeats</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>getTotalCapacity</name></name><argument_list>()</argument_list></call> <operator>-</operator> <call><name><name>this</name><operator>.</operator><name>getCurrentlyFilled</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><operator>(</operator><name>availableSeats</name> <operator>-</operator> <call><name><name>WaitList</name><operator>.</operator><name>getStudentsOnEmailList</name></name><argument_list>(<argument><expr><name>offerID</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>)</operator> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"----------------------------------Difference is:"</literal><operator>+</operator><operator>(</operator><call><name><name>this</name><operator>.</operator><name>getCurrentlyFilled</name></name><argument_list>()</argument_list></call> <operator>-</operator> <call><name><name>WaitList</name><operator>.</operator><name>getStudentsOnEmailList</name></name><argument_list>(<argument><expr><name>offerID</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="boolean">false</literal></expr>;</return>
		}</block></then></if>
		
		<comment type="line">//check if the student is already registered</comment>
		<if>if<condition>(<expr><call><name><name>WaitList</name><operator>.</operator><name>isStudentRegistered</name></name><argument_list>(<argument><expr><name>student</name></expr></argument>, <argument><expr><name>offerID</name></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
			<return>return <expr><literal type="boolean">false</literal></expr>;</return>
		}</block></then></if>
		
		<comment type="line">//check if the course is full</comment>
		<try>try <block>{
			<if>if<condition>(<expr><call><name>isCourseFull</name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
				<return>return <expr><literal type="boolean">false</literal></expr>;</return>
			}</block></then></if>
		}</block> <catch>catch <parameter_list>(<param><decl><type><name>CourseOfferingDoesNotExistException</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
			<comment type="line">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		
		
		<comment type="line">//check if the student is on the waitList</comment>
		<if>if<condition>(<expr><call><name><name>WaitList</name><operator>.</operator><name>isStudentOnWaitList</name></name><argument_list>(<argument><expr><name>student</name></expr></argument>, <argument><expr><name>offerID</name></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
			<return>return <expr><literal type="boolean">false</literal></expr>;</return>
		}</block></then></if>
		
		<if>if<condition>(<expr><operator>!</operator><call><name><name>WaitList</name><operator>.</operator><name>isWaitListEmpty</name></name><argument_list>(<argument><expr><name>offerID</name></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
			<return>return <expr><literal type="boolean">false</literal></expr>;</return>
		}</block></then></if>
				
		<return>return <expr><literal type="boolean">true</literal></expr>;</return>
		
	}</block></function>
	
	<comment type="block">/*
	 * Sends all the course files to the student who is passed as a parameter
	 */</comment>
	<function><type><specifier>public</specifier> <name>boolean</name></type> <name>sendCourseFilesToStudent</name><parameter_list>(<param><decl><type><name>Student</name></type> <name>s</name></decl></param>)</parameter_list><block>{
		<decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="template">&lt;<argument><name>File</name></argument>&gt;</argument_list></name></type> <name>file</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>getFiles</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name>String</name> <index>[]</index></type> <name>attachments</name> <init>= <expr><operator>new</operator> <name><name>String</name><index>[<expr><call><name><name>file</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name><name>file</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
			<decl_stmt><decl><type><name>File</name></type> <name>f</name> <init>= <expr><call><name><name>file</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>String</name></type> <name>userDir</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"user.dir"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name><name>attachments</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>userDir</name><operator>+</operator><call><name><name>f</name><operator>.</operator><name>getFileLocation</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="string">"\\"</literal><operator>+</operator><call><name><name>f</name><operator>.</operator><name>getFileName</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></for>
		
		<decl_stmt><decl><type><name>Email</name></type> <name>email</name> <init>= <expr><call><name><name>Email</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><literal type="string">"umas.uic@gmail.com"</literal></expr></argument>, <argument><expr><literal type="string">"cs597project"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>boolean</name></type> <name>isSent</name> <init>= <expr><call><name><name>email</name><operator>.</operator><name>sendEmailWithAttachments</name></name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>getUserName</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="string">"@umasuic.edu"</literal></expr></argument>, <argument><expr><literal type="string">"Course files for course "</literal><operator>+</operator><call><name><name>this</name><operator>.</operator><name>getCourseName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal>
				<operator>+</operator> <literal type="string">"Find attachments"</literal></expr></argument>, <argument><expr><name>attachments</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<return>return <expr><name>isSent</name></expr>;</return>
	}</block></function>
	
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>ArrayList</name><argument_list type="template">&lt;<argument><name>TA</name></argument>&gt;</argument_list></name></type> <name>getTAsForCourse</name><parameter_list>(<param><decl><type><name>CourseOffered</name></type> <name>co</name></decl></param>)</parameter_list><block>{
		<decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="template">&lt;<argument><name>TA</name></argument>&gt;</argument_list></name></type> <name>tas</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="template">&lt;<argument><name>TA</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>co</name><operator>==</operator><literal type="null">null</literal></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><name>tas</name></expr>;</return></block></then></if>
		
		<try>try<block>{
			<decl_stmt><decl><type><name>Connection</name></type> <name>conn</name> <init>= <expr><call><name><name>Database</name><operator>.</operator><name>getConnection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<try>try<block>{
				<if>if<condition>(<expr><name>conn</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then><block>{
					<decl_stmt><decl><type><name>String</name></type> <name>SQLSelect</name> <init>= <expr><literal type="string">"Select *"</literal>
							<operator>+</operator> <literal type="string">" FROM teachingassistant as t"</literal>
							<operator>+</operator> <literal type="string">" WHERE t.OfferID = ?"</literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>PreparedStatement</name></type> <name>statement</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>prepareStatement</name></name><argument_list>(<argument><expr><name>SQLSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name>statement</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>co</name><operator>.</operator><name>getOfferID</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name>ResultSet</name></type> <name>rs</name> <init>= <expr><call><name><name>statement</name><operator>.</operator><name>executeQuery</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					
					<while>while<condition>(<expr><call><name><name>rs</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{
						<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"taID"</literal></expr></argument>, <argument><expr><literal type="string">"teachingassistant"</literal></expr></argument>, <argument><expr><literal type="string">"TaUIN"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name>int</name></type> <name>taID</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"TaUIN"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name>TA</name></type> <name>ta</name> <init>= <expr><operator>new</operator> <call><name>TA</name><argument_list>(<argument><expr><name>taID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name>tas</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></while>					
				}</block></then>
					
					
				<else>else<block>{
					<throw>throw <expr><operator>new</operator> <call><name>IllegalAccessException</name><argument_list>(<argument><expr><literal type="string">"TA does not exits - CoursesOffered.java"</literal></expr></argument>)</argument_list></call></expr>;</throw>
				}</block></else></if>
										
					
				
			}</block>
			
			<catch>catch<parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list><block>{
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				
			}</block></catch></try>
			
		}</block>
		<finally>finally<block>{
		}</block></finally></try>
		
		<return>return <expr><name>tas</name></expr>;</return>
		
	}</block></function>
	
	<comment type="block">/*
	 * CourseDoesnotExist Exception
	 */</comment>
	<class><specifier>public</specifier> <specifier>static</specifier> class <name>CourseOfferingDoesNotExistException</name> <super><extends>extends <name>Exception</name></extends></super><block>{
		<decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> <init>= <expr><literal type="number">1L</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>message</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
		 
	    <constructor><specifier>public</specifier> <name>CourseOfferingDoesNotExistException</name><parameter_list>()</parameter_list> <block>{
	        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>message</name></name> <operator>=</operator> <literal type="string">"Course does not exist"</literal></expr>;</expr_stmt>
	    }</block></constructor>
	    
	    <constructor><specifier>public</specifier> <name>CourseOfferingDoesNotExistException</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>message</name></decl></param>)</parameter_list> <block>{
	        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>message</name></name> <operator>=</operator> <name>message</name></expr>;</expr_stmt>
	    }</block></constructor>
	 
	    <function><type><annotation>@<name>Override</name></annotation>
	    <specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
	        <return>return <expr><name>message</name></expr>;</return>
	    }</block></function>
	 
	    <function><type><annotation>@<name>Override</name></annotation>
	    <specifier>public</specifier> <name>String</name></type> <name>getMessage</name><parameter_list>()</parameter_list> <block>{
	        <return>return <expr><name>message</name></expr>;</return>
	    }</block></function>
	}</block></class>

	<comment type="block">/*
	 * CourseOfferingAlreadyExistsException
	 */</comment>
	<class><specifier>public</specifier> <specifier>static</specifier> class <name>CourseOfferingAlreadyExistsException</name> <super><extends>extends <name>Exception</name></extends></super><block>{
		<decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> <init>= <expr><literal type="number">1L</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>message</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
		 
	    <constructor><specifier>public</specifier> <name>CourseOfferingAlreadyExistsException</name><parameter_list>()</parameter_list> <block>{
	        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>message</name></name> <operator>=</operator> <literal type="string">"Course offering already exists with the same parameters"</literal></expr>;</expr_stmt>
	    }</block></constructor>
	    
	    <constructor><specifier>public</specifier> <name>CourseOfferingAlreadyExistsException</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>message</name></decl></param>)</parameter_list> <block>{
	        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>message</name></name> <operator>=</operator> <name>message</name></expr>;</expr_stmt>
	    }</block></constructor>
	 
	    <function><type><annotation>@<name>Override</name></annotation>
	    <specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
	        <return>return <expr><name>message</name></expr>;</return>
	    }</block></function>
	 
	    <function><type><annotation>@<name>Override</name></annotation>
	    <specifier>public</specifier> <name>String</name></type> <name>getMessage</name><parameter_list>()</parameter_list> <block>{
	        <return>return <expr><name>message</name></expr>;</return>
	    }</block></function>
	}</block></class>

	<comment type="block">/*
	 * CourseOfferingNotCurrent Exception
	 */</comment>
	<class><specifier>public</specifier> <specifier>static</specifier> class <name>CourseOfferingNotCurrentException</name> <super><extends>extends <name>Exception</name></extends></super><block>{
		<decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> <init>= <expr><literal type="number">1L</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>message</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
		 
	    <constructor><specifier>public</specifier> <name>CourseOfferingNotCurrentException</name><parameter_list>()</parameter_list> <block>{
	        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>message</name></name> <operator>=</operator> <literal type="string">"Course not current"</literal></expr>;</expr_stmt>
	    }</block></constructor>
	    
	    <constructor><specifier>public</specifier> <name>CourseOfferingNotCurrentException</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>message</name></decl></param>)</parameter_list> <block>{
	        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>message</name></name> <operator>=</operator> <name>message</name></expr>;</expr_stmt>
	    }</block></constructor>
	 
	    <function><type><annotation>@<name>Override</name></annotation>
	    <specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
	        <return>return <expr><name>message</name></expr>;</return>
	    }</block></function>
	 
	    <function><type><annotation>@<name>Override</name></annotation>
	    <specifier>public</specifier> <name>String</name></type> <name>getMessage</name><parameter_list>()</parameter_list> <block>{
	        <return>return <expr><name>message</name></expr>;</return>
	    }</block></function>
	}</block></class>

	<comment type="block">/*
	 * CourseOfferingNotSchedulable Exception
	 */</comment>
	<class><specifier>public</specifier> <specifier>static</specifier> class <name>CourseOfferingNotSchedulable</name> <super><extends>extends <name>Exception</name></extends></super><block>{
			<decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> <init>= <expr><literal type="number">1L</literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>message</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
			 
		    <constructor><specifier>public</specifier> <name>CourseOfferingNotSchedulable</name><parameter_list>()</parameter_list> <block>{
		        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>message</name></name> <operator>=</operator> <literal type="string">"Course offering not added as it is not schedulable"</literal></expr>;</expr_stmt>
		    }</block></constructor>
		    
		    <constructor><specifier>public</specifier> <name>CourseOfferingNotSchedulable</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>message</name></decl></param>)</parameter_list> <block>{
		        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>message</name></name> <operator>=</operator> <name>message</name></expr>;</expr_stmt>
		    }</block></constructor>
		 
		    <function><type><annotation>@<name>Override</name></annotation>
		    <specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
		        <return>return <expr><name>message</name></expr>;</return>
		    }</block></function>
		 
		    <function><type><annotation>@<name>Override</name></annotation>
		    <specifier>public</specifier> <name>String</name></type> <name>getMessage</name><parameter_list>()</parameter_list> <block>{
		        <return>return <expr><name>message</name></expr>;</return>
		    }</block></function>
		}</block></class>

	<comment type="block">/* (non-Javadoc)
	 * @see java.lang.Object#equals(java.lang.Object)
	 */</comment>
	<function><type><annotation>@<name>Override</name></annotation>
	<specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>arg0</name></decl></param>)</parameter_list> <block>{
		<if>if<condition>(<expr><name>arg0</name> <operator>instanceof</operator> <name>CourseOffered</name></expr>)</condition><then><block>{
			<decl_stmt><decl><type><name>CourseOffered</name></type> <name>temp</name> <init>= <expr><operator>(</operator><name>CourseOffered</name><operator>)</operator><name>arg0</name></expr></init></decl>;</decl_stmt>
			<return>return<expr><operator>(</operator><call><name><name>temp</name><operator>.</operator><name>getOfferID</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>this</name><operator>.</operator><name>getOfferID</name></name><argument_list>()</argument_list></call><operator>)</operator></expr>;</return>
		}</block></then>
		
		<else>else <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></else></if>
	}</block></function>


	<comment type="block">/* (non-Javadoc)
	 * @see java.lang.Object#hashCode()
	 */</comment>
	<function><type><annotation>@<name>Override</name></annotation>
	<specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><operator>(</operator><name><name>this</name><operator>.</operator><name>offerID</name></name><operator>*</operator><literal type="number">31</literal><operator>)</operator></expr>;</return>
	}</block></function>

}</block></class>
</unit>
