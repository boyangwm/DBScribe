<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Boyang\Desktop\ASE15\subjects\UMAS\src\com\umas\code\Database.java"><package>package <name><name>com</name><operator>.</operator><name>umas</name><operator>.</operator><name>code</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>Connection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>DriverManager</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>SQLException</name></name>;</import>

<class><specifier>public</specifier> class <name>Database</name> <block>{

	<decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>Connection</name></type> <name>conn</name></decl>;</decl_stmt>
		
	<decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>url</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>dbName</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>driver</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>userName</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>password</name></decl>;</decl_stmt>
	
	<static>static<block>{
		<expr_stmt><expr><name>conn</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>url</name> <operator>=</operator> <literal type="string">"jdbc:mysql://localhost:3306/"</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>dbName</name> <operator>=</operator> <literal type="string">"university"</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>driver</name> <operator>=</operator> <literal type="string">"com.mysql.jdbc.Driver"</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>userName</name> <operator>=</operator> <literal type="string">"root"</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>password</name> <operator>=</operator> <literal type="string">"boyang"</literal></expr>;</expr_stmt>
	}</block></static>
	
<comment type="line">//Constructor added	</comment>
<comment type="line">//	public Database(){</comment>
<comment type="line">//		conn = null;</comment>
<comment type="line">//		url = "jdbc:mysql://localhost:3306/";</comment>
<comment type="line">//		dbName = "university";</comment>
<comment type="line">//		driver = "com.mysql.jdbc.Driver";</comment>
<comment type="line">//		userName = "root";</comment>
<comment type="line">//		password = "engineering";</comment>
<comment type="line">//	}</comment>
	
	<comment type="line">// Call this function as " Connection conn = Database.getConnection(); " </comment>
	<comment type="line">// to connect to the database</comment>
<comment type="line">//	public synchronized Connection getConnection(){</comment>
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>Connection</name></type> <name>getConnection</name><parameter_list>()</parameter_list><block>{
		<try>try <block>{
			<expr_stmt><expr><call><name><name>Class</name><operator>.</operator><name>forName</name></name><argument_list>(<argument><expr><name>driver</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>newInstance</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block> <catch>catch <parameter_list>(<param><decl><type><name>InstantiationException</name></type> <name>e1</name></decl></param>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>e1</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></catch> <catch>catch <parameter_list>(<param><decl><type><name>IllegalAccessException</name></type> <name>e1</name></decl></param>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>e1</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></catch> <catch>catch <parameter_list>(<param><decl><type><name>ClassNotFoundException</name></type> <name>e1</name></decl></param>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>e1</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		
		<try>try<block>{
			<if>if<condition>(<expr><name>conn</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then><block>{
				<expr_stmt><expr><name>conn</name> <operator>=</operator> <call><name><name>DriverManager</name><operator>.</operator><name>getConnection</name></name><argument_list>(<argument><expr><name>url</name> <operator>+</operator> <name>dbName</name></expr></argument>, <argument><expr><name>userName</name></expr></argument>, <argument><expr><name>password</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>conn</name><operator>.</operator><name>setAutoCommit</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	            <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Connected to the database"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block> <catch>catch <parameter_list>(<param><decl><type><name>SQLException</name></type> <name>e</name></decl></param>)</parameter_list><block>{
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
			
		<return>return <expr><name>conn</name></expr>;</return>
	}</block></function>
	
	<comment type="line">// Call this function to commit when transaction is successful</comment>
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>commitTransaction</name><parameter_list>(<param><decl><type><name>Connection</name></type> <name>conn</name></decl></param>)</parameter_list><block>{
		<try>try <block>{
			<if>if <condition>(<expr><name>conn</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
		    	<expr_stmt><expr><call><name><name>conn</name><operator>.</operator><name>commit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Transaction Committed!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    	}</block></then></if>
	    }</block> <catch>catch <parameter_list>(<param><decl><type><name>SQLException</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
	    	<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	    }</block></catch></try>
	}</block></function>
	
	<comment type="line">// Call this function to rollback when transaction is unsuccessful</comment>
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>rollBackTransaction</name><parameter_list>(<param><decl><type><name>Connection</name></type> <name>conn</name></decl></param>)</parameter_list> <block>{
		<try>try <block>{
			<if>if <condition>(<expr><name>conn</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name><name>conn</name><operator>.</operator><name>rollback</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	            <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Transaction Rolledback!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        }</block></then></if>
	    }</block> <catch>catch <parameter_list>(<param><decl><type><name>SQLException</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
	    	<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	    }</block></catch></try>
	}</block></function>
		
	
	<comment type="line">//Call this function to close the Database Connection</comment>
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>closeConnection</name><parameter_list>(<param><decl><type><name>Connection</name></type> <name>conn</name></decl></param>)</parameter_list> <block>{
		<try>try <block>{
			<if>if <condition>(<expr><name>conn</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name><name>conn</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Closed the connection to database!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block> <catch>catch <parameter_list>(<param><decl><type><name>SQLException</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
    }</block></function>	
	
}</block></class>
</unit>
