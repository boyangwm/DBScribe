<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Boyang\Desktop\ASE15\subjects\UMAS\src\com\umas\code\JobApplication.java"><package>package <name><name>com</name><operator>.</operator><name>umas</name><operator>.</operator><name>code</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>Connection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>PreparedStatement</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>ResultSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>SQLException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedHashMap</name></name>;</import>

<comment type="block" format="javadoc">/**
* @author Akshay
* 
*/</comment>

<comment type="block" format="javadoc">/*************** JOBAPPLICATION.JAVA CLASS WAS WRITTEN BY AKSHAY THIRKATEH ********************************/</comment>

<class><specifier>public</specifier> class <name>JobApplication</name> <block>{

	<comment type="line">// class variables mainly uses by the job application class</comment>
	
	<decl_stmt><decl><type><specifier>protected</specifier> <name>int</name></type> <name>ApplicationID</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>protected</specifier> <name>int</name></type> <name>UIN</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>protected</specifier> <name>double</name></type> <name>workEx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>protected</specifier> <name>boolean</name></type> <name>skill1</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>protected</specifier> <name>boolean</name></type> <name>skill2</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>protected</specifier> <name>boolean</name></type> <name>skill3</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>protected</specifier> <name>boolean</name></type> <name>skill4</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>protected</specifier> <name>boolean</name></type> <name>skill5</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>protected</specifier> <name>float</name></type> <name>scaledScore</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>String</name></type> <name>SQLPeopleSelect</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>String</name></type> <name>SQLPeopleReSelect</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

	<comment type="block">/*-----------------------------------GETTERS AND SETTERS START-----------------------------------*/</comment>
	<function><type><specifier>public</specifier> <name>int</name></type> <name>getApplicationID</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>ApplicationID</name></expr>;</return>
	}</block></function>

	<function><type><specifier>public</specifier> <name>void</name></type> <name>setApplicationID</name><parameter_list>(<param><decl><type><name>int</name></type> <name>applicationID</name></decl></param>)</parameter_list> <block>{
		<expr_stmt><expr><name>ApplicationID</name> <operator>=</operator> <name>applicationID</name></expr>;</expr_stmt>
	}</block></function>

	<function><type><specifier>public</specifier> <name>int</name></type> <name>getUIN</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>UIN</name></expr>;</return>
	}</block></function>

	<function><type><specifier>public</specifier> <name>void</name></type> <name>setUIN</name><parameter_list>(<param><decl><type><name>int</name></type> <name>uIN</name></decl></param>)</parameter_list> <block>{
		<expr_stmt><expr><name>UIN</name> <operator>=</operator> <name>uIN</name></expr>;</expr_stmt>
	}</block></function>

	<function><type><specifier>public</specifier> <name>double</name></type> <name>getWorkEx</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>workEx</name></expr>;</return>
	}</block></function>

	<function><type><specifier>public</specifier> <name>void</name></type> <name>setWorkEx</name><parameter_list>(<param><decl><type><name>double</name></type> <name>workEx</name></decl></param>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>workEx</name></name> <operator>=</operator> <name>workEx</name></expr>;</expr_stmt>
	}</block></function>

	<function><type><specifier>public</specifier> <name>boolean</name></type> <name>isSkill1</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>skill1</name></expr>;</return>
	}</block></function>

	<function><type><specifier>public</specifier> <name>void</name></type> <name>setSkill1</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>skill1</name></decl></param>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>skill1</name></name> <operator>=</operator> <name>skill1</name></expr>;</expr_stmt>
	}</block></function>

	<function><type><specifier>public</specifier> <name>boolean</name></type> <name>isSkill2</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>skill2</name></expr>;</return>
	}</block></function>

	<function><type><specifier>public</specifier> <name>void</name></type> <name>setSkill2</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>skill2</name></decl></param>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>skill2</name></name> <operator>=</operator> <name>skill2</name></expr>;</expr_stmt>
	}</block></function>

	<function><type><specifier>public</specifier> <name>boolean</name></type> <name>isSkill3</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>skill3</name></expr>;</return>
	}</block></function>

	<function><type><specifier>public</specifier> <name>void</name></type> <name>setSkill3</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>skill3</name></decl></param>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>skill3</name></name> <operator>=</operator> <name>skill3</name></expr>;</expr_stmt>
	}</block></function>

	<function><type><specifier>public</specifier> <name>boolean</name></type> <name>isSkill4</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>skill4</name></expr>;</return>
	}</block></function>

	<function><type><specifier>public</specifier> <name>void</name></type> <name>setSkill4</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>skill4</name></decl></param>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>skill4</name></name> <operator>=</operator> <name>skill4</name></expr>;</expr_stmt>
	}</block></function>

	<function><type><specifier>public</specifier> <name>boolean</name></type> <name>isSkill5</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>skill5</name></expr>;</return>
	}</block></function>

	<function><type><specifier>public</specifier> <name>void</name></type> <name>setSkill5</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>skill5</name></decl></param>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>skill5</name></name> <operator>=</operator> <name>skill5</name></expr>;</expr_stmt>
	}</block></function>

	<function><type><specifier>public</specifier> <name>float</name></type> <name>getScaledScore</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>scaledScore</name></expr>;</return>
	}</block></function>

	<function><type><specifier>public</specifier> <name>void</name></type> <name>setScaledScore</name><parameter_list>(<param><decl><type><name>float</name></type> <name>scaledScore</name></decl></param>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>scaledScore</name></name> <operator>=</operator> <name>scaledScore</name></expr>;</expr_stmt>
	}</block></function>

	<function><type><specifier>public</specifier> <name>String</name></type> <name>getSQLPeopleSelect</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>SQLPeopleSelect</name></expr>;</return>
	}</block></function>

	<function><type><specifier>public</specifier> <name>void</name></type> <name>setSQLPeopleSelect</name><parameter_list>(<param><decl><type><name>String</name></type> <name>sQLPeopleSelect</name></decl></param>)</parameter_list> <block>{
		<expr_stmt><expr><name>SQLPeopleSelect</name> <operator>=</operator> <name>sQLPeopleSelect</name></expr>;</expr_stmt>
	}</block></function>

	<function><type><specifier>public</specifier> <name>String</name></type> <name>getSQLPeopleReSelect</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>SQLPeopleReSelect</name></expr>;</return>
	}</block></function>

	<function><type><specifier>public</specifier> <name>void</name></type> <name>setSQLPeopleReSelect</name><parameter_list>(<param><decl><type><name>String</name></type> <name>sQLPeopleReSelect</name></decl></param>)</parameter_list> <block>{
		<expr_stmt><expr><name>SQLPeopleReSelect</name> <operator>=</operator> <name>sQLPeopleReSelect</name></expr>;</expr_stmt>
	}</block></function>

	<comment type="block">/*-----------------------------------GETTERS AND SETTERS END-----------------------------------*/</comment>
	
	<comment type="block">/*job application class constructor takes in the UIN
	 * 
	 * initializes all the other variables that can be used by the class*/</comment>
	<constructor><specifier>public</specifier> <name>JobApplication</name><parameter_list>(<param><decl><type><name>int</name></type> <name>UIN</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name><name>People</name><operator>.</operator><name>PersonDoesNotExistException</name></name></expr></argument></throws> <block>{

		<decl_stmt><decl><type><name>boolean</name></type> <name>check</name> <init>= <expr><call><name><name>Student</name><operator>.</operator><name>checkIfStudent</name></name><argument_list>(<argument><expr><name>UIN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">// checking if the UIn passed is the student</comment>
		<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><operator>!</operator><name>check</name></expr>)</condition><then> <block>{
			<throw>throw <expr><operator>new</operator> <call><name><name>People</name><operator>.</operator><name>PersonDoesNotExistException</name></name><argument_list>()</argument_list></call></expr>;</throw><comment type="line">//if the UIN is not students then an exception is thrown</comment>
		}</block></then></if>

		<try>try <block>{
			<decl_stmt><decl><type><name>Connection</name></type> <name>conn</name> <init>= <expr><call><name><name>Database</name><operator>.</operator><name>getConnection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//get connection</comment>

			<try>try <block>{

				<if>if <condition>(<expr><name>conn</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{

					<expr_stmt><expr><name>SQLPeopleSelect</name> <operator>=</operator> <literal type="string">"Select * From applicationdetails where ApplicantUIN=?;"</literal></expr>;</expr_stmt><comment type="line">//write the query</comment>
				}</block></then></if>

				<decl_stmt><decl><type><name>PreparedStatement</name></type> <name>stmtForSelect</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>prepareStatement</name></name><argument_list>(<argument><expr><name>SQLPeopleSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>stmtForSelect</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line">//set the UIN</comment>

				<decl_stmt><decl><type><name>ResultSet</name></type> <name>rs</name> <init>= <expr><call><name><name>stmtForSelect</name><operator>.</operator><name>executeQuery</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//execute the query</comment>

				<if>if <condition>(<expr><call><name><name>rs</name><operator>.</operator><name>first</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{

					<comment type="line">//if the resultset is not empty then </comment>
					
					<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"retreivedApplicationID"</literal></expr></argument>, <argument><expr><literal type="string">"applicationdetails"</literal></expr></argument>, <argument><expr><literal type="string">"ApplicationID"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name>int</name></type> <name>retreivedApplicationID</name><init>=<expr><call><name><name>rs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"ApplicationID"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					
					<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"RetrievedUIN"</literal></expr></argument>, <argument><expr><literal type="string">"applicationdetails"</literal></expr></argument>, <argument><expr><literal type="string">"ApplicantUIN"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name>int</name></type> <name>RetrievedUIN</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"ApplicantUIN"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//---retreive the UIN</comment>
					
					<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"RetrievedWorkEx"</literal></expr></argument>, <argument><expr><literal type="string">"applicationdetails"</literal></expr></argument>, <argument><expr><literal type="string">"WorkExperience"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name>Double</name></type> <name>RetrievedWorkEx</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getDouble</name></name><argument_list>(<argument><expr><literal type="string">"WorkExperience"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//---retreive the work Ex</comment>
					
					<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"retreivedSkill1"</literal></expr></argument>, <argument><expr><literal type="string">"applicationdetails"</literal></expr></argument>, <argument><expr><literal type="string">"Skillset1"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name>boolean</name></type> <name>retreivedSkill1</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><literal type="string">"Skillset1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//---retreive the skills</comment>
					
					<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"retreivedSkill2"</literal></expr></argument>, <argument><expr><literal type="string">"applicationdetails"</literal></expr></argument>, <argument><expr><literal type="string">"Skillset2"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name>boolean</name></type> <name>retreivedSkill2</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><literal type="string">"Skillset2"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//---retreive the skills</comment>
					
					<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"retreivedSkill3"</literal></expr></argument>, <argument><expr><literal type="string">"applicationdetails"</literal></expr></argument>, <argument><expr><literal type="string">"Skillset3"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name>boolean</name></type> <name>retreivedSkill3</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><literal type="string">"Skillset3"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//---retreive the skills</comment>
					
					<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"retreivedSkill4"</literal></expr></argument>, <argument><expr><literal type="string">"applicationdetails"</literal></expr></argument>, <argument><expr><literal type="string">"Skillset4"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name>boolean</name></type> <name>retreivedSkill4</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><literal type="string">"Skillset4"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//---retreive the skills</comment>
					
					<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"retreivedSkill5"</literal></expr></argument>, <argument><expr><literal type="string">"applicationdetails"</literal></expr></argument>, <argument><expr><literal type="string">"Skillset5"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name>boolean</name></type> <name>retreivedSkill5</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><literal type="string">"Skillset5"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//---retreive the skills</comment>
					
					<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"retreivedScaledScore"</literal></expr></argument>, <argument><expr><literal type="string">"applicationdetails"</literal></expr></argument>, <argument><expr><literal type="string">"Scaledscore"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name>float</name></type> <name>retreivedScaledScore</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getFloat</name></name><argument_list>(<argument><expr><literal type="string">"Scaledscore"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//---retreive the scaled score</comment>

					<comment type="line">//initilaize the class variables to the UIN specific</comment>
					
					<expr_stmt><expr><name><name>this</name><operator>.</operator><name>ApplicationID</name></name> <operator>=</operator> <name>retreivedApplicationID</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>this</name><operator>.</operator><name>UIN</name></name> <operator>=</operator> <name>RetrievedUIN</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>this</name><operator>.</operator><name>workEx</name></name> <operator>=</operator> <name>RetrievedWorkEx</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>this</name><operator>.</operator><name>skill1</name></name> <operator>=</operator> <name>retreivedSkill1</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>this</name><operator>.</operator><name>skill2</name></name> <operator>=</operator> <name>retreivedSkill2</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>this</name><operator>.</operator><name>skill3</name></name> <operator>=</operator> <name>retreivedSkill3</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>this</name><operator>.</operator><name>skill4</name></name> <operator>=</operator> <name>retreivedSkill4</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>this</name><operator>.</operator><name>skill5</name></name> <operator>=</operator> <name>retreivedSkill5</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>this</name><operator>.</operator><name>scaledScore</name></name> <operator>=</operator> <name>retreivedScaledScore</name></expr>;</expr_stmt>
				}</block></then>

				<else>else <block>{
					<comment type="line">//no job application exists</comment>
					<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"job application for "</literal> <operator>+</operator> <name>UIN</name><operator>+</operator> <literal type="string">" does not exist"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				}</block></else></if>

			}</block>
			<comment type="line">//catch block</comment>
			<catch>catch <parameter_list>(<param><decl><type><name>SQLException</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
				<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			}</block></catch>

			<finally>finally <block>{

				<comment type="line">// System.out.println("retrieved");</comment>
			}</block></finally></try>
		}</block>
		<comment type="line">//catch block</comment>
		<catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></catch>
		<comment type="block">/*The code thats placed in the finally block gets executed no matter what. But 
															here the finally block does not contain any general statements*/</comment>
		<finally>finally <block>{

			<comment type="line">// System.out.println("retrieved");</comment>
		}</block></finally></try>

	}</block></constructor>
	
	<comment type="block">/*add application details ADDS if the application details of the student with their required credentials
	 * 
	 *  the return type is boolean 
	 *  
	 *  throws the person does not exist exception*/</comment>
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>addApplicationDetails</name><parameter_list>(<param><decl><type><name>int</name></type> <name>UIN</name></decl></param>, <param><decl><type><name>double</name></type> <name>workExp</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>skill1</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>skill2</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>skill3</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>skill4</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>skill5</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name><name>People</name><operator>.</operator><name>PersonDoesNotExistException</name></name></expr></argument></throws> <block>{

		<decl_stmt><decl><type><name>boolean</name></type> <name>check</name> <init>= <expr><call><name><name>Student</name><operator>.</operator><name>checkIfStudent</name></name><argument_list>(<argument><expr><name>UIN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//checks if student</comment>
		<if>if <condition>(<expr><operator>!</operator><name>check</name></expr>)</condition><then> <block>{
			<throw>throw <expr><operator>new</operator> <call><name><name>People</name><operator>.</operator><name>PersonDoesNotExistException</name></name><argument_list>()</argument_list></call></expr>;</throw><comment type="line">//thorw the exception</comment>
		}</block></then></if>
		<decl_stmt><decl><type><name>boolean</name></type> <name>isAdded</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
		<try>try <block>{
			<decl_stmt><decl><type><name>Connection</name></type> <name>conn</name> <init>= <expr><call><name><name>Database</name><operator>.</operator><name>getConnection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//get the connection</comment>

			<try>try <block>{

				<decl_stmt><decl><type><name>boolean</name></type> <name>isExisting</name> <init>= <expr><call><name>addApplicationDetailsCheck</name><argument_list>(<argument><expr><name>UIN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//if the application detaisl already exist</comment>

				<if>if <condition>(<expr><name>isExisting</name></expr>)</condition><then> <block>{
					<comment type="line">//if the application details exist then return false</comment>
					<return>return <expr><literal type="boolean">false</literal></expr>;</return>

				}</block></then>

				<else>else <block>{
					<comment type="line">//calculate the scaled score by passing the work ex and the skills score</comment>
					<decl_stmt><decl><type><name>double</name></type> <name>getScore</name> <init>= <expr><call><name>calculateScaledScore</name><argument_list>(<argument><expr><name>UIN</name></expr></argument>, <argument><expr><name>workExp</name></expr></argument>,<argument><expr><name>skill1</name></expr></argument>, <argument><expr><name>skill2</name></expr></argument>, <argument><expr><name>skill3</name></expr></argument>, <argument><expr><name>skill4</name></expr></argument>, <argument><expr><name>skill5</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

					<comment type="line">//insert into the database with the calculated scaled score</comment>
					<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Adding new data into the database"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name>String</name></type> <name>SQLPeopleInsert</name> <init>= <expr><literal type="string">"Insert into applicationdetails (applicantUIN, WorkExperience, Skillset1, Skillset2, Skillset3, Skillset4, Skillset5, Scaledscore) Values (?,?,?,?,?,?,?,?);"</literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>PreparedStatement</name></type> <name>stmt</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>prepareStatement</name></name><argument_list>(<argument><expr><name>SQLPeopleInsert</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					
					<comment type="line">//set the values to be put into the query</comment>
					<expr_stmt><expr><call><name><name>stmt</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>stmt</name><operator>.</operator><name>setDouble</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>workExp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>stmt</name><operator>.</operator><name>setBoolean</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>skill1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>stmt</name><operator>.</operator><name>setBoolean</name></name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>skill2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>stmt</name><operator>.</operator><name>setBoolean</name></name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>skill3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>stmt</name><operator>.</operator><name>setBoolean</name></name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>skill4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>stmt</name><operator>.</operator><name>setBoolean</name></name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>skill5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>stmt</name><operator>.</operator><name>setDouble</name></name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>getScore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name><name>stmt</name><operator>.</operator><name>executeUpdate</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//execute the query</comment>
					
					<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"UIN"</literal></expr></argument>, <argument><expr><literal type="string">"applicationdetails"</literal></expr></argument>, <argument><expr><literal type="string">"applicantUIN"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>											
					<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"workExp"</literal></expr></argument>, <argument><expr><literal type="string">"applicationdetails"</literal></expr></argument>, <argument><expr><literal type="string">"WorkExperience"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>						
					<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"skill1"</literal></expr></argument>, <argument><expr><literal type="string">"applicationdetails"</literal></expr></argument>, <argument><expr><literal type="string">"Skillset1"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>						
					<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"skill2"</literal></expr></argument>, <argument><expr><literal type="string">"applicationdetails"</literal></expr></argument>, <argument><expr><literal type="string">"Skillset2"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>						
					<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"skill3"</literal></expr></argument>, <argument><expr><literal type="string">"applicationdetails"</literal></expr></argument>, <argument><expr><literal type="string">"Skillset3"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>												
					<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"skill4"</literal></expr></argument>, <argument><expr><literal type="string">"applicationdetails"</literal></expr></argument>, <argument><expr><literal type="string">"Skillset4"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>						
					<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"skill5"</literal></expr></argument>, <argument><expr><literal type="string">"applicationdetails"</literal></expr></argument>, <argument><expr><literal type="string">"Skillset5"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>	
					<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"getScore"</literal></expr></argument>, <argument><expr><literal type="string">"applicationdetails"</literal></expr></argument>, <argument><expr><literal type="string">"ScaledScore"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>	
					
					<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Inserted"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><call><name><name>Database</name><operator>.</operator><name>commitTransaction</name></name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line">//commit the transaction</comment>
					<expr_stmt><expr><name>isAdded</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>

				}</block></else></if>

			}</block>
			<comment type="line">//catch block</comment>
			<catch>catch <parameter_list>(<param><decl><type><name>SQLException</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Error adding/updating to database"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>

		}</block>
		<comment type="line">//catch block</comment>
		<catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Connection failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></catch>

		<comment type="block">/*The code thats placed in the finally block gets executed no matter what. But 
														here the finally block does not contain any general statements*/</comment>
		<finally>finally <block>{

			<comment type="line">// System.out.println("retrieved");</comment>
		}</block></finally></try>

		<return>return <expr><name>isAdded</name></expr>;</return>
	}</block></function>

	<comment type="block">/*this function mainly check if the passed UIn exists the job application table or not
	 * 
	 * the return type is boolean 
	 * 
	 * the UIN is passed for checking*/</comment>
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>addApplicationDetailsCheck</name><parameter_list>(<param><decl><type><name>int</name></type> <name>UIN</name></decl></param>)</parameter_list> <block>{

		<decl_stmt><decl><type><name>boolean</name></type> <name>isExisting</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt><comment type="line">//create a boolean value for returning. set it to false</comment>


		<try>try <block>{
			<decl_stmt><decl><type><name>Connection</name></type> <name>conn</name> <init>= <expr><call><name><name>Database</name><operator>.</operator><name>getConnection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//get the conn</comment>
			<decl_stmt><decl><type><name>String</name></type> <name>SQLAppSelect</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

			<try>try <block>{

				<expr_stmt><expr><name>SQLAppSelect</name> <operator>=</operator> <literal type="string">"Select ApplicationID From applicationdetails where ApplicantUIN=?;"</literal></expr>;</expr_stmt><comment type="line">//write the query</comment>
				<decl_stmt><decl><type><name>PreparedStatement</name></type> <name>stmt</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>prepareStatement</name></name><argument_list>(<argument><expr><name>SQLAppSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>stmt</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line">//set the UIN</comment>
				<decl_stmt><decl><type><name>ResultSet</name></type> <name>rs</name> <init>= <expr><call><name><name>stmt</name><operator>.</operator><name>executeQuery</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//execute the query</comment>

				<if>if <condition>(<expr><call><name><name>rs</name><operator>.</operator><name>first</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
					<comment type="line">//if the application exists for the UIN return true</comment>
					<return>return <expr><literal type="boolean">true</literal></expr>;</return>
				}</block></then></if>

			}</block>
			<comment type="line">//catch SQL exception block</comment>
			<catch>catch <parameter_list>(<param><decl><type><name>SQLException</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Error adding/updating to database"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
			
		}</block>
		<comment type="line">//catch block </comment>
		<catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Connection failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></catch>
		<comment type="block">/*The code thats placed in the finally block gets executed no matter what. But 
															here the finally block does not contain any general statements*/</comment>
		<finally>finally <block>{

			<comment type="line">// System.out.println("retrieved");</comment>
		}</block></finally></try>
		<return>return <expr><name>isExisting</name></expr>;</return>

	}</block></function>

	<comment type="block">/*this function mainly calculates the scaled score with the credentials passed for ewach student who fills the application
	 * 
	 * the return tpye is double
	 * 
	 * */</comment>
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>double</name></type> <name>calculateScaledScore</name><parameter_list>(<param><decl><type><name>int</name></type> <name>UIN</name></decl></param>, <param><decl><type><name>double</name></type> <name>workExp</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>skill1</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>skill2</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>skill3</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>skill4</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>skill5</name></decl></param>)</parameter_list> <block>{

		<comment type="line">//declare the scores and initiliaize to 0;</comment>
		<decl_stmt><decl><type><name>int</name></type> <name>skillScore1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>skillScore2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>skillScore3</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>skillScore4</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>skillScore5</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>double</name></type> <name>scaledScore</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>double</name></type> <name>retreivedGPA</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>
		
		<comment type="line">//set the sclaed score for each skill that is selected</comment>
		<if>if <condition>(<expr><name>skill1</name></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>skillScore1</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
		<if>if <condition>(<expr><name>skill2</name></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>skillScore2</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
		<if>if <condition>(<expr><name>skill3</name></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>skillScore3</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
		<if>if <condition>(<expr><name>skill4</name></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>skillScore4</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
		<if>if <condition>(<expr><name>skill5</name></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>skillScore5</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>

		<expr_stmt><expr><name>scaledScore</name> <operator>=</operator> <name>skillScore1</name> <operator>+</operator> <name>skillScore2</name> <operator>+</operator> <name>skillScore3</name> <operator>+</operator> <name>skillScore4</name>
				<operator>+</operator> <name>skillScore5</name></expr>;</expr_stmt>

		<comment type="line">//if the work ex is persent then add the it to the scaled score</comment>
		<if>if <condition>(<expr><name>workExp</name> <operator>&gt;=</operator> <literal type="number">1.0</literal> <operator>&amp;&amp;</operator> <name>workExp</name> <operator>&lt;=</operator> <literal type="number">1.5</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>scaledScore</name> <operator>=</operator> <name>scaledScore</name> <operator>+</operator> <literal type="number">0.25</literal></expr>;</expr_stmt></block></then></if>

		<if>if <condition>(<expr><name>workExp</name> <operator>&gt;=</operator> <literal type="number">1.51</literal> <operator>&amp;&amp;</operator> <name>workExp</name> <operator>&lt;=</operator> <literal type="number">2.0</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>scaledScore</name> <operator>=</operator> <name>scaledScore</name> <operator>+</operator> <literal type="number">0.50</literal></expr>;</expr_stmt></block></then></if>

		<if>if <condition>(<expr><name>workExp</name> <operator>&gt;=</operator> <literal type="number">2.01</literal> <operator>&amp;&amp;</operator> <name>workExp</name> <operator>&lt;=</operator> <literal type="number">2.50</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>scaledScore</name> <operator>=</operator> <name>scaledScore</name> <operator>+</operator> <literal type="number">0.75</literal></expr>;</expr_stmt></block></then></if>

		<if>if <condition>(<expr><name>workExp</name> <operator>&gt;</operator> <literal type="number">2.51</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>scaledScore</name> <operator>=</operator> <name>scaledScore</name> <operator>+</operator> <literal type="number">1.0</literal></expr>;</expr_stmt></block></then></if>

		<comment type="line">// get the GPA factor here</comment>

		<decl_stmt><decl><type><name>Student</name></type> <name>getStudentGPA</name></decl>;</decl_stmt>
		<try>try <block>{
			<expr_stmt><expr><name>getStudentGPA</name> <operator>=</operator> <operator>new</operator> <call><name>Student</name><argument_list>(<argument><expr><name>UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
			<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"retreivedGPA"</literal></expr></argument>, <argument><expr><literal type="string">"student"</literal></expr></argument>, <argument><expr><literal type="string">"GPA"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>retreivedGPA</name> <operator>=</operator> <call><name><name>getStudentGPA</name><operator>.</operator><name>getGPA</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			
		}</block> <catch>catch <parameter_list>(<param><decl><type><name><name>People</name><operator>.</operator><name>PersonDoesNotExistException</name></name></type> <name>e</name></decl></param>)</parameter_list> <block>{
			<comment type="line">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>

		<comment type="line">//add the retrieved GPA to the scaled score</comment>
		
		<if>if <condition>(<expr><name>retreivedGPA</name> <operator>&gt;=</operator> <literal type="number">3.70</literal> <operator>&amp;&amp;</operator> <name>retreivedGPA</name> <operator>&lt;=</operator> <literal type="number">4.0</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>scaledScore</name> <operator>=</operator> <name>scaledScore</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt></block></then></if>

		<if>if <condition>(<expr><name>retreivedGPA</name> <operator>&gt;=</operator> <literal type="number">3.60</literal> <operator>&amp;&amp;</operator> <name>retreivedGPA</name> <operator>&lt;=</operator> <literal type="number">3.69</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>scaledScore</name> <operator>=</operator> <name>scaledScore</name> <operator>+</operator> <literal type="number">3.5</literal></expr>;</expr_stmt></block></then></if>

		<if>if <condition>(<expr><name>retreivedGPA</name> <operator>&gt;=</operator> <literal type="number">3.50</literal> <operator>&amp;&amp;</operator> <name>retreivedGPA</name> <operator>&lt;=</operator> <literal type="number">3.59</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>scaledScore</name> <operator>=</operator> <name>scaledScore</name> <operator>+</operator> <literal type="number">3.3</literal></expr>;</expr_stmt></block></then></if>

		<if>if <condition>(<expr><name>retreivedGPA</name> <operator>&gt;=</operator> <literal type="number">3.30</literal> <operator>&amp;&amp;</operator> <name>retreivedGPA</name> <operator>&lt;=</operator> <literal type="number">3.49</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>scaledScore</name> <operator>=</operator> <name>scaledScore</name> <operator>+</operator> <literal type="number">3.15</literal></expr>;</expr_stmt></block></then></if>

		<if>if <condition>(<expr><name>retreivedGPA</name> <operator>&gt;=</operator> <literal type="number">3.00</literal> <operator>&amp;&amp;</operator> <name>retreivedGPA</name> <operator>&lt;=</operator> <literal type="number">3.29</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>scaledScore</name> <operator>=</operator> <name>scaledScore</name> <operator>+</operator> <literal type="number">3.0</literal></expr>;</expr_stmt></block></then></if>

		<if>if <condition>(<expr><name>retreivedGPA</name> <operator>&gt;=</operator> <literal type="number">2.90</literal> <operator>&amp;&amp;</operator> <name>retreivedGPA</name> <operator>&lt;=</operator> <literal type="number">2.99</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>scaledScore</name> <operator>=</operator> <name>scaledScore</name> <operator>+</operator> <literal type="number">2.75</literal></expr>;</expr_stmt></block></then></if>

		<if>if <condition>(<expr><name>retreivedGPA</name> <operator>&gt;=</operator> <literal type="number">2.80</literal> <operator>&amp;&amp;</operator> <name>retreivedGPA</name> <operator>&lt;=</operator> <literal type="number">2.89</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>scaledScore</name> <operator>=</operator> <name>scaledScore</name> <operator>+</operator> <literal type="number">2.55</literal></expr>;</expr_stmt></block></then></if>

		<if>if <condition>(<expr><name>retreivedGPA</name> <operator>&gt;=</operator> <literal type="number">2.70</literal> <operator>&amp;&amp;</operator> <name>retreivedGPA</name> <operator>&lt;=</operator> <literal type="number">2.79</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>scaledScore</name> <operator>=</operator> <name>scaledScore</name> <operator>+</operator> <literal type="number">2.30</literal></expr>;</expr_stmt></block></then></if>

		<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Scaled score of student is: "</literal> <operator>+</operator> <name>scaledScore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return>return <expr><name>scaledScore</name></expr>;</return>

	}</block></function>

	<comment type="block">/*retreive matching details of the surdent for any new job posted
	 * 
	 * passed are the credentials for the job
	 * 
	 * the return type is a linkedhashmap*/</comment>
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>LinkedHashMap</name><argument_list type="template">&lt;<argument><name>Integer</name></argument>, <argument><name>Student</name></argument>&gt;</argument_list></name></type> <name>retreiveMatchingStudents</name><parameter_list>(<param><decl><type><name>double</name></type> <name>GPA</name></decl></param>, <param><decl><type><name>double</name></type> <name>workExp</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>skill1</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>skill2</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>skill3</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>skill4</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>skill5</name></decl></param>)</parameter_list> <block>{

		<decl_stmt><decl><type><name><name>LinkedHashMap</name><argument_list type="template">&lt;<argument><name>Integer</name></argument>, <argument><name>Student</name></argument>&gt;</argument_list></name></type> <name>selectedStudents</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedHashMap</name><argument_list type="template">&lt;<argument><name>Integer</name></argument>, <argument><name>Student</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//initialize a hashmap</comment>
		<decl_stmt><decl><type><name>int</name></type> <name>counter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

		<try>try <block>{
			<decl_stmt><decl><type><name>Connection</name></type> <name>conn</name> <init>= <expr><call><name><name>Database</name><operator>.</operator><name>getConnection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//get the connection</comment>
			<decl_stmt><decl><type><name>String</name></type> <name>SQLPeopleSelect</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
			<try>try <block>{

				<if>if <condition>(<expr><name>conn</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
					<comment type="line">// set the limit to 10 student retrievals</comment>
					<expr_stmt><expr><name>SQLPeopleSelect</name> <operator>=</operator> <literal type="string">"Select applicationdetails.ApplicantUIN "</literal>
							<operator>+</operator> <literal type="string">"From applicationdetails inner join student on "</literal>
							<operator>+</operator> <literal type="string">"student.UIN=applicationdetails.ApplicantUIN where student.GPA&gt;=? and "</literal>
							<operator>+</operator> <literal type="string">"applicationdetails.WorkExperience&gt;=? and applicationdetails.SkillSet1=? and "</literal>
							<operator>+</operator> <literal type="string">"applicationdetails.SkillSet2=? and applicationdetails.SkillSet3=? and "</literal>
							<operator>+</operator> <literal type="string">"applicationdetails.SkillSet4=? and applicationdetails.SkillSet5=? "</literal>
							<operator>+</operator> <literal type="string">"and applicationdetails.ApplicantUIN not in "</literal>
							<operator>+</operator> <literal type="string">"(select UIN from employee where employee.UIN=applicationdetails.ApplicantUIN)"</literal>
							<operator>+</operator> <literal type="string">"ORDER BY "</literal>
							<operator>+</operator> <literal type="string">"applicationdetails.Scaledscore DESC LIMIT 10;"</literal></expr>;</expr_stmt>
				}</block></then></if>

				<decl_stmt><decl><type><name>PreparedStatement</name></type> <name>stmtForSelect</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>prepareStatement</name></name><argument_list>(<argument><expr><name>SQLPeopleSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				
				<comment type="line">// set the values for the query</comment>
				
				<expr_stmt><expr><call><name><name>stmtForSelect</name><operator>.</operator><name>setDouble</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>GPA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>stmtForSelect</name><operator>.</operator><name>setDouble</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>workExp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>stmtForSelect</name><operator>.</operator><name>setBoolean</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>skill1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>stmtForSelect</name><operator>.</operator><name>setBoolean</name></name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>skill2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>stmtForSelect</name><operator>.</operator><name>setBoolean</name></name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>skill3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>stmtForSelect</name><operator>.</operator><name>setBoolean</name></name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>skill4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>stmtForSelect</name><operator>.</operator><name>setBoolean</name></name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>skill5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<decl_stmt><decl><type><name>ResultSet</name></type> <name>rs</name> <init>= <expr><call><name><name>stmtForSelect</name><operator>.</operator><name>executeQuery</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

				<while>while <condition>(<expr><call><name><name>rs</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
					<comment type="line">//retreive the UINS</comment>
					
					<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"selectedUIN"</literal></expr></argument>, <argument><expr><literal type="string">"applicationdetails"</literal></expr></argument>, <argument><expr><literal type="string">"ApplicantUIN"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name>int</name></type> <name>selectedUIN</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"ApplicantUIN"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					
					<expr_stmt><expr><name>counter</name><operator>++</operator></expr>;</expr_stmt>

					<decl_stmt><decl><type><name>Student</name></type> <name>chosenStudents</name> <init>= <expr><operator>new</operator> <call><name>Student</name><argument_list>(<argument><expr><name>selectedUIN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//pass the UIN to the student constructor to get the details in the object</comment>
					
					<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"chosenUINs"</literal></expr></argument>, <argument><expr><literal type="string">"student"</literal></expr></argument>, <argument><expr><literal type="string">"UIN"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name>int</name></type> <name>chosenUINs</name><init>=<expr><call><name><name>chosenStudents</name><operator>.</operator><name>getUIN</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					
					<expr_stmt><expr><call><name><name>selectedStudents</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>chosenUINs</name></expr></argument>,<argument><expr><name>chosenStudents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line">//add it to the linkedhashmap</comment>
					<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>chosenUINs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				}</block></while>

			}</block>
			<comment type="line">//catch block for SQL exception</comment>
			<catch>catch <parameter_list>(<param><decl><type><name>SQLException</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			}</block></catch></try>

		}</block>
		<comment type="line">//catch block</comment>
		<catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></catch>
		<comment type="block">/*The code thats placed in the finally block gets executed no matter what. But 
																	here the finally block does not contain any general statements*/</comment>
		<finally>finally <block>{

			<comment type="line">// System.out.println("retrieved");</comment>
		}</block></finally></try>

		<return>return <expr><name>selectedStudents</name></expr>;</return>
	}</block></function>

	<comment type="block">/*retreive matching details of the student for any new job posted, in this the students who had been previously selected and sent the email will be neglected
	 * 
	 * passed are the credentials for the job
	 * 
	 * the return type is a linkedhashmap*/</comment>
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>LinkedHashMap</name><argument_list type="template">&lt;<argument><name>Integer</name></argument>, <argument><name>Student</name></argument>&gt;</argument_list></name></type> <name>rePost</name><parameter_list>(<param><decl><type><name>double</name></type> <name>GPA</name></decl></param>, <param><decl><type><name>double</name></type> <name>workExp</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>skill1</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>skill2</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>skill3</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>skill4</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>skill5</name></decl></param>, <param><decl><type><name>Job</name></type> <name>job</name></decl></param>)</parameter_list> <block>{

		<decl_stmt><decl><type><name><name>LinkedHashMap</name><argument_list type="template">&lt;<argument><name>Integer</name></argument>, <argument><name>Student</name></argument>&gt;</argument_list></name></type> <name>selectedStudents</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedHashMap</name><argument_list type="template">&lt;<argument><name>Integer</name></argument>, <argument><name>Student</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//initialize a hashmap</comment>
		<decl_stmt><decl><type><name>int</name></type> <name>counter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

		<try>try <block>{
			<decl_stmt><decl><type><name>Connection</name></type> <name>conn</name> <init>= <expr><call><name><name>Database</name><operator>.</operator><name>getConnection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//get the connection</comment>
			<decl_stmt><decl><type><name>String</name></type> <name>SQLPeopleSelect</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
			<try>try <block>{

				<if>if <condition>(<expr><name>conn</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{

					<comment type="line">// set the limit to 10</comment>
					<expr_stmt><expr><name>SQLPeopleSelect</name> <operator>=</operator> <literal type="string">"Select applicationdetails.ApplicantUIN "</literal>
							<operator>+</operator> <literal type="string">"From applicationdetails inner join student on "</literal>
							<operator>+</operator> <literal type="string">"student.UIN=applicationdetails.ApplicantUIN where student.GPA&gt;=? and "</literal>
							<operator>+</operator> <literal type="string">"applicationdetails.WorkExperience&gt;=? and applicationdetails.SkillSet1=? and "</literal>
							<operator>+</operator> <literal type="string">"applicationdetails.SkillSet2=? and applicationdetails.SkillSet3=? and "</literal>
							<operator>+</operator> <literal type="string">"applicationdetails.SkillSet4=? and applicationdetails.SkillSet5=? "</literal>
							<operator>+</operator> <literal type="string">"and applicationdetails.ApplicantUIN not in "</literal>
							<operator>+</operator> <literal type="string">"(select UIN from employee where employee.UIN=applicationdetails.ApplicantUIN)"</literal>
							<operator>+</operator> <literal type="string">" and applicationdetails.ApplicantUIN not in "</literal>
							<operator>+</operator> <literal type="string">"(select UIN from jobroster where applicationdetails.ApplicantUIN=jobroster.UIN and JobID=?)"</literal>
							<operator>+</operator> <literal type="string">"ORDER BY "</literal>
							<operator>+</operator> <literal type="string">"applicationdetails.Scaledscore DESC LIMIT 10;"</literal></expr>;</expr_stmt>
				}</block></then></if>

				<decl_stmt><decl><type><name>PreparedStatement</name></type> <name>stmtForSelect</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>prepareStatement</name></name><argument_list>(<argument><expr><name>SQLPeopleSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				
				<comment type="line">//set the values for the query</comment>
				<expr_stmt><expr><call><name><name>stmtForSelect</name><operator>.</operator><name>setDouble</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>GPA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>stmtForSelect</name><operator>.</operator><name>setDouble</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>workExp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>stmtForSelect</name><operator>.</operator><name>setBoolean</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>skill1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>stmtForSelect</name><operator>.</operator><name>setBoolean</name></name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>skill2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>stmtForSelect</name><operator>.</operator><name>setBoolean</name></name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>skill3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>stmtForSelect</name><operator>.</operator><name>setBoolean</name></name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>skill4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>stmtForSelect</name><operator>.</operator><name>setBoolean</name></name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>skill5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>stmtForSelect</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><call><name><name>job</name><operator>.</operator><name>getJobID</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"++++++++++"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<decl_stmt><decl><type><name>ResultSet</name></type> <name>rs</name> <init>= <expr><call><name><name>stmtForSelect</name><operator>.</operator><name>executeQuery</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//execute the query</comment>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"++++++++++"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<while>while <condition>(<expr><call><name><name>rs</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
					<comment type="line">//retrieve the UIN</comment>
					
					<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"selectedUIN"</literal></expr></argument>, <argument><expr><literal type="string">"applicationdetails"</literal></expr></argument>, <argument><expr><literal type="string">"ApplicantUIN"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name>int</name></type> <name>selectedUIN</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"ApplicantUIN"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					
					<expr_stmt><expr><name>counter</name><operator>++</operator></expr>;</expr_stmt>
					<decl_stmt><decl><type><name>Student</name></type> <name>chosenStudents</name> <init>= <expr><operator>new</operator> <call><name>Student</name><argument_list>(<argument><expr><name>selectedUIN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//pass it to the constructor to get the object details</comment>
					
					<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"chosenUINs"</literal></expr></argument>, <argument><expr><literal type="string">"student"</literal></expr></argument>, <argument><expr><literal type="string">"UIN"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name>int</name></type> <name>chosenUINs</name><init>=<expr><call><name><name>chosenStudents</name><operator>.</operator><name>getUIN</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					
					<expr_stmt><expr><call><name><name>selectedStudents</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>chosenUINs</name></expr></argument>,<argument><expr><name>chosenStudents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line">//add it to the hashmap</comment>
					<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>chosenUINs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				}</block></while>

			}</block>
			<comment type="line">//catch block for SQL exception</comment>
			<catch>catch <parameter_list>(<param><decl><type><name>SQLException</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			}</block></catch></try>

		}</block>
		<comment type="line">//catch block</comment>
		<catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></catch>
		<comment type="block">/*The code thats placed in the finally block gets executed no matter what. But 
														here the finally block does not contain any general statements*/</comment>
		<finally>finally <block>{

			<comment type="line">// System.out.println("retrieved");</comment>
		}</block></finally></try>

		<return>return <expr><name>selectedStudents</name></expr>;</return>
	}</block></function>

	<comment type="block">/*the student can update the application details when and when he feels if he has acquired new skills
	 * 
	 * the return type is boolean
	 * 
	 * the passed parameters are the credentials of the job application
	 * 
	 * this also throws an exception*/</comment>
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>updateApplication</name><parameter_list>(<param><decl><type><name>int</name></type> <name>UIN</name></decl></param>, <param><decl><type><name>double</name></type> <name>workExp</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>skill1</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>skill2</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>skill3</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>skill4</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>skill5</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name><name>People</name><operator>.</operator><name>PersonDoesNotExistException</name></name></expr></argument></throws> <block>{

		<decl_stmt><decl><type><name>boolean</name></type> <name>check</name> <init>= <expr><call><name><name>Student</name><operator>.</operator><name>checkIfStudent</name></name><argument_list>(<argument><expr><name>UIN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//check if its a student</comment>
		<if>if <condition>(<expr><operator>!</operator><name>check</name></expr>)</condition><then> <block>{
			<throw>throw <expr><operator>new</operator> <call><name><name>People</name><operator>.</operator><name>PersonDoesNotExistException</name></name><argument_list>()</argument_list></call></expr>;</throw><comment type="line">//throw the exception</comment>
		}</block></then></if>

		<decl_stmt><decl><type><name>boolean</name></type> <name>isUpdated</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

		<try>try <block>{
			<decl_stmt><decl><type><name>Connection</name></type> <name>conn</name> <init>= <expr><call><name><name>Database</name><operator>.</operator><name>getConnection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//get the connection</comment>
			<decl_stmt><decl><type><name>String</name></type> <name>SQLPeopleSelect</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

			<try>try <block>{
				<comment type="line">//write the query</comment>
				<expr_stmt><expr><name>SQLPeopleSelect</name> <operator>=</operator> <literal type="string">"Select ApplicantUIN From applicationdetails where ApplicantUIN=?;"</literal></expr>;</expr_stmt>
				<decl_stmt><decl><type><name>PreparedStatement</name></type> <name>stmt</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>prepareStatement</name></name><argument_list>(<argument><expr><name>SQLPeopleSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>stmt</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><name>ResultSet</name></type> <name>rs</name> <init>= <expr><call><name><name>stmt</name><operator>.</operator><name>executeQuery</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//execute the query</comment>

				<if>if <condition>(<expr><call><name><name>rs</name><operator>.</operator><name>first</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{

					<decl_stmt><decl><type><name>double</name></type> <name>newScaledScore</name> <init>= <expr><call><name>calculateScaledScore</name><argument_list>(<argument><expr><name>UIN</name></expr></argument>, <argument><expr><name>workExp</name></expr></argument>, <argument><expr><name>skill1</name></expr></argument>, <argument><expr><name>skill2</name></expr></argument>, <argument><expr><name>skill3</name></expr></argument>, <argument><expr><name>skill4</name></expr></argument>, <argument><expr><name>skill5</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//call the scaled score function for reevaluating</comment>

					<comment type="line">//update query to update the values of the job application</comment>

					<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Updating the application details in the database"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name>String</name></type> <name>SQLupdateAppdetails</name> <init>= <expr><literal type="string">"UPDATE applicationdetails SET WorkExperience=?, Skillset1=?, Skillset2=?, Skillset3=?, Skillset4=?, Skillset5=?, Scaledscore=? where ApplicantUIN=?;"</literal></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><name>stmt</name> <operator>=</operator> <call><name><name>conn</name><operator>.</operator><name>prepareStatement</name></name><argument_list>(<argument><expr><name>SQLupdateAppdetails</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					
					<comment type="line">//set the values</comment>
					<expr_stmt><expr><call><name><name>stmt</name><operator>.</operator><name>setDouble</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>workExp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>stmt</name><operator>.</operator><name>setBoolean</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>skill1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>stmt</name><operator>.</operator><name>setBoolean</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>skill2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>stmt</name><operator>.</operator><name>setBoolean</name></name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>skill3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>stmt</name><operator>.</operator><name>setBoolean</name></name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>skill4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>stmt</name><operator>.</operator><name>setBoolean</name></name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>skill5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>stmt</name><operator>.</operator><name>setDouble</name></name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>newScaledScore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>stmt</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name><name>stmt</name><operator>.</operator><name>executeUpdate</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//execute the query</comment>
														
					<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"workExp"</literal></expr></argument>, <argument><expr><literal type="string">"applicationdetails"</literal></expr></argument>, <argument><expr><literal type="string">"WorkExperience"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>						
					<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"skill1"</literal></expr></argument>, <argument><expr><literal type="string">"applicationdetails"</literal></expr></argument>, <argument><expr><literal type="string">"Skillset1"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>						
					<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"skill2"</literal></expr></argument>, <argument><expr><literal type="string">"applicationdetails"</literal></expr></argument>, <argument><expr><literal type="string">"Skillset2"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>						
					<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"skill3"</literal></expr></argument>, <argument><expr><literal type="string">"applicationdetails"</literal></expr></argument>, <argument><expr><literal type="string">"Skillset3"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>												
					<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"skill4"</literal></expr></argument>, <argument><expr><literal type="string">"applicationdetails"</literal></expr></argument>, <argument><expr><literal type="string">"Skillset4"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>						
					<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"skill5"</literal></expr></argument>, <argument><expr><literal type="string">"applicationdetails"</literal></expr></argument>, <argument><expr><literal type="string">"Skillset5"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>	
					<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"getScore"</literal></expr></argument>, <argument><expr><literal type="string">"applicationdetails"</literal></expr></argument>, <argument><expr><literal type="string">"ScaledScore"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>	
					<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"newScaledScore"</literal></expr></argument>, <argument><expr><literal type="string">"applicationdetails"</literal></expr></argument>, <argument><expr><literal type="string">"ScaledScore"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"UIN"</literal></expr></argument>, <argument><expr><literal type="string">"applicationdetails"</literal></expr></argument>, <argument><expr><literal type="string">"applicantUIN"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>		
					
					<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Updated"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>isUpdated</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>

					<expr_stmt><expr><call><name><name>Database</name><operator>.</operator><name>commitTransaction</name></name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line">//commit the transaction</comment>

				}</block></then>

				<else>else <block>{
					<comment type="line">//else the UIN does not exist for updating</comment>
					<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>UIN</name> <operator>+</operator> <literal type="string">" does not exist"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>

			}</block>
			<comment type="line">//catch block for SQL exception</comment>
			<catch>catch <parameter_list>(<param><decl><type><name>SQLException</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Error adding/updating to database"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>


		}</block>
		<comment type="line">//catch block</comment>
		<catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Connection failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></catch>
		<comment type="block">/*The code thats placed in the finally block gets executed no matter what. But 
															here the finally block does not contain any general statements*/</comment>
		<finally>finally <block>{

			<comment type="line">// System.out.println("retrieved");</comment>
		}</block></finally></try>

		<return>return <expr><name>isUpdated</name></expr>;</return>
	}</block></function>

	<comment type="block">/*this function checks if the UIN has an existing application for updating
	 * 
	 * the return type is boolean 
	 * 
	 * if the application exists then return true*/</comment>
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>updateApplicationCheck</name><parameter_list>(<param><decl><type><name>int</name></type> <name>UIN</name></decl></param>)</parameter_list> <block>{

		<decl_stmt><decl><type><name>boolean</name></type> <name>isExisting</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

		<try>try <block>{
			<decl_stmt><decl><type><name>Connection</name></type> <name>conn</name> <init>= <expr><call><name><name>Database</name><operator>.</operator><name>getConnection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//get the connection</comment>
			<decl_stmt><decl><type><name>String</name></type> <name>SQLPeopleSelect</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

			<try>try <block>{
				<comment type="line">//write the query</comment>
				<expr_stmt><expr><name>SQLPeopleSelect</name> <operator>=</operator> <literal type="string">"Select ApplicantUIN From applicationdetails where ApplicantUIN=?;"</literal></expr>;</expr_stmt>
				<decl_stmt><decl><type><name>PreparedStatement</name></type> <name>stmt</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>prepareStatement</name></name><argument_list>(<argument><expr><name>SQLPeopleSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>stmt</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line">//set the UIN</comment>
				<decl_stmt><decl><type><name>ResultSet</name></type> <name>rs</name> <init>= <expr><call><name><name>stmt</name><operator>.</operator><name>executeQuery</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//execute the query</comment>

				<if>if <condition>(<expr><call><name><name>rs</name><operator>.</operator><name>first</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
					<comment type="line">//if the application then return true</comment>
					<return>return <expr><literal type="boolean">true</literal></expr>;</return>
				}</block></then>

				<else>else <block>{
					<comment type="line">//else the UIN application does not exist</comment>
					<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>UIN</name> <operator>+</operator> <literal type="string">" application does not exist"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				}</block></else></if>

			}</block>
			<comment type="line">//catc the SQL exception</comment>
			<catch>catch <parameter_list>(<param><decl><type><name>SQLException</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Error adding/updating to database"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>

		}</block>
		<comment type="line">//catch the exception</comment>
		<catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Connection failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></catch>
		
		<comment type="block">/*The code thats placed in the finally block gets executed no matter what. But 
															here the finally block does not contain any general statements*/</comment>
		<finally>finally <block>{

			<comment type="line">// System.out.println("retrieved");</comment>
		}</block></finally></try>

		<return>return <expr><name>isExisting</name></expr>;</return>
	}</block></function>

	<comment type="block">/*
	 * All job application class functions are run and tested locally in the main class for specific executions
	 */</comment>
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<param><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></param>)</parameter_list> <block>{

	}</block></function>

}</block></class>
</unit>
