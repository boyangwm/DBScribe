<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Boyang\Desktop\ASE15\subjects\UMAS\src\com\umas\code\File.java"><package>package <name><name>com</name><operator>.</operator><name>umas</name><operator>.</operator><name>code</name></name>;</package>
<comment type="line">//import java.lang.annotation.ElementType;</comment>
<comment type="line">//import java.lang.annotation.Retention;</comment>
<comment type="line">//import java.lang.annotation.RetentionPolicy;</comment>
<comment type="line">//import java.lang.annotation.Target;</comment>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>Connection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>PreparedStatement</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>ResultSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>SQLException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Scanner</name></name>;</import>

	
<class><specifier>public</specifier> class <name>File</name> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>fileID</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>String</name></type> <name>fileName</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>String</name></type> <name>fileLocation</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>offerID</name></decl>;</decl_stmt>
	
<comment type="line">//	@Target({ElementType.LOCAL_VARIABLE})</comment>
<comment type="line">//	@Retention(RetentionPolicy.RUNTIME)</comment>
<comment type="line">//	public @interface DBAnnotation {</comment>
<comment type="line">//	 String[] variable () default "";</comment>
<comment type="line">//	 String[] table () default "";</comment>
<comment type="line">//	 String[] column () default "";</comment>
<comment type="line">//	 boolean[] isSource () default false; </comment>
<comment type="line">//	}</comment>
	
	
	<comment type="line">// Constructor</comment>
	<constructor><specifier>public</specifier> <name>File</name><parameter_list>(<param><decl><type><name>int</name></type> <name>fileID</name></decl></param>, <param><decl><type><name>String</name></type> <name>fileName</name></decl></param>, <param><decl><type><name>String</name></type> <name>fileLocation</name></decl></param>, <param><decl><type><name>int</name></type> <name>offerID</name></decl></param>)</parameter_list> <block>{
		<expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>fileID</name></name> <operator>=</operator> <name>fileID</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>fileName</name></name> <operator>=</operator> <name>fileName</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>fileLocation</name></name> <operator>=</operator> <name>fileLocation</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>offerID</name></name> <operator>=</operator> <name>offerID</name></expr>;</expr_stmt>
	}</block></constructor>

	<comment type="line">// Constructor</comment>
	<constructor><specifier>public</specifier> <name>File</name><parameter_list>(<param><decl><type><name>String</name></type> <name>fileName</name></decl></param>, <param><decl><type><name>String</name></type> <name>fileLocation</name></decl></param>, <param><decl><type><name>int</name></type> <name>offerID</name></decl></param>)</parameter_list> <block>{
		
		<decl_stmt><decl><type><name>boolean</name></type> <name>isFilePresent</name> <init>= <expr><call><name>isFilePresent</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><name>fileLocation</name></expr></argument>, <argument><expr><name>offerID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>isFilePresent</name> <operator>==</operator> <literal type="boolean">true</literal></expr> )</condition><then><block>{
			<decl_stmt><decl><type><name>int</name></type> <name>fileID</name> <init>= <expr><call><name><name>File</name><operator>.</operator><name>getFileIDFromDB</name></name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><name>fileLocation</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>fileID</name></name> <operator>=</operator> <name>fileID</name></expr>;</expr_stmt>
			
		}</block></then> <else>else<block>{
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>fileID</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		}</block></else></if>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>fileName</name></name> <operator>=</operator> <name>fileName</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>fileLocation</name></name> <operator>=</operator> <name>fileLocation</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>offerID</name></name> <operator>=</operator> <name>offerID</name></expr>;</expr_stmt>
	}</block></constructor>
	
	<function><type><specifier>public</specifier> <name>int</name></type> <name>getFileID</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>fileID</name></expr>;</return>
	}</block></function>
	
	<function><type><specifier>public</specifier> <name>void</name></type> <name>setFileID</name><parameter_list>(<param><decl><type><name>int</name></type> <name>fileID</name></decl></param>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>fileID</name></name> <operator>=</operator> <name>fileID</name></expr>;</expr_stmt>
	}</block></function>
	
	<function><type><specifier>public</specifier> <name>String</name></type> <name>getFileName</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>fileName</name></expr>;</return>
	}</block></function>
	
	<function><type><specifier>public</specifier> <name>void</name></type> <name>setFileName</name><parameter_list>(<param><decl><type><name>String</name></type> <name>fileName</name></decl></param>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>fileName</name></name> <operator>=</operator> <name>fileName</name></expr>;</expr_stmt>
	}</block></function>
	
	<function><type><specifier>public</specifier> <name>String</name></type> <name>getFileLocation</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>fileLocation</name></expr>;</return>
	}</block></function>
	
	<function><type><specifier>public</specifier> <name>void</name></type> <name>setFileLocation</name><parameter_list>(<param><decl><type><name>String</name></type> <name>fileLocation</name></decl></param>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>fileLocation</name></name> <operator>=</operator> <name>fileLocation</name></expr>;</expr_stmt>
	}</block></function>
	
	<function><type><specifier>public</specifier> <name>int</name></type> <name>getOfferID</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>offerID</name></expr>;</return>
	}</block></function>
	
	<function><type><specifier>public</specifier> <name>void</name></type> <name>setOfferID</name><parameter_list>(<param><decl><type><name>int</name></type> <name>offerID</name></decl></param>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>offerID</name></name> <operator>=</operator> <name>offerID</name></expr>;</expr_stmt>
	}</block></function>
	
	
	<comment type="line">// Add a new file to file table in the database</comment>
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>addFileToDB</name><parameter_list>(<param><decl><type><name>String</name></type> <name>fileName</name></decl></param>, <param><decl><type><name>String</name></type> <name>fileLocation</name></decl></param>, <param><decl><type><name>int</name></type> <name>offerID</name></decl></param>)</parameter_list><block>{
		<decl_stmt><decl><type><name>boolean</name></type> <name>fileAdded</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
		<comment type="line">// String newFileLocation = fileLocation.replace("/","//");</comment>
<comment type="line">//		@DBAnnotation (</comment>
<comment type="line">//				variable = {"fileName","newfileLocation", "offerID"},  </comment>
<comment type="line">//				table = "files", </comment>
<comment type="line">//				column = {"FileName","FileLocation", "OfferID"}, </comment>
<comment type="line">//				isSource = false)</comment>
		
		<decl_stmt><decl><type><name>String</name></type> <name>SQLFileInsert</name> <init>= <expr><literal type="string">"INSERT INTO files (FileName,FileLocation,OfferID) VALUES(?,?,?);"</literal></expr></init></decl>;</decl_stmt>
		
		
		<comment type="line">// Step 1: Check if file is already present</comment>
		<try>try <block>{
			<decl_stmt><decl><type><name>Connection</name></type> <name>conn</name> <init>= <expr><call><name><name>Database</name><operator>.</operator><name>getConnection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<try>try <block>{
				<if>if <condition>(<expr><name>conn</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
					
					<comment type="line">// Check if file is already present. </comment>
					
					<decl_stmt><decl><type><name>boolean</name></type> <name>isFilePresent</name> <init>= <expr><call><name>isFilePresent</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><name>fileLocation</name></expr></argument>, <argument><expr><name>offerID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					
					<comment type="line">// If present, confirm whether it needs to be replaced</comment>
					<decl_stmt><decl><type><name>String</name></type> <name>addFileToDB</name> <init>= <expr><literal type="string">"yes"</literal></expr></init></decl>;</decl_stmt>
					
					<if>if<condition>(<expr><name>isFilePresent</name> <operator>==</operator> <literal type="boolean">true</literal></expr>)</condition><then><block>{
<comment type="line">//						Scanner in = new Scanner(System.in);</comment>
<comment type="line">//						System.out.println("File already Present. Do you want to Replace it? Yes/No: ");</comment>
<comment type="line">//						addFileToDB = in.next();</comment>
<comment type="line">//						in.close();</comment>
						<expr_stmt><expr><name>fileAdded</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
					}</block></then>
				
						
					<comment type="line">// Add file in database</comment>
					
					<comment type="line">// if(addFileToDB.toLowerCase().equals("yes")){</comment>
					<else>else<block>{	
						<decl_stmt><decl><type><name>File</name></type> <name>file</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><name>fileLocation</name></expr></argument>, <argument><expr><name>offerID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name>file</name><operator>.</operator><name>deleteFileFromDB</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name>PreparedStatement</name></type> <name>statement</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>prepareStatement</name></name><argument_list>(<argument><expr><name>SQLFileInsert</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"fileName"</literal></expr></argument>, <argument><expr><literal type="string">"files"</literal></expr></argument>, <argument><expr><literal type="string">"FileName"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name>statement</name><operator>.</operator><name>setString</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"fileLocation"</literal></expr></argument>, <argument><expr><literal type="string">"files"</literal></expr></argument>, <argument><expr><literal type="string">"FileLocation"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name>statement</name><operator>.</operator><name>setString</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>fileLocation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"offerID"</literal></expr></argument>, <argument><expr><literal type="string">"files"</literal></expr></argument>, <argument><expr><literal type="string">"OfferID"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name>statement</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>offerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name>statement</name><operator>.</operator><name>executeUpdate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name>Database</name><operator>.</operator><name>commitTransaction</name></name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name>fileAdded</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
					}</block></else></if>		
				}</block></then></if>
			}</block> <catch>catch <parameter_list>(<param><decl><type><name>SQLException</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>Database</name><operator>.</operator><name>rollBackTransaction</name></name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><empty_stmt>;</empty_stmt>
			}</block></catch></try>
	
		}</block> <catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		
		<return>return <expr><name>fileAdded</name></expr>;</return>
			
	}</block></function>
	
	<comment type="line">// Checks whether the file is already present in the same file location and for the same course </comment>
	<function><type><specifier>private</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isFilePresent</name><parameter_list>(<param><decl><type><name>String</name></type> <name>fileName</name></decl></param>, <param><decl><type><name>String</name></type> <name>fileLocation</name></decl></param>, <param><decl><type><name>int</name></type> <name>offerID</name></decl></param>)</parameter_list><block>{
		<decl_stmt><decl><type><name>boolean</name></type> <name>isFilePresent</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
<comment type="line">//		String newFileLocation = fileLocation.replace("/","//");</comment>
<comment type="line">//		@DBAnnotation (</comment>
<comment type="line">//				variable = "fileName",  </comment>
<comment type="line">//				table = "files", </comment>
<comment type="line">//				column = "FileName", </comment>
<comment type="line">//				isSource = true)</comment>
		
		<decl_stmt><decl><type><name>String</name></type> <name>SQLFileSelect</name> <init>= <expr><literal type="string">"SELECT FileName FROM files WHERE OfferID = ? AND FileName = ? AND FileLocation = ?;"</literal></expr></init></decl>;</decl_stmt>
		
		<try>try <block>{
			<decl_stmt><decl><type><name>Connection</name></type> <name>conn</name> <init>= <expr><call><name><name>Database</name><operator>.</operator><name>getConnection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<try>try <block>{
				<if>if <condition>(<expr><name>conn</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
					
					<comment type="line">// Check if file is already present. </comment>
					<decl_stmt><decl><type><name>PreparedStatement</name></type> <name>statement</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>prepareStatement</name></name><argument_list>(<argument><expr><name>SQLFileSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"offerID"</literal></expr></argument>, <argument><expr><literal type="string">"files"</literal></expr></argument>, <argument><expr><literal type="string">"OfferID"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>statement</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>offerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"fileName"</literal></expr></argument>, <argument><expr><literal type="string">"files"</literal></expr></argument>, <argument><expr><literal type="string">"FileName"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>statement</name><operator>.</operator><name>setString</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"fileLocation"</literal></expr></argument>, <argument><expr><literal type="string">"files"</literal></expr></argument>, <argument><expr><literal type="string">"FileLocation"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>statement</name><operator>.</operator><name>setString</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>fileLocation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name>ResultSet</name></type> <name>rs</name> <init>= <expr><call><name><name>statement</name><operator>.</operator><name>executeQuery</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					<while>while <condition>(<expr><call><name><name>rs</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
						<comment type="line">// Retrieve by column name</comment>
						<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"fileName"</literal></expr></argument>, <argument><expr><literal type="string">"files"</literal></expr></argument>, <argument><expr><literal type="string">"FileName"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name>String</name></type> <name>tableFileName</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"FileName"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>tableFileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<if>if<condition>(<expr><call><name><name>tableFileName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
							<expr_stmt><expr><name>isFilePresent</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
							<break>break;</break>
						}</block></then></if>
					}</block></while>
				}</block></then></if>	
			}</block> <catch>catch <parameter_list>(<param><decl><type><name>SQLException</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
	
		}</block> <catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		<return>return <expr><name>isFilePresent</name></expr>;</return>
	}</block></function>
	
	<comment type="line">// Deletes the file information from the file table </comment>
	<function><type><specifier>public</specifier> <name>boolean</name></type> <name>deleteFileFromDB</name><parameter_list>()</parameter_list><block>{
		<decl_stmt><decl><type><name>boolean</name></type> <name>fileDeleted</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name>int</name></type> <name>fileID</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>getFileID</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>fileName</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>getFileName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>fileLocation</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>getFileLocation</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>offerID</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>getOfferID</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name>boolean</name></type> <name>isFilePresent</name> <init>= <expr><call><name>isFilePresent</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>,<argument><expr><name>fileLocation</name></expr></argument>,<argument><expr><name>offerID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>isFilePresent</name><operator>+</operator><literal type="string">" fileName: "</literal><operator>+</operator><name>fileName</name> <operator>+</operator> <literal type="string">" loca: "</literal> <operator>+</operator> <name>fileLocation</name> <operator>+</operator> <literal type="string">" id:"</literal> <operator>+</operator> <name>fileID</name> <operator>+</operator> <literal type="string">" offerID "</literal> <operator>+</operator> <name>offerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if<condition>(<expr><name>isFilePresent</name> <operator>==</operator> <literal type="boolean">false</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"The file is not present"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else>else <block>{
<comment type="line">//			@DBAnnotation (</comment>
<comment type="line">//					variable = {"fileID"},  </comment>
<comment type="line">//					table = "files", </comment>
<comment type="line">//					column = {"FileID"}, </comment>
<comment type="line">//					isSource = false)</comment>
			
			<decl_stmt><decl><type><name>String</name></type> <name>SQLFileSelect</name> <init>= <expr><literal type="string">"DELETE FROM files WHERE FileID = ?;"</literal></expr></init></decl>;</decl_stmt>
			<try>try <block>{
				<decl_stmt><decl><type><name>Connection</name></type> <name>conn</name> <init>= <expr><call><name><name>Database</name><operator>.</operator><name>getConnection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<try>try <block>{
					<if>if <condition>(<expr><name>conn</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
						<decl_stmt><decl><type><name>PreparedStatement</name></type> <name>statement</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>prepareStatement</name></name><argument_list>(<argument><expr><name>SQLFileSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"fileID"</literal></expr></argument>, <argument><expr><literal type="string">"files"</literal></expr></argument>, <argument><expr><literal type="string">"FileID"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name>statement</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>fileID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>				
						<expr_stmt><expr><call><name><name>statement</name><operator>.</operator><name>executeUpdate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name>Database</name><operator>.</operator><name>commitTransaction</name></name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name>fileDeleted</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
					}</block></then></if>
				}</block> <catch>catch <parameter_list>(<param><decl><type><name>SQLException</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
					<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>Database</name><operator>.</operator><name>rollBackTransaction</name></name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></catch></try>
	
			}</block> <catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
	
		}</block></else></if>
		
		<return>return <expr><name>fileDeleted</name></expr>;</return>
	}</block></function>
	
	<comment type="line">// This function modifes the file location of an existing file to the new location</comment>
	<function><type><specifier>public</specifier> <name>boolean</name></type> <name>modifyFileLocation</name><parameter_list>(<param><decl><type><name>String</name></type> <name>newFileLocation</name></decl></param>)</parameter_list><block>{
		<decl_stmt><decl><type><name>boolean</name></type> <name>fileLocationModified</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name>int</name></type> <name>fileID</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>getFileID</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name>String</name></type> <name>fileName</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>getFileName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>fileLocation</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>getFileLocation</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>offerID</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>getOfferID</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>boolean</name></type> <name>isFilePresent</name> <init>= <expr><call><name>isFilePresent</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>,<argument><expr><name>fileLocation</name></expr></argument>,<argument><expr><name>offerID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>isFilePresent</name> <operator>==</operator> <literal type="boolean">false</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"The file is not present"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else>else <block>{
<comment type="line">//			@DBAnnotation (</comment>
<comment type="line">//					variable = {"fileID","fileLocation"},  </comment>
<comment type="line">//					table = "files", </comment>
<comment type="line">//					column = {"FileID","FileLocation"}, </comment>
<comment type="line">//					isSource = false)</comment>
			
			<decl_stmt><decl><type><name>String</name></type> <name>SQLFileSelect</name> <init>= <expr><literal type="string">"UPDATE files SET `FileLocation`= ? WHERE `FileID`= ? ;"</literal></expr></init></decl>;</decl_stmt>
			<try>try <block>{
				<decl_stmt><decl><type><name>Connection</name></type> <name>conn</name> <init>= <expr><call><name><name>Database</name><operator>.</operator><name>getConnection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<try>try <block>{
					<if>if <condition>(<expr><name>conn</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
						<decl_stmt><decl><type><name>PreparedStatement</name></type> <name>statement</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>prepareStatement</name></name><argument_list>(<argument><expr><name>SQLFileSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"newFileLocation"</literal></expr></argument>, <argument><expr><literal type="string">"files"</literal></expr></argument>, <argument><expr><literal type="string">"FileLocation"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name>statement</name><operator>.</operator><name>setString</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>newFileLocation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"fileID"</literal></expr></argument>, <argument><expr><literal type="string">"files"</literal></expr></argument>, <argument><expr><literal type="string">"FileID"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name>statement</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>fileID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>				
						<expr_stmt><expr><call><name><name>statement</name><operator>.</operator><name>executeUpdate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name>Database</name><operator>.</operator><name>commitTransaction</name></name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name>fileLocationModified</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
					}</block></then></if>
				}</block> <catch>catch <parameter_list>(<param><decl><type><name>SQLException</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
					<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>Database</name><operator>.</operator><name>rollBackTransaction</name></name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></catch></try>
	
			}</block> <catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
	
		}</block></else></if>
	
		<return>return <expr><name>fileLocationModified</name></expr>;</return>
	}</block></function>
	
	<comment type="line">// This function retrives the file details from the File table</comment>
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getFileIDFromDB</name><parameter_list>(<param><decl><type><name>String</name></type> <name>fileName</name></decl></param>,<param><decl><type><name>String</name></type> <name>fileLocation</name></decl></param>)</parameter_list><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>fileID</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		
<comment type="line">//		@DBAnnotation (</comment>
<comment type="line">//				variable = {"fileID", "fileName","fileLocation"},  </comment>
<comment type="line">//				table = "files", </comment>
<comment type="line">//				column = {"FileID","FileName","FileLocation"}, </comment>
<comment type="line">//				isSource = {true})</comment>
		
		<decl_stmt><decl><type><name>String</name></type> <name>SQLFileSelect</name> <init>= <expr><literal type="string">"SELECT FileID FROM files WHERE FileName = ? AND FileLocation = ?;"</literal></expr></init></decl>;</decl_stmt>
		<try>try <block>{
			<decl_stmt><decl><type><name>Connection</name></type> <name>conn</name> <init>= <expr><call><name><name>Database</name><operator>.</operator><name>getConnection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<try>try <block>{
				<if>if <condition>(<expr><name>conn</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
					<decl_stmt><decl><type><name>PreparedStatement</name></type> <name>statement</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>prepareStatement</name></name><argument_list>(<argument><expr><name>SQLFileSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"fileName"</literal></expr></argument>, <argument><expr><literal type="string">"files"</literal></expr></argument>, <argument><expr><literal type="string">"FileName"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>statement</name><operator>.</operator><name>setString</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"fileLocation"</literal></expr></argument>, <argument><expr><literal type="string">"files"</literal></expr></argument>, <argument><expr><literal type="string">"FileLocation"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>statement</name><operator>.</operator><name>setString</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>fileLocation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					
					<decl_stmt><decl><type><name>ResultSet</name></type> <name>rs</name> <init>= <expr><call><name><name>statement</name><operator>.</operator><name>executeQuery</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					
					<while>while<condition>(<expr><call><name><name>rs</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{
						<expr_stmt><expr><name>fileID</name> <operator>=</operator> <call><name><name>rs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"FileID"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></while>
				}</block></then></if>
			}</block> <catch>catch <parameter_list>(<param><decl><type><name>SQLException</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
	
		}</block> <catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		
		<return>return <expr><name>fileID</name></expr>;</return>
	}</block></function>
	
	<comment type="line">// Get a list of files for a single course</comment>
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>ArrayList</name><argument_list type="template">&lt;<argument><name>File</name></argument>&gt;</argument_list></name></type> <name>getFiles</name><parameter_list>(<param><decl><type><name>int</name></type> <name>offerID</name></decl></param>)</parameter_list><block>{
<comment type="line">//		</comment>
<comment type="line">//		@DBAnnotation (</comment>
<comment type="line">//				variable = {"fileID", "fileName","fileLocation", "offerID"},  </comment>
<comment type="line">//				table = "files", </comment>
<comment type="line">//				column = {"FileID","FileName","FileLocation", "OfferID"}, </comment>
<comment type="line">//				isSource = {false,false,false,true})</comment>
		
		<decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="template">&lt;<argument><name>File</name></argument>&gt;</argument_list></name></type> <name>courseFiles</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="template">&lt;<argument><name>File</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>fileID</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>fileName</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>fileLocation</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name>String</name></type> <name>SQLFileSelect</name> <init>= <expr><literal type="string">"SELECT FileID, FileName, FileLocation FROM files WHERE OfferID = ?;"</literal></expr></init></decl>;</decl_stmt>
		<try>try <block>{
			<decl_stmt><decl><type><name>Connection</name></type> <name>conn</name> <init>= <expr><call><name><name>Database</name><operator>.</operator><name>getConnection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<try>try <block>{
				<if>if <condition>(<expr><name>conn</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
					<decl_stmt><decl><type><name>PreparedStatement</name></type> <name>statement</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>prepareStatement</name></name><argument_list>(<argument><expr><name>SQLFileSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"offerID"</literal></expr></argument>, <argument><expr><literal type="string">"files"</literal></expr></argument>, <argument><expr><literal type="string">"OfferID"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>statement</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>offerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					
					<decl_stmt><decl><type><name>ResultSet</name></type> <name>rs</name> <init>= <expr><call><name><name>statement</name><operator>.</operator><name>executeQuery</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					
					<while>while<condition>(<expr><call><name><name>rs</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{
						<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"fileID"</literal></expr></argument>, <argument><expr><literal type="string">"files"</literal></expr></argument>, <argument><expr><literal type="string">"FileID"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name>fileID</name> <operator>=</operator> <call><name><name>rs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"FileID"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"fileName"</literal></expr></argument>, <argument><expr><literal type="string">"files"</literal></expr></argument>, <argument><expr><literal type="string">"FileName"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name>fileName</name> <operator>=</operator> <call><name><name>rs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"FileName"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"fileLocation"</literal></expr></argument>, <argument><expr><literal type="string">"files"</literal></expr></argument>, <argument><expr><literal type="string">"FileLocation"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name>fileLocation</name> <operator>=</operator> <call><name><name>rs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"FileLocation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<comment type="line">// String newFileLocation = fileLocation.replace("/","//");</comment>
						<decl_stmt><decl><type><name>File</name></type> <name>file</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>fileID</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>, <argument><expr><name>fileLocation</name></expr></argument>, <argument><expr><name>offerID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name>courseFiles</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></while>
				}</block></then></if>
			}</block> <catch>catch <parameter_list>(<param><decl><type><name>SQLException</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
	
		}</block> <catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		
		<return>return <expr><name>courseFiles</name></expr>;</return>
		
	}</block></function>
	
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<param><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></param>)</parameter_list><block>{
<comment type="line">//		String fileName = "CS442Syllabus";</comment>
<comment type="line">//		String fileLocation = "C:/CS442";</comment>
<comment type="line">//		int offerID = 123456;</comment>
<comment type="line">//		</comment>
<comment type="line">//		File file = new File(fileName,fileLocation,offerID);</comment>
<comment type="line">//		</comment>
<comment type="line">//		boolean fileAdded = File.addFileToDB(fileName, fileLocation, offerID);</comment>
<comment type="line">//		</comment>
<comment type="line">//		if(fileAdded == true){</comment>
<comment type="line">//			System.out.println("File Added");</comment>
<comment type="line">//		} else {</comment>
<comment type="line">//			System.out.println("File Not Added");</comment>
<comment type="line">//		}</comment>
		
		
		<comment type="line">// To test delete function</comment>
<comment type="line">//		boolean fileDeleted = file.deleteFileFromDB();</comment>
<comment type="line">//		</comment>
<comment type="line">//		if(fileDeleted == true){</comment>
<comment type="line">//			System.out.println("File Deleted");</comment>
<comment type="line">//		} else {</comment>
<comment type="line">//			System.out.println("File Not Deleted");</comment>
<comment type="line">//		}</comment>
		
		<comment type="line">// To test modify location</comment>
<comment type="line">//		String newFileLocation = "C:/Courses/CS442";</comment>
<comment type="line">//		boolean fileLocationModified = file.modifyFileLocation(newFileLocation); </comment>
<comment type="line">//				</comment>
<comment type="line">//		</comment>
<comment type="line">//		if(fileLocationModified == true){</comment>
<comment type="line">//			System.out.println("File Added");</comment>
<comment type="line">//		} else {</comment>
<comment type="line">//			System.out.println("File Not Added");</comment>
<comment type="line">//		}</comment>
		
		<comment type="line">// To test get files</comment>
<comment type="line">//		 ArrayList&lt;File&gt; files = File.getFiles(offerID); </comment>
<comment type="line">//				</comment>
<comment type="line">//		</comment>
<comment type="line">//		for(File file2: files){</comment>
<comment type="line">//			System.out.println(file2.getFileName());</comment>
<comment type="line">//		}</comment>
		
	}</block></function>
	
	}</block></class>
	
</unit>
