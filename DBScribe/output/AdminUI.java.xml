<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Boyang\Desktop\ASE15\subjects\UMAS\src\com\umas\frontend\AdminUI.java"><package>package <name><name>com</name><operator>.</operator><name>umas</name><operator>.</operator><name>frontend</name></name>;</package>



<comment type="block" format="javadoc">/****************@author Simant Purohit*********************************/</comment>

<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>EventQueue</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>JPanel</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>border</name><operator>.</operator><name>EmptyBorder</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>JTabbedPane</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>GridLayout</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedHashMap</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>DefaultComboBoxModel</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>DefaultListModel</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>JDialog</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>JLabel</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>JOptionPane</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>JScrollPane</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>JTextField</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>JComboBox</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>JButton</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>event</name><operator>.</operator><name>ActionListener</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>event</name><operator>.</operator><name>ActionEvent</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>JList</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>JTextPane</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>umas</name><operator>.</operator><name>code</name><operator>.</operator><name>Admin</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>umas</name><operator>.</operator><name>code</name><operator>.</operator><name>Classroom</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>umas</name><operator>.</operator><name>code</name><operator>.</operator><name>ClassroomLocation</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>umas</name><operator>.</operator><name>code</name><operator>.</operator><name>Course</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>umas</name><operator>.</operator><name>code</name><operator>.</operator><name>CourseOffered</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>umas</name><operator>.</operator><name>code</name><operator>.</operator><name>CourseSchedule</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>umas</name><operator>.</operator><name>code</name><operator>.</operator><name>DBAnnotation</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>umas</name><operator>.</operator><name>code</name><operator>.</operator><name>Database</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>umas</name><operator>.</operator><name>code</name><operator>.</operator><name>Department</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>umas</name><operator>.</operator><name>code</name><operator>.</operator><name>People</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>umas</name><operator>.</operator><name>code</name><operator>.</operator><name>Professor</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>umas</name><operator>.</operator><name>code</name><operator>.</operator><name>Semester</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>umas</name><operator>.</operator><name>code</name><operator>.</operator><name>Student</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>umas</name><operator>.</operator><name>code</name><operator>.</operator><name>TA</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>umas</name><operator>.</operator><name>code</name><operator>.</operator><name>Timeslots</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>umas</name><operator>.</operator><name>code</name><operator>.</operator><name>WaitList</name></name>;</import>


<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>Color</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>Font</name></name>;</import>



<class><specifier>public</specifier> class <name>AdminUI</name> <super><extends>extends <name>JPanel</name></extends></super> <block>{

	<decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>AdminUI</name></type> <name>adminUI</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name><name>HashMap</name><argument_list type="template">&lt;<argument><name>Integer</name></argument>, <argument><name>CourseOffered</name></argument>&gt;</argument_list></name></type> <name>coursesOffered</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name><name>ArrayList</name><argument_list type="template">&lt;<argument><name>Department</name></argument>&gt;</argument_list></name></type> <name>departments</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name><name>LinkedHashMap</name><argument_list type="template">&lt;<argument><name>Integer</name></argument>,<argument><name>Course</name></argument>&gt;</argument_list></name></type> <name>courses</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name><name>ArrayList</name><argument_list type="template">&lt;<argument><name>Student</name></argument>&gt;</argument_list></name></type> <name>students</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name><name>ArrayList</name><argument_list type="template">&lt;<argument><name>Professor</name></argument>&gt;</argument_list></name></type> <name>professors</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name><name>ArrayList</name><argument_list type="template">&lt;<argument><name>Admin</name></argument>&gt;</argument_list></name></type> <name>admins</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name><name>ArrayList</name><argument_list type="template">&lt;<argument><name>TA</name></argument>&gt;</argument_list></name></type> <name>tas</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name><name>HashMap</name><argument_list type="template">&lt;<argument><name>Integer</name></argument>, <argument><name>CourseSchedule</name></argument>&gt;</argument_list></name></type> <name>courseSchedule</name></decl>;</decl_stmt>
	
	<comment type="line">//Hashmaps for retrieved empty class and timeslots</comment>
	<decl_stmt><decl><type><specifier>static</specifier> <name><name>LinkedHashMap</name><argument_list type="template">&lt;<argument><name>Classroom</name></argument>, <argument><name><name>ArrayList</name><argument_list type="template">&lt;<argument><name>Timeslots</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>classroomAndTimeslots</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedHashMap</name><argument_list type="template">&lt;<argument><name>Classroom</name></argument>, <argument><name><name>ArrayList</name><argument_list type="template">&lt;<argument><name>Timeslots</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> 
	<decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> <init>= <expr><literal type="number">1L</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>JTextField</name></type> <name>studentNameText</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>JTextPane</name></type> <name>courseScheduleTextPane</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name><name>JComboBox</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>departmentSelectStudent</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name><name>JComboBox</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>departmentSelectProfessor</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name><name>JComboBox</name><argument_list type="template">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>levelSelectStudent</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>JTextField</name></type> <name>professorNameText</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>JTextField</name></type> <name>txtToBeDecided</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>JTextField</name></type> <name>txtToBeDecided_1</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name><name>JList</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>courseNameList</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name><name>JList</name><argument_list type="template">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>courseOfferIDList</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name><name>JList</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>professorNameList</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name><name>JList</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>classLocationList</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name><name>JList</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>classNameList</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name><name>JList</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>classTimingList</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name><name>JComboBox</name><argument_list type="template">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>courseScheduledCombo</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name><name>JComboBox</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>timingAvailableCombo</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name><name>JComboBox</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>classRoomCombo</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name><name>JComboBox</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>classLocationCombo</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name><name>JComboBox</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>timeSlotTypeCombo</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>final</specifier> <name><name>JComboBox</name><argument_list type="template">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>courseOfferIDComboBox</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>final</specifier> <name><name>JComboBox</name><argument_list type="template">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>taComboBox</name></decl>;</decl_stmt>
	
	<comment type="line">//variables used in offer Tab</comment>
	<decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>JComboBox</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>allDepartmentsCombo</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>JComboBox</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>allCoursesCombo</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>JComboBox</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>allProfessorCombo</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name><name>JComboBox</name><argument_list type="template">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>classCapacity</name></decl>;</decl_stmt>
	
	
	<comment type="line">//variables used in waitlist monitor</comment>
	<decl_stmt><decl><type><specifier>private</specifier> <name>JScrollPane</name></type> <name>waitListStudents</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>JScrollPane</name></type> <name>emailedStudents</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name><name>JComboBox</name><argument_list type="template">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>courseOfferSelectForWaitListCombo</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name><name>JList</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>waitListStudentsJList</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name><name>JList</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>emailedStudentsJList</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>JTextField</name></type> <name>adminName</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name><name>JComboBox</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>adminDeptCombo</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>String</name><index>[]</index></type> <name>departmentNameArray</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>JTextField</name></type> <name>txtDepartmentName</name></decl>;</decl_stmt>
	
	<decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>manageCourse</name></type> <name>manageCourseInstance</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>JTextField</name></type> <name>txtDepartmentnamenew</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name><name>JComboBox</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>updateDeptCombo</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>JTextPane</name></type> <name>courseDetailsTextPane</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>JTextPane</name></type> <name>taCourseDetails</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>JTextPane</name></type> <name>taStudentDetails</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>GiveBonusUI</name></type> <name>giveBonusPanel</name></decl>;</decl_stmt>
	
	<comment type="block" format="javadoc">/**
	 * Launch the application.
	 */</comment>
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<param><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></param>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>EventQueue</name><operator>.</operator><name>invokeLater</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
			<function><type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
				<try>try <block>{
					<decl_stmt><decl><type><name>AdminUI</name></type> <name>frame</name> <init>= <expr><call><name>initializeAdminUI</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Admin</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name>frame</name><operator>.</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block> <catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
					<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				}</block></catch></try>
			}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>AdminUI</name></type> <name>getInstance</name><parameter_list>(<param><decl><type><name>Admin</name></type> <name>admin</name></decl></param>)</parameter_list><block>{
		<try>try <block>{
			<expr_stmt><expr><name>adminUI</name> <operator>=</operator> <operator>new</operator> <call><name>AdminUI</name><argument_list>(<argument><expr><name>admin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch>catch <parameter_list>(<param><decl><type><name><name>Department</name><operator>.</operator><name>DepartmentDoesNotExistException</name></name></type> <name>e</name></decl></param>)</parameter_list> <block>{
			<comment type="line">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		<return>return <expr><name>adminUI</name></expr>;</return>
	}</block></function>
	
	<constructor><specifier>private</specifier> <name>AdminUI</name><parameter_list>(<param><decl><type><name>Admin</name></type> <name>admin</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name><name>Department</name><operator>.</operator><name>DepartmentDoesNotExistException</name></name></expr></argument></throws> <block>{
		<expr_stmt><expr><call><name>initializeBackgroundData</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>setBounds</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><literal type="number">768</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>setBorder</name><argument_list>(<argument><expr><operator>new</operator> <call><name>EmptyBorder</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
		<expr_stmt><expr><name>departments</name> <operator>=</operator> <call><name><name>Department</name><operator>.</operator><name>getAllDepartments</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>departmentNameArray</name><operator>.</operator><name>length</name></name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
			<expr_stmt><expr><name><name>departmentNameArray</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>departments</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getDepartmentName</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></for>
		<expr_stmt><expr><call><name>setLayout</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JTabbedPane</name></type> <name>managePeople</name> <init>= <expr><operator>new</operator> <call><name>JTabbedPane</name><argument_list>(<argument><expr><name><name>JTabbedPane</name><operator>.</operator><name>TOP</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>managePeople</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">923</literal></expr></argument>, <argument><expr><literal type="number">483</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>managePeople</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JTabbedPane</name></type> <name>adminTabs</name> <init>= <expr><operator>new</operator> <call><name>JTabbedPane</name><argument_list>(<argument><expr><name><name>JTabbedPane</name><operator>.</operator><name>TOP</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>managePeople</name><operator>.</operator><name>addTab</name></name><argument_list>(<argument><expr><literal type="string">"Manage People"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>adminTabs</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JPanel</name></type> <name>addNewStudent</name> <init>= <expr><operator>new</operator> <call><name>JPanel</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>adminTabs</name><operator>.</operator><name>addTab</name></name><argument_list>(<argument><expr><literal type="string">"Add A Student"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>addNewStudent</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>addNewStudent</name><operator>.</operator><name>setLayout</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>GridLayout</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JLabel</name></type> <name>studentNameLabel</name> <init>= <expr><operator>new</operator> <call><name>JLabel</name><argument_list>(<argument><expr><literal type="string">"Enter student name"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>addNewStudent</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>studentNameLabel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><name>studentNameText</name> <operator>=</operator> <operator>new</operator> <call><name>JTextField</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>addNewStudent</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>studentNameText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>studentNameText</name><operator>.</operator><name>setColumns</name></name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JLabel</name></type> <name>lblNewLabel_1</name> <init>= <expr><operator>new</operator> <call><name>JLabel</name><argument_list>(<argument><expr><literal type="string">"Select Department"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>addNewStudent</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>lblNewLabel_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><name>departmentSelectStudent</name> <operator>=</operator> <operator>new</operator> <call><name><name>JComboBox</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>departmentSelectStudent</name><operator>.</operator><name>setModel</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>DefaultComboBoxModel</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>departmentNameArray</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>addNewStudent</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>departmentSelectStudent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JLabel</name></type> <name>lblNewLabel</name> <init>= <expr><operator>new</operator> <call><name>JLabel</name><argument_list>(<argument><expr><literal type="string">"Select Level"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>addNewStudent</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>lblNewLabel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><name>levelSelectStudent</name> <operator>=</operator> <operator>new</operator> <call><name><name>JComboBox</name><argument_list type="template">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>levelSelectStudent</name><operator>.</operator><name>setModel</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>DefaultComboBoxModel</name><argument_list type="template">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>new</operator> <name><name>Integer</name><index>[]</index></name> <block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>addNewStudent</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>levelSelectStudent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JLabel</name></type> <name>lblNewLabel_2</name> <init>= <expr><operator>new</operator> <call><name>JLabel</name><argument_list>(<argument><expr><literal type="string">"Confirm changes"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>addNewStudent</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>lblNewLabel_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JButton</name></type> <name>addStudentButton</name> <init>= <expr><operator>new</operator> <call><name>JButton</name><argument_list>(<argument><expr><literal type="string">"Add student"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>addStudentButton</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>ActionListener</name></super><argument_list>()</argument_list> <block>{
			<function><type><specifier>public</specifier> <name>void</name></type> <name>actionPerformed</name><parameter_list>(<param><decl><type><name>ActionEvent</name></type> <name>arg0</name></decl></param>)</parameter_list> <block>{
				<decl_stmt><decl><type><name>boolean</name></type> <name>add</name> <init>= <expr><call><name>addStudent</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if<condition>(<expr><name>add</name></expr>)</condition><then><block>{
					<expr_stmt><expr><call><name>showMessage</name><argument_list>(<argument><expr><literal type="string">"Student added successfully"</literal></expr></argument>, <argument><expr><literal type="string">"Add successfull"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>initializeEveryThing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				}</block></then>
				<else>else<block>{
					<expr_stmt><expr><call><name>showMessage</name><argument_list>(<argument><expr><literal type="string">"Student not added"</literal></expr></argument>, <argument><expr><literal type="string">"Add unsuccessfull"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>
			}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>addNewStudent</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>addStudentButton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JPanel</name></type> <name>addNewProfessor</name> <init>= <expr><operator>new</operator> <call><name>JPanel</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>adminTabs</name><operator>.</operator><name>addTab</name></name><argument_list>(<argument><expr><literal type="string">"Add a professor"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>addNewProfessor</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>addNewProfessor</name><operator>.</operator><name>setLayout</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>GridLayout</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JLabel</name></type> <name>lblProfessorName</name> <init>= <expr><operator>new</operator> <call><name>JLabel</name><argument_list>(<argument><expr><literal type="string">"Professor name"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>addNewProfessor</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>lblProfessorName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><name>professorNameText</name> <operator>=</operator> <operator>new</operator> <call><name>JTextField</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>addNewProfessor</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>professorNameText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>professorNameText</name><operator>.</operator><name>setColumns</name></name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JLabel</name></type> <name>lblSelectDepartment</name> <init>= <expr><operator>new</operator> <call><name>JLabel</name><argument_list>(<argument><expr><literal type="string">"Select Department"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>addNewProfessor</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>lblSelectDepartment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><name>departmentSelectProfessor</name> <operator>=</operator> <operator>new</operator> <call><name><name>JComboBox</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>DefaultComboBoxModel</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>departmentNameArray</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>addNewProfessor</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>departmentSelectProfessor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JLabel</name></type> <name>lblOfficeLocation</name> <init>= <expr><operator>new</operator> <call><name>JLabel</name><argument_list>(<argument><expr><literal type="string">"Office Location"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>addNewProfessor</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>lblOfficeLocation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><name>txtToBeDecided</name> <operator>=</operator> <operator>new</operator> <call><name>JTextField</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>txtToBeDecided</name><operator>.</operator><name>setEditable</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>txtToBeDecided</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><literal type="string">"To be decided later"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>addNewProfessor</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>txtToBeDecided</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>txtToBeDecided</name><operator>.</operator><name>setColumns</name></name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JLabel</name></type> <name>lblOfficeHours</name> <init>= <expr><operator>new</operator> <call><name>JLabel</name><argument_list>(<argument><expr><literal type="string">"Office Hours"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>addNewProfessor</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>lblOfficeHours</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><name>txtToBeDecided_1</name> <operator>=</operator> <operator>new</operator> <call><name>JTextField</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>txtToBeDecided_1</name><operator>.</operator><name>setEditable</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>txtToBeDecided_1</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><literal type="string">"To be decided later"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>addNewProfessor</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>txtToBeDecided_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>txtToBeDecided_1</name><operator>.</operator><name>setColumns</name></name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JLabel</name></type> <name>lblConfirm</name> <init>= <expr><operator>new</operator> <call><name>JLabel</name><argument_list>(<argument><expr><literal type="string">"Confirm"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>addNewProfessor</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>lblConfirm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JButton</name></type> <name>addProfessorButton</name> <init>= <expr><operator>new</operator> <call><name>JButton</name><argument_list>(<argument><expr><literal type="string">"Add Professor"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>addProfessorButton</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>ActionListener</name></super><argument_list>()</argument_list> <block>{
			<function><type><specifier>public</specifier> <name>void</name></type> <name>actionPerformed</name><parameter_list>(<param><decl><type><name>ActionEvent</name></type> <name>arg0</name></decl></param>)</parameter_list> <block>{
				<decl_stmt><decl><type><name>boolean</name></type> <name>add</name> <init>= <expr><call><name>addProfessor</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if<condition>(<expr><name>add</name></expr>)</condition><then><block>{
					<expr_stmt><expr><call><name>showMessage</name><argument_list>(<argument><expr><literal type="string">"Professor added successfully"</literal></expr></argument>, <argument><expr><literal type="string">"Add successfull"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>initializeEveryThing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				}</block></then>
				<else>else<block>{
					<expr_stmt><expr><call><name>showMessage</name><argument_list>(<argument><expr><literal type="string">"Professor not added"</literal></expr></argument>, <argument><expr><literal type="string">"Add unsuccessfull"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>
			}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name><name>addNewProfessor</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>addProfessorButton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		
		<comment type="line">//-------------------Add a teaching assistant course-------------------//</comment>
		<decl_stmt><decl><type><name>JPanel</name></type> <name>addTeachingAssistant</name> <init>= <expr><operator>new</operator> <call><name>JPanel</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>adminTabs</name><operator>.</operator><name>addTab</name></name><argument_list>(<argument><expr><literal type="string">"Add a TA"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>addTeachingAssistant</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>addTeachingAssistant</name><operator>.</operator><name>setLayout</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><name>taComboBox</name> <operator>=</operator> <operator>new</operator> <call><name><name>JComboBox</name><argument_list type="template">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>taComboBox</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>ActionListener</name></super><argument_list>()</argument_list> <block>{
			<function><type><specifier>public</specifier> <name>void</name></type> <name>actionPerformed</name><parameter_list>(<param><decl><type><name>ActionEvent</name></type> <name>arg0</name></decl></param>)</parameter_list> <block>{
				<if>if<condition>(<expr><call><name><name>taComboBox</name><operator>.</operator><name>getSelectedIndex</name></name><argument_list>()</argument_list></call><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then><block>{
					<expr_stmt><expr><call><name>showMessage</name><argument_list>(<argument><expr><literal type="string">"Select a valid student"</literal></expr></argument>, <argument><expr><literal type="string">"Error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then>
				
				<else>else<block>{
					<decl_stmt><decl><type><name>int</name></type> <name>UIN</name> <init>= <expr><call><name><name>taComboBox</name><operator>.</operator><name>getItemAt</name></name><argument_list>(<argument><expr><call><name><name>taComboBox</name><operator>.</operator><name>getSelectedIndex</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>Student</name></type> <name>student</name></decl>;</decl_stmt>
					<try>try <block>{
						<expr_stmt><expr><name>student</name> <operator>=</operator> <operator>new</operator> <call><name>Student</name><argument_list>(<argument><expr><name>UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name>String</name></type> <name>s</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
						
						<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><literal type="string">"people"</literal></expr></argument>, <argument><expr><literal type="string">"Name"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name><name>student</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
						
						<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"gpa"</literal></expr></argument>, <argument><expr><literal type="string">"student"</literal></expr></argument>, <argument><expr><literal type="string">"GPA"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name>double</name></type> <name>gpa</name> <init>= <expr><call><name><name>student</name><operator>.</operator><name>getGPA</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
						
						<expr_stmt><expr><name>s</name><operator>+=</operator><literal type="string">"Student Name:"</literal><operator>+</operator><name>name</name></expr>;</expr_stmt>
						<expr_stmt><expr><name>s</name><operator>+=</operator><literal type="string">"\nGPA:"</literal><operator>+</operator><name>gpa</name></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name>taStudentDetails</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						
					}</block> <catch>catch <parameter_list>(<param><decl><type><name><name>Student</name><operator>.</operator><name>PersonDoesNotExistException</name></name></type> <name>e2</name></decl></param>)</parameter_list> <block>{
						<expr_stmt><expr><call><name>showMessage</name><argument_list>(<argument><expr><literal type="string">"Not a student"</literal></expr></argument>, <argument><expr><literal type="string">"Error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></catch></try>
					
				}</block></else></if>
				
			}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name><name>DefaultComboBoxModel</name><argument_list type="template">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>allStudentsModel</name> <init>= <expr><operator>new</operator> <call><name><name>DefaultComboBoxModel</name><argument_list type="template">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>Student</name></type> <name>s</name><range>:<expr><name>students</name></expr></range></decl></init>)</control><block>{
			<expr_stmt><expr><call><name><name>allStudentsModel</name><operator>.</operator><name>addElement</name></name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>getUIN</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
		<for>for<control>(<init><decl><type><name>Student</name></type> <name>s</name><range>:<expr><name>tas</name></expr></range></decl></init>)</control><block>{
			<expr_stmt><expr><call><name><name>allStudentsModel</name><operator>.</operator><name>addElement</name></name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>getUIN</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
		<expr_stmt><expr><call><name><name>taComboBox</name><operator>.</operator><name>setModel</name></name><argument_list>(<argument><expr><name>allStudentsModel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>taComboBox</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><literal type="number">373</literal></expr></argument>, <argument><expr><literal type="number">47</literal></expr></argument>, <argument><expr><literal type="number">166</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>addTeachingAssistant</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>taComboBox</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><name>courseOfferIDComboBox</name> <operator>=</operator> <operator>new</operator> <call><name><name>JComboBox</name><argument_list type="template">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>courseOfferIDComboBox</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>ActionListener</name></super><argument_list>()</argument_list> <block>{
			<function><type><specifier>public</specifier> <name>void</name></type> <name>actionPerformed</name><parameter_list>(<param><decl><type><name>ActionEvent</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
				<if>if<condition>(<expr><call><name><name>courseOfferIDComboBox</name><operator>.</operator><name>getSelectedIndex</name></name><argument_list>()</argument_list></call><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then><block>{
					<expr_stmt><expr><call><name>showMessage</name><argument_list>(<argument><expr><literal type="string">"Select a valid course"</literal></expr></argument>, <argument><expr><call><name><name>courseOfferIDComboBox</name><operator>.</operator><name>getSelectedIndex</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then>
				
				<else>else<block>{
					<decl_stmt><decl><type><name>int</name></type> <name>offerID</name> <init>= <expr><call><name><name>courseOfferIDComboBox</name><operator>.</operator><name>getItemAt</name></name><argument_list>(<argument><expr><call><name><name>courseOfferIDComboBox</name><operator>.</operator><name>getSelectedIndex</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>CourseOffered</name></type> <name>co</name></decl>;</decl_stmt>
					<try>try <block>{
						<expr_stmt><expr><name>co</name> <operator>=</operator> <operator>new</operator> <call><name>CourseOffered</name><argument_list>(<argument><expr><name>offerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name>String</name></type> <name>s</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
						
						<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"courseName"</literal></expr></argument>, <argument><expr><literal type="string">"courses"</literal></expr></argument>, <argument><expr><literal type="string">"CourseName"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name>String</name></type> <name>courseName</name> <init>= <expr><call><name><name>co</name><operator>.</operator><name>getCourseName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><name>s</name><operator>+=</operator><literal type="string">"Course Name:"</literal><operator>+</operator><name>courseName</name></expr>;</expr_stmt>
						
						<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"deptName"</literal></expr></argument>, <argument><expr><literal type="string">"department"</literal></expr></argument>, <argument><expr><literal type="string">"DepartmentName"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name>String</name></type> <name>deptName</name> <init>= <expr><call><name><name>co</name><operator>.</operator><name>getDepartmentName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><name>s</name><operator>+=</operator><literal type="string">"\nDepartment:"</literal><operator>+</operator><name>deptName</name></expr>;</expr_stmt>
						
						<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"classLoc"</literal></expr></argument>, <argument><expr><literal type="string">"classroom"</literal></expr></argument>, <argument><expr><literal type="string">"ClassroomLocation"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name>String</name></type> <name>classLoc</name> <init>= <expr><call><name><name>co</name><operator>.</operator><name>getClassRoomLocation</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><name>s</name><operator>+=</operator><literal type="string">"\nClassroom Location:"</literal><operator>+</operator><name>classLoc</name></expr>;</expr_stmt>
						
						<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"className"</literal></expr></argument>, <argument><expr><literal type="string">"classroom"</literal></expr></argument>, <argument><expr><literal type="string">"ClassroomName"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name>String</name></type> <name>className</name> <init>= <expr><call><name><name>co</name><operator>.</operator><name>getClassRoomName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><name>s</name><operator>+=</operator><literal type="string">"\nClasstroom Name:"</literal><operator>+</operator> <name>className</name></expr>;</expr_stmt>
						
						<expr_stmt><expr><name>s</name><operator>+=</operator><literal type="string">"\nTimings:"</literal><operator>+</operator><call><name><name>co</name><operator>.</operator><name>getTiming</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
						
						<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"prof"</literal></expr></argument>, <argument><expr><literal type="string">"people"</literal></expr></argument>, <argument><expr><literal type="string">"Name"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name>String</name></type> <name>prof</name> <init>= <expr><call><name><name>co</name><operator>.</operator><name>getProfessorName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><name>s</name><operator>+=</operator><literal type="string">"\nTaught by professor:"</literal><operator>+</operator><name>prof</name></expr>;</expr_stmt>
						
						<expr_stmt><expr><call><name><name>taCourseDetails</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						
					}</block> <catch>catch <parameter_list>(<param><decl><type><name><name>Course</name><operator>.</operator><name>CourseDoesNotExistException</name></name></type> <name>e1</name></decl></param>)</parameter_list> <block>{
						<expr_stmt><expr><call><name>showMessage</name><argument_list>(<argument><expr><literal type="string">"Select a valid course"</literal></expr></argument>, <argument><expr><call><name><name>courseOfferIDComboBox</name><operator>.</operator><name>getSelectedIndex</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="string">" "</literal><operator>+</operator><name>offerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></catch> <catch>catch <parameter_list>(<param><decl><type><name><name>CourseOffered</name><operator>.</operator><name>CourseOfferingDoesNotExistException</name></name></type> <name>e1</name></decl></param>)</parameter_list> <block>{
						<expr_stmt><expr><call><name>showMessage</name><argument_list>(<argument><expr><literal type="string">"Select a valid course"</literal></expr></argument>, <argument><expr><call><name><name>courseOfferIDComboBox</name><operator>.</operator><name>getSelectedIndex</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="string">" "</literal><operator>+</operator><name>offerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></catch></try>
					
				}</block></else></if>
			}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name><name>DefaultComboBoxModel</name><argument_list type="template">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>allIDsModel</name> <init>= <expr><operator>new</operator> <call><name><name>DefaultComboBoxModel</name><argument_list type="template">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>Integer</name></type> <name>i</name><range>:<expr><call><name><name>coursesOffered</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block>{
			<expr_stmt><expr><call><name><name>allIDsModel</name><operator>.</operator><name>addElement</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
		<expr_stmt><expr><call><name><name>courseOfferIDComboBox</name><operator>.</operator><name>setModel</name></name><argument_list>(<argument><expr><name>allIDsModel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>courseOfferIDComboBox</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><literal type="number">72</literal></expr></argument>, <argument><expr><literal type="number">47</literal></expr></argument>, <argument><expr><literal type="number">166</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>addTeachingAssistant</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>courseOfferIDComboBox</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JButton</name></type> <name>btnAddTa</name> <init>= <expr><operator>new</operator> <call><name>JButton</name><argument_list>(<argument><expr><literal type="string">"Add TA"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>btnAddTa</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>ActionListener</name></super><argument_list>()</argument_list> <block>{
			<function><type><specifier>public</specifier> <name>void</name></type> <name>actionPerformed</name><parameter_list>(<param><decl><type><name>ActionEvent</name></type> <name>arg0</name></decl></param>)</parameter_list> <block>{
				<try>try <block>{
					<if>if<condition>(<expr><call><name><name>taComboBox</name><operator>.</operator><name>getSelectedIndex</name></name><argument_list>()</argument_list></call><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then><block>{
						<expr_stmt><expr><call><name>showMessage</name><argument_list>(<argument><expr><literal type="string">"Select a TA first"</literal></expr></argument>, <argument><expr><literal type="string">"Error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<return>return;</return>
					}</block></then></if>
					
					<if>if<condition>(<expr><call><name><name>courseOfferIDComboBox</name><operator>.</operator><name>getSelectedIndex</name></name><argument_list>()</argument_list></call><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then><block>{
						<expr_stmt><expr><call><name>showMessage</name><argument_list>(<argument><expr><literal type="string">"Select a course first"</literal></expr></argument>, <argument><expr><literal type="string">"Error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<return>return;</return>
					}</block></then></if>
					<decl_stmt><decl><type><name>Student</name></type> <name>s</name> <init>= <expr><operator>new</operator> <call><name>Student</name><argument_list>(<argument><expr><operator>(</operator><name>Integer</name><operator>)</operator> <call><name><name>taComboBox</name><operator>.</operator><name>getSelectedItem</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					
					<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"UIN"</literal></expr></argument>, <argument><expr><literal type="string">"student"</literal></expr></argument>, <argument><expr><literal type="string">"UIN"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name>int</name></type> <name>UIN</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>getUIN</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					
					<expr_stmt><expr><call><name><name>TA</name><operator>.</operator><name>addTAtoTAtable</name></name><argument_list>(<argument><expr><name>UIN</name></expr></argument>,	<argument><expr><operator>(</operator><name>Integer</name><operator>)</operator> <call><name><name>courseOfferIDComboBox</name><operator>.</operator><name>getSelectedItem</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>showMessage</name><argument_list>(<argument><expr><literal type="string">"Added a TA successfully"</literal></expr></argument>, <argument><expr><literal type="string">"Success"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<comment type="line">//DepartmentAdminUI.initializeAllTabs();</comment>
					<expr_stmt><expr><call><name>initializeEveryThing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					
				}</block> <catch>catch <parameter_list>(<param><decl><type><name><name>TA</name><operator>.</operator><name>AlreadyExistsInTAException</name></name></type> <name>e</name></decl></param>)</parameter_list> <block>{
					<expr_stmt><expr><call><name>showMessage</name><argument_list>(<argument><expr><literal type="string">"TA already exists"</literal></expr></argument>, <argument><expr><literal type="string">"Failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				}</block></catch> <catch>catch <parameter_list>(<param><decl><type><name><name>People</name><operator>.</operator><name>PersonDoesNotExistException</name></name></type> <name>e</name></decl></param>)</parameter_list> <block>{
					<comment type="line">// TODO Auto-generated catch block</comment>
					<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				}</block></catch></try>
			}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>btnAddTa</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><literal type="number">257</literal></expr></argument>, <argument><expr><literal type="number">299</literal></expr></argument>, <argument><expr><literal type="number">111</literal></expr></argument>, <argument><expr><literal type="number">63</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>addTeachingAssistant</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>btnAddTa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JLabel</name></type> <name>lblSelectCourseOffering</name> <init>= <expr><operator>new</operator> <call><name>JLabel</name><argument_list>(<argument><expr><literal type="string">"Select Course Offering"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>lblSelectCourseOffering</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><literal type="number">97</literal></expr></argument>, <argument><expr><literal type="number">22</literal></expr></argument>, <argument><expr><literal type="number">113</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>addTeachingAssistant</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>lblSelectCourseOffering</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JLabel</name></type> <name>lblSelectStudent</name> <init>= <expr><operator>new</operator> <call><name>JLabel</name><argument_list>(<argument><expr><literal type="string">"Select student"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>lblSelectStudent</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><literal type="number">407</literal></expr></argument>, <argument><expr><literal type="number">22</literal></expr></argument>, <argument><expr><literal type="number">111</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>addTeachingAssistant</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>lblSelectStudent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><name>taCourseDetails</name> <operator>=</operator> <operator>new</operator> <call><name>JTextPane</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>taCourseDetails</name><operator>.</operator><name>setForeground</name></name><argument_list>(<argument><expr><name><name>Color</name><operator>.</operator><name>WHITE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>taCourseDetails</name><operator>.</operator><name>setBackground</name></name><argument_list>(<argument><expr><name><name>Color</name><operator>.</operator><name>BLACK</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>taCourseDetails</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><literal type="number">41</literal></expr></argument>, <argument><expr><literal type="number">104</literal></expr></argument>, <argument><expr><literal type="number">223</literal></expr></argument>, <argument><expr><literal type="number">165</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>addTeachingAssistant</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>taCourseDetails</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><name>taStudentDetails</name> <operator>=</operator> <operator>new</operator> <call><name>JTextPane</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>taStudentDetails</name><operator>.</operator><name>setBackground</name></name><argument_list>(<argument><expr><name><name>Color</name><operator>.</operator><name>BLACK</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>taStudentDetails</name><operator>.</operator><name>setForeground</name></name><argument_list>(<argument><expr><name><name>Color</name><operator>.</operator><name>WHITE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>taStudentDetails</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><literal type="number">356</literal></expr></argument>, <argument><expr><literal type="number">104</literal></expr></argument>, <argument><expr><literal type="number">212</literal></expr></argument>, <argument><expr><literal type="number">165</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>addTeachingAssistant</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>taStudentDetails</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JPanel</name></type> <name>addAdminPanel</name> <init>= <expr><operator>new</operator> <call><name>JPanel</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>adminTabs</name><operator>.</operator><name>addTab</name></name><argument_list>(<argument><expr><literal type="string">"Add Admin"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>addAdminPanel</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>addAdminPanel</name><operator>.</operator><name>setLayout</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>GridLayout</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JLabel</name></type> <name>lblAdminName</name> <init>= <expr><operator>new</operator> <call><name>JLabel</name><argument_list>(<argument><expr><literal type="string">"Admin Name"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>addAdminPanel</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>lblAdminName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><name>adminName</name> <operator>=</operator> <operator>new</operator> <call><name>JTextField</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>addAdminPanel</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>adminName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>adminName</name><operator>.</operator><name>setColumns</name></name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JLabel</name></type> <name>lblAdminDepartment</name> <init>= <expr><operator>new</operator> <call><name>JLabel</name><argument_list>(<argument><expr><literal type="string">"Admin Department"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>addAdminPanel</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>lblAdminDepartment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><name>adminDeptCombo</name> <operator>=</operator> <operator>new</operator> <call><name><name>JComboBox</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>DefaultComboBoxModel</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>departmentNameArray</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>addAdminPanel</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>adminDeptCombo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JLabel</name></type> <name>lblOfficehours</name> <init>= <expr><operator>new</operator> <call><name>JLabel</name><argument_list>(<argument><expr><literal type="string">"OfficeHours"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>addAdminPanel</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>lblOfficehours</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JLabel</name></type> <name>lblToBeDecided</name> <init>= <expr><operator>new</operator> <call><name>JLabel</name><argument_list>(<argument><expr><literal type="string">"To Be Decided"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>addAdminPanel</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>lblToBeDecided</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JLabel</name></type> <name>lblOfficeLocation_1</name> <init>= <expr><operator>new</operator> <call><name>JLabel</name><argument_list>(<argument><expr><literal type="string">"Office Location"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>addAdminPanel</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>lblOfficeLocation_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JLabel</name></type> <name>lblToBeDecided_1</name> <init>= <expr><operator>new</operator> <call><name>JLabel</name><argument_list>(<argument><expr><literal type="string">"To Be Decided"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>addAdminPanel</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>lblToBeDecided_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JLabel</name></type> <name>lblConfirmChanges</name> <init>= <expr><operator>new</operator> <call><name>JLabel</name><argument_list>(<argument><expr><literal type="string">"Confirm Changes"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>addAdminPanel</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>lblConfirmChanges</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JButton</name></type> <name>btnAddAdmin</name> <init>= <expr><operator>new</operator> <call><name>JButton</name><argument_list>(<argument><expr><literal type="string">"Add Admin"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>btnAddAdmin</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>ActionListener</name></super><argument_list>()</argument_list> <block>{
			<function><type><specifier>public</specifier> <name>void</name></type> <name>actionPerformed</name><parameter_list>(<param><decl><type><name>ActionEvent</name></type> <name>arg0</name></decl></param>)</parameter_list> <block>{
				<decl_stmt><decl><type><name>boolean</name></type> <name>flag</name> <init>= <expr><call><name>addAdmin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if<condition>(<expr><name>flag</name></expr>)</condition><then><block>{
					<expr_stmt><expr><call><name>showMessage</name><argument_list>(<argument><expr><literal type="string">"Added a adming successfully"</literal></expr></argument>, <argument><expr><literal type="string">"Success"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>Database</name><operator>.</operator><name>commitTransaction</name></name><argument_list>(<argument><expr><call><name><name>Database</name><operator>.</operator><name>getConnection</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>initializeEveryThing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					
				}</block></then>
				
				<else>else<block>{
					<expr_stmt><expr><call><name>showMessage</name><argument_list>(<argument><expr><literal type="string">"Not added admin"</literal></expr></argument>, <argument><expr><literal type="string">"Failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>
				
				
				
			}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>addAdminPanel</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>btnAddAdmin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		
		
		
		<decl_stmt><decl><type><specifier>final</specifier> <name>JTabbedPane</name></type> <name>courseSchedule</name> <init>= <expr><operator>new</operator> <call><name>JTabbedPane</name><argument_list>(<argument><expr><name><name>JTabbedPane</name><operator>.</operator><name>TOP</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>managePeople</name><operator>.</operator><name>addTab</name></name><argument_list>(<argument><expr><literal type="string">"Course Scheduling"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>courseSchedule</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JPanel</name></type> <name>currentScheduleTable</name> <init>= <expr><operator>new</operator> <call><name>JPanel</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>currentScheduleTable</name><operator>.</operator><name>setSize</name></name><argument_list>(<argument><expr><name>HEIGHT</name></expr></argument>, <argument><expr><name>WIDTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>courseSchedule</name><operator>.</operator><name>addTab</name></name><argument_list>(<argument><expr><literal type="string">"Current Schedule"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>currentScheduleTable</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>courseSchedule</name><operator>.</operator><name>setEnabledAt</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>currentScheduleTable</name><operator>.</operator><name>setLayout</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JLabel</name></type> <name>lblCourseName</name> <init>= <expr><operator>new</operator> <call><name>JLabel</name><argument_list>(<argument><expr><literal type="string">"Course Name"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>lblCourseName</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">125</literal></expr></argument>, <argument><expr><literal type="number">72</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>currentScheduleTable</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>lblCourseName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JLabel</name></type> <name>lblCourseOfferid</name> <init>= <expr><operator>new</operator> <call><name>JLabel</name><argument_list>(<argument><expr><literal type="string">"Course OfferID"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>lblCourseOfferid</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><literal type="number">137</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">125</literal></expr></argument>, <argument><expr><literal type="number">72</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>currentScheduleTable</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>lblCourseOfferid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JLabel</name></type> <name>lblTaughtBy</name> <init>= <expr><operator>new</operator> <call><name>JLabel</name><argument_list>(<argument><expr><literal type="string">"Taught By"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>lblTaughtBy</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><literal type="number">286</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">125</literal></expr></argument>, <argument><expr><literal type="number">72</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>currentScheduleTable</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>lblTaughtBy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JLabel</name></type> <name>lblClassLocation</name> <init>= <expr><operator>new</operator> <call><name>JLabel</name><argument_list>(<argument><expr><literal type="string">"Class location"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>lblClassLocation</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><literal type="number">437</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">125</literal></expr></argument>, <argument><expr><literal type="number">72</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>currentScheduleTable</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>lblClassLocation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JLabel</name></type> <name>lblClassName</name> <init>= <expr><operator>new</operator> <call><name>JLabel</name><argument_list>(<argument><expr><literal type="string">"Class name"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>lblClassName</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><literal type="number">592</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">125</literal></expr></argument>, <argument><expr><literal type="number">72</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>currentScheduleTable</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>lblClassName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JLabel</name></type> <name>lblTiming</name> <init>= <expr><operator>new</operator> <call><name>JLabel</name><argument_list>(<argument><expr><literal type="string">"Timing"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>lblTiming</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><literal type="number">778</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">125</literal></expr></argument>, <argument><expr><literal type="number">72</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>currentScheduleTable</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>lblTiming</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JScrollPane</name></type> <name>courseNameScrollPane</name> <init>= <expr><operator>new</operator> <call><name>JScrollPane</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>courseNameList</name>  <operator>=</operator> <operator>new</operator> <call><name><name>JList</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>courseNameList</name><operator>.</operator><name>setSelectedIndex</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>courseNameScrollPane</name><operator>.</operator><name>getViewport</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setView</name><argument_list>(<argument><expr><name>courseNameList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>courseNameScrollPane</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">74</literal></expr></argument>, <argument><expr><literal type="number">125</literal></expr></argument>, <argument><expr><literal type="number">211</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>currentScheduleTable</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>courseNameScrollPane</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JScrollPane</name></type> <name>courseOfferIDScrollPane</name> <init>= <expr><operator>new</operator> <call><name>JScrollPane</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>courseOfferIDList</name> <operator>=</operator> <operator>new</operator> <call><name><name>JList</name><argument_list type="template">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>courseOfferIDList</name><operator>.</operator><name>setSelectedIndex</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>courseOfferIDScrollPane</name><operator>.</operator><name>getViewport</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setView</name><argument_list>(<argument><expr><name>courseOfferIDList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>courseOfferIDScrollPane</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><literal type="number">139</literal></expr></argument>, <argument><expr><literal type="number">74</literal></expr></argument>, <argument><expr><literal type="number">125</literal></expr></argument>, <argument><expr><literal type="number">211</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>currentScheduleTable</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>courseOfferIDScrollPane</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JScrollPane</name></type> <name>taughtByScrollPane</name> <init>= <expr><operator>new</operator> <call><name>JScrollPane</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>professorNameList</name> <operator>=</operator> <operator>new</operator> <call><name><name>JList</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>professorNameList</name><operator>.</operator><name>setSelectedIndex</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>taughtByScrollPane</name><operator>.</operator><name>getViewport</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setView</name><argument_list>(<argument><expr><name>professorNameList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>taughtByScrollPane</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><literal type="number">286</literal></expr></argument>, <argument><expr><literal type="number">74</literal></expr></argument>, <argument><expr><literal type="number">125</literal></expr></argument>, <argument><expr><literal type="number">211</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>currentScheduleTable</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>taughtByScrollPane</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JScrollPane</name></type> <name>classLocationScrollPane</name> <init>= <expr><operator>new</operator> <call><name>JScrollPane</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>classLocationList</name> <operator>=</operator> <operator>new</operator> <call><name><name>JList</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>classLocationList</name><operator>.</operator><name>setSelectedIndex</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>classLocationScrollPane</name><operator>.</operator><name>getViewport</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setView</name><argument_list>(<argument><expr><name>classLocationList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>classLocationScrollPane</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><literal type="number">437</literal></expr></argument>, <argument><expr><literal type="number">74</literal></expr></argument>, <argument><expr><literal type="number">125</literal></expr></argument>, <argument><expr><literal type="number">211</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>currentScheduleTable</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>classLocationScrollPane</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JScrollPane</name></type> <name>classNameScrollPane</name> <init>= <expr><operator>new</operator> <call><name>JScrollPane</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>classNameList</name> <operator>=</operator> <operator>new</operator> <call><name><name>JList</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>classNameList</name><operator>.</operator><name>setSelectedIndex</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>classNameScrollPane</name><operator>.</operator><name>getViewport</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setView</name><argument_list>(<argument><expr><name>classNameList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>classNameScrollPane</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><literal type="number">592</literal></expr></argument>, <argument><expr><literal type="number">74</literal></expr></argument>, <argument><expr><literal type="number">125</literal></expr></argument>, <argument><expr><literal type="number">211</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>currentScheduleTable</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>classNameScrollPane</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JScrollPane</name></type> <name>timingScrollPane</name> <init>= <expr><operator>new</operator> <call><name>JScrollPane</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>classTimingList</name> <operator>=</operator> <operator>new</operator> <call><name><name>JList</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>classTimingList</name><operator>.</operator><name>setSelectedIndex</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>timingScrollPane</name><operator>.</operator><name>getViewport</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setView</name><argument_list>(<argument><expr><name>classTimingList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>timingScrollPane</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><literal type="number">737</literal></expr></argument>, <argument><expr><literal type="number">74</literal></expr></argument>, <argument><expr><literal type="number">166</literal></expr></argument>, <argument><expr><literal type="number">211</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>currentScheduleTable</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>timingScrollPane</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><specifier>final</specifier> <name>JButton</name></type> <name>btnNewButton</name> <init>= <expr><operator>new</operator> <call><name>JButton</name><argument_list>(<argument><expr><literal type="string">"Reschedule all courses"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>btnNewButton</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><literal type="number">214</literal></expr></argument>, <argument><expr><literal type="number">305</literal></expr></argument>, <argument><expr><literal type="number">356</literal></expr></argument>, <argument><expr><literal type="number">41</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>currentScheduleTable</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>btnNewButton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>btnNewButton</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>ActionListener</name></super><argument_list>()</argument_list> <block>{
			<function><type><specifier>public</specifier> <name>void</name></type> <name>actionPerformed</name><parameter_list>(<param><decl><type><name>ActionEvent</name></type> <name>arg0</name></decl></param>)</parameter_list> <block>{
				<expr_stmt><expr><call><name><name>btnNewButton</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><literal type="string">"Refreshing and rescheduling"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><name>JDialog</name></type> <name>jd</name> <init>= <expr><operator>new</operator> <call><name>JDialog</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>jd</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><literal type="string">"Rescheduling, please wait"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>jd</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><call><name>getBounds</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>jd</name><operator>.</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>				
				<expr_stmt><expr><call><name><name>courseSchedule</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>CourseSchedule</name><operator>.</operator><name>scheduleAllCurrentCourses</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<try>try <block>{
					<expr_stmt><expr><call><name><name>Thread</name><operator>.</operator><name>sleep</name></name><argument_list>(<argument><expr><literal type="number">5000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block> <catch>catch <parameter_list>(<param><decl><type><name>InterruptedException</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
					<comment type="line">// TODO Auto-generated catch block</comment>
					<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				}</block></catch></try>
				<expr_stmt><expr><call><name>initializeBackgroundData</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>initializeJListsForCourseSchedule</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<if>if<condition>(<expr><call><name><name>courseScheduledCombo</name><operator>.</operator><name>getModel</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSize</name><argument_list>()</argument_list></call><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then><block>{
					<expr_stmt><expr><call><name>initilizeSingleRescheduleTab</name><argument_list>(<argument><expr><operator>(</operator><name>Integer</name><operator>)</operator><call><name><name>courseScheduledCombo</name><operator>.</operator><name>getSelectedItem</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name>ClassroomLocation</name></type> <name>l</name> <init>= <expr><call><name><name>ClassroomLocation</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator><call><name><name>classLocationCombo</name><operator>.</operator><name>getSelectedItem</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>int</name></type> <name>timeSlotType</name> <init>= <expr><call><name><name>timeSlotTypeCombo</name><operator>.</operator><name>getSelectedIndex</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>CourseOffered</name></type> <name>co</name> <init>= <expr><call><name><name>coursesOffered</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><operator>(</operator><name>Integer</name><operator>)</operator><call><name><name>courseScheduledCombo</name><operator>.</operator><name>getSelectedItem</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>int</name></type> <name>cap</name> <init>= <expr><call><name><name>co</name><operator>.</operator><name>getTotalCapacity</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name>initializeEmptyClassAndTimeSlot</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>timeSlotType</name></expr></argument>, <argument><expr><name>cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				
				<expr_stmt><expr><call><name><name>jd</name><operator>.</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>btnNewButton</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>btnNewButton</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><literal type="string">"Reschedule all courses"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>courseSchedule</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				
			}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JPanel</name></type> <name>rescheduleIndividual</name> <init>= <expr><operator>new</operator> <call><name>JPanel</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>courseSchedule</name><operator>.</operator><name>addTab</name></name><argument_list>(<argument><expr><literal type="string">"Reschedule Single Course"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>rescheduleIndividual</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>rescheduleIndividual</name><operator>.</operator><name>setLayout</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><name>courseScheduledCombo</name> <operator>=</operator> <operator>new</operator> <call><name><name>JComboBox</name><argument_list type="template">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>		
		<expr_stmt><expr><call><name><name>courseScheduledCombo</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>ActionListener</name></super><argument_list>()</argument_list> <block>{
			<function><type><specifier>public</specifier> <name>void</name></type> <name>actionPerformed</name><parameter_list>(<param><decl><type><name>ActionEvent</name></type> <name>arg0</name></decl></param>)</parameter_list> <block>{
				<if>if<condition>(<expr><call><name><name>courseScheduledCombo</name><operator>.</operator><name>getModel</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSize</name><argument_list>()</argument_list></call><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then>
					<block type="pseudo"><expr_stmt><expr><call><name>initilizeSingleRescheduleTab</name><argument_list>(<argument><expr><operator>(</operator><name>Integer</name><operator>)</operator><call><name><name>courseScheduledCombo</name><operator>.</operator><name>getSelectedItem</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
				<comment type="line">//Add available locations, classrooms, </comment>
			}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>courseScheduledCombo</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>, <argument><expr><literal type="number">38</literal></expr></argument>, <argument><expr><literal type="number">159</literal></expr></argument>, <argument><expr><literal type="number">29</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>rescheduleIndividual</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>courseScheduledCombo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><name>timeSlotTypeCombo</name> <operator>=</operator> <operator>new</operator> <call><name><name>JComboBox</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>DefaultComboBoxModel</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><literal type="string">"M-W-F"</literal></expr>, <expr><literal type="string">"T-Th"</literal></expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>timeSlotTypeCombo</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>ActionListener</name></super><argument_list>()</argument_list> <block>{
			<function><type><specifier>public</specifier> <name>void</name></type> <name>actionPerformed</name><parameter_list>(<param><decl><type><name>ActionEvent</name></type> <name>arg0</name></decl></param>)</parameter_list> <block>{
				<expr_stmt><expr><call><name><name>classRoomCombo</name><operator>.</operator><name>setModel</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>DefaultComboBoxModel</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>timingAvailableCombo</name><operator>.</operator><name>setModel</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>DefaultComboBoxModel</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>timeSlotTypeCombo</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><literal type="number">587</literal></expr></argument>, <argument><expr><literal type="number">84</literal></expr></argument>, <argument><expr><literal type="number">164</literal></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>rescheduleIndividual</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>timeSlotTypeCombo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><name>classLocationCombo</name> <operator>=</operator> <operator>new</operator> <call><name><name>JComboBox</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>DefaultComboBoxModel</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>ClassroomLocation</name><operator>.</operator><name>getAllLocations</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>classLocationCombo</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>ActionListener</name></super><argument_list>()</argument_list> <block>{
			<function><type><specifier>public</specifier> <name>void</name></type> <name>actionPerformed</name><parameter_list>(<param><decl><type><name>ActionEvent</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
				<expr_stmt><expr><call><name><name>classRoomCombo</name><operator>.</operator><name>setModel</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>DefaultComboBoxModel</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>timingAvailableCombo</name><operator>.</operator><name>setModel</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>DefaultComboBoxModel</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>classLocationCombo</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><literal type="number">587</literal></expr></argument>, <argument><expr><literal type="number">131</literal></expr></argument>, <argument><expr><literal type="number">164</literal></expr></argument>, <argument><expr><literal type="number">29</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>rescheduleIndividual</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>classLocationCombo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><name>classRoomCombo</name> <operator>=</operator> <operator>new</operator> <call><name><name>JComboBox</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>classRoomCombo</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>ActionListener</name></super><argument_list>()</argument_list> <block>{
			<function><type><specifier>public</specifier> <name>void</name></type> <name>actionPerformed</name><parameter_list>(<param><decl><type><name>ActionEvent</name></type> <name>arg0</name></decl></param>)</parameter_list> <block>{
				<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><call><name><name>classRoomCombo</name><operator>.</operator><name>getSelectedIndex</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
				<for>for<control>(<init><decl><type><name>Classroom</name></type> <name>c</name><range>:<expr><call><name><name>classroomAndTimeslots</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block>{
					<decl_stmt><decl><type><name>Classroom</name></type> <name>newClassroom</name> <init>= <expr><name>c</name></expr></init></decl>;</decl_stmt>
					<if>if<condition>(<expr><name>count</name> <operator>==</operator> <name>index</name></expr>)</condition><then><block>{
						<expr_stmt><expr><call><name>initializeEmptyTimeSlotCombo</name><argument_list>(<argument><expr><name>newClassroom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>
					}</block></then>
					<else>else
						<block type="pseudo"><expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt></block></else></if>
				}</block></for>
			}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>classRoomCombo</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><literal type="number">588</literal></expr></argument>, <argument><expr><literal type="number">225</literal></expr></argument>, <argument><expr><literal type="number">164</literal></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>rescheduleIndividual</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>classRoomCombo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><name>timingAvailableCombo</name> <operator>=</operator> <operator>new</operator> <call><name><name>JComboBox</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>timingAvailableCombo</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><literal type="number">588</literal></expr></argument>, <argument><expr><literal type="number">272</literal></expr></argument>, <argument><expr><literal type="number">164</literal></expr></argument>, <argument><expr><literal type="number">35</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>rescheduleIndividual</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>timingAvailableCombo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JLabel</name></type> <name>lblType</name> <init>= <expr><operator>new</operator> <call><name>JLabel</name><argument_list>(<argument><expr><literal type="string">"Type"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>lblType</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><literal type="number">520</literal></expr></argument>, <argument><expr><literal type="number">93</literal></expr></argument>, <argument><expr><literal type="number">46</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>rescheduleIndividual</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>lblType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JLabel</name></type> <name>lblLocation</name> <init>= <expr><operator>new</operator> <call><name>JLabel</name><argument_list>(<argument><expr><literal type="string">"Location"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>lblLocation</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><literal type="number">520</literal></expr></argument>, <argument><expr><literal type="number">137</literal></expr></argument>, <argument><expr><literal type="number">46</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>rescheduleIndividual</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>lblLocation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JLabel</name></type> <name>lblClassroom</name> <init>= <expr><operator>new</operator> <call><name>JLabel</name><argument_list>(<argument><expr><literal type="string">"Classroom"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>lblClassroom</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><literal type="number">520</literal></expr></argument>, <argument><expr><literal type="number">232</literal></expr></argument>, <argument><expr><literal type="number">65</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>rescheduleIndividual</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>lblClassroom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JLabel</name></type> <name>lblTimingsAvailable</name> <init>= <expr><operator>new</operator> <call><name>JLabel</name><argument_list>(<argument><expr><literal type="string">"Timings Available"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>lblTimingsAvailable</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><literal type="number">499</literal></expr></argument>, <argument><expr><literal type="number">281</literal></expr></argument>, <argument><expr><literal type="number">81</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>rescheduleIndividual</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>lblTimingsAvailable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><name>courseScheduleTextPane</name> <operator>=</operator> <operator>new</operator> <call><name>JTextPane</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>courseScheduleTextPane</name><operator>.</operator><name>setFont</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Font</name><argument_list>(<argument><expr><literal type="string">"Times New Roman"</literal></expr></argument>, <argument><expr><name><name>Font</name><operator>.</operator><name>BOLD</name></name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>courseScheduleTextPane</name><operator>.</operator><name>setForeground</name></name><argument_list>(<argument><expr><name><name>Color</name><operator>.</operator><name>WHITE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>courseScheduleTextPane</name><operator>.</operator><name>setBackground</name></name><argument_list>(<argument><expr><name><name>Color</name><operator>.</operator><name>BLACK</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>courseScheduleTextPane</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>, <argument><expr><literal type="number">87</literal></expr></argument>, <argument><expr><literal type="number">278</literal></expr></argument>, <argument><expr><literal type="number">186</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>rescheduleIndividual</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>courseScheduleTextPane</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JButton</name></type> <name>btnSearchAvailable</name> <init>= <expr><operator>new</operator> <call><name>JButton</name><argument_list>(<argument><expr><literal type="string">"Search available"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>btnSearchAvailable</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>ActionListener</name></super><argument_list>()</argument_list> <block>{
			<function><type><specifier>public</specifier> <name>void</name></type> <name>actionPerformed</name><parameter_list>(<param><decl><type><name>ActionEvent</name></type> <name>arg0</name></decl></param>)</parameter_list> <block>{
				<if>if<condition>(<expr><call><name><name>courseScheduledCombo</name><operator>.</operator><name>getModel</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSize</name><argument_list>()</argument_list></call><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then><block>{
					<decl_stmt><decl><type><name>ClassroomLocation</name></type> <name>l</name> <init>= <expr><call><name><name>ClassroomLocation</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator><call><name><name>classLocationCombo</name><operator>.</operator><name>getSelectedItem</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>int</name></type> <name>timeSlotType</name> <init>= <expr><call><name><name>timeSlotTypeCombo</name><operator>.</operator><name>getSelectedIndex</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>CourseOffered</name></type> <name>co</name> <init>= <expr><call><name><name>coursesOffered</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><operator>(</operator><name>Integer</name><operator>)</operator><call><name><name>courseScheduledCombo</name><operator>.</operator><name>getSelectedItem</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>int</name></type> <name>cap</name> <init>= <expr><call><name><name>co</name><operator>.</operator><name>getTotalCapacity</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name>initializeEmptyClassAndTimeSlot</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>timeSlotType</name></expr></argument>, <argument><expr><name>cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then>
				
				<else>else<block>{
					<expr_stmt><expr><call><name>showMessage</name><argument_list>(<argument><expr><literal type="string">"No course offering selected"</literal></expr></argument>, <argument><expr><literal type="string">"Error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>
			}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>btnSearchAvailable</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><literal type="number">587</literal></expr></argument>, <argument><expr><literal type="number">177</literal></expr></argument>, <argument><expr><literal type="number">164</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>rescheduleIndividual</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>btnSearchAvailable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JButton</name></type> <name>btnUpdateSelectedCourse</name> <init>= <expr><operator>new</operator> <call><name>JButton</name><argument_list>(<argument><expr><literal type="string">"Update selected course with above selected timings"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>btnUpdateSelectedCourse</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>ActionListener</name></super><argument_list>()</argument_list> <block>{
			<function><type><specifier>public</specifier> <name>void</name></type> <name>actionPerformed</name><parameter_list>(<param><decl><type><name>ActionEvent</name></type> <name>arg0</name></decl></param>)</parameter_list> <block>{
				<if>if<condition>(<expr><call><name><name>courseScheduledCombo</name><operator>.</operator><name>getModel</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSize</name><argument_list>()</argument_list></call><operator>&lt;=</operator><literal type="number">0</literal></expr>)</condition><then><block>{
					<expr_stmt><expr><call><name>showMessage</name><argument_list>(<argument><expr><literal type="string">"No course offering selected"</literal></expr></argument>, <argument><expr><literal type="string">"Error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return>return;</return>
				}</block></then></if>
				
				<decl_stmt><decl><type><name>int</name></type> <name>OfferID</name> <init>= <expr><operator>(</operator><name>Integer</name><operator>)</operator><call><name><name>courseScheduledCombo</name><operator>.</operator><name>getSelectedItem</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>CourseOffered</name></type> <name>c</name> <init>= <expr><call><name><name>coursesOffered</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>OfferID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>Classroom</name></type> <name>newClassroom</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>Timeslots</name></type> <name>newTimeslot</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>int</name></type> <name>classRoomSelectedIndex</name> <init>= <expr><call><name><name>classRoomCombo</name><operator>.</operator><name>getSelectedIndex</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>int</name></type> <name>timeSlotSelectedIndex</name> <init>= <expr><call><name><name>timingAvailableCombo</name><operator>.</operator><name>getSelectedIndex</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				
				<if>if<condition>(<expr><name>classRoomSelectedIndex</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
					<expr_stmt><expr><call><name>showMessage</name><argument_list>(<argument><expr><literal type="string">"Select a classroom first"</literal></expr></argument>, <argument><expr><literal type="string">"Error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return>return;</return>
				}</block></then>
				
				<elseif>else <if>if<condition>(<expr><name>timeSlotSelectedIndex</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
					<expr_stmt><expr><call><name>showMessage</name><argument_list>(<argument><expr><literal type="string">"Select a time slot first"</literal></expr></argument>, <argument><expr><literal type="string">"Error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return>return;</return>
				}</block></then></if></elseif></if>
				
				<for>for<control>(<init><decl><type><name>Classroom</name></type> <name>classroom</name><range>:<expr><call><name><name>classroomAndTimeslots</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block>{
					<expr_stmt><expr><name>newClassroom</name> <operator>=</operator> <name>classroom</name></expr>;</expr_stmt>
					<if>if<condition>(<expr><name>count</name> <operator>==</operator> <name>classRoomSelectedIndex</name></expr>)</condition><then><block>{
						<break>break;</break>
					}</block></then>
					<else>else
						<block type="pseudo"><expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt></block></else></if>
				}</block></for>
				
				<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<for>for<control>(<init><decl><type><name>Timeslots</name></type> <name>t</name> <range>: <expr><call><name><name>classroomAndTimeslots</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>newClassroom</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control><block>{
					<expr_stmt><expr><name>newTimeslot</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
					<if>if<condition>(<expr><name>count</name> <operator>==</operator> <name>timeSlotSelectedIndex</name></expr>)</condition><then><block>{
						<break>break;</break>
					}</block></then>
					<else>else
						<block type="pseudo"><expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt></block></else></if>
				}</block></for>
				
				<expr_stmt><expr><call><name>updateCourseSchedule</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>newClassroom</name></expr></argument>, <argument><expr><name>newTimeslot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				
			}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>btnUpdateSelectedCourse</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><literal type="number">371</literal></expr></argument>, <argument><expr><literal type="number">361</literal></expr></argument>, <argument><expr><literal type="number">441</literal></expr></argument>, <argument><expr><literal type="number">48</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>rescheduleIndividual</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>btnUpdateSelectedCourse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JLabel</name></type> <name>lblNewLabel_5</name> <init>= <expr><operator>new</operator> <call><name>JLabel</name><argument_list>(<argument><expr><literal type="string">"Select course offering"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>lblNewLabel_5</name><operator>.</operator><name>setFont</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Font</name><argument_list>(<argument><expr><literal type="string">"Tahoma"</literal></expr></argument>, <argument><expr><name><name>Font</name><operator>.</operator><name>PLAIN</name></name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>lblNewLabel_5</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><literal type="number">165</literal></expr></argument>, <argument><expr><literal type="number">21</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>rescheduleIndividual</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>lblNewLabel_5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		
		<comment type="line">//--------------------------------------------------------</comment>
		<comment type="line">//--------------------Offer Tab Code----------------------</comment>
		<comment type="line">//--------------------------------------------------------</comment>
		<decl_stmt><decl><type><name>JPanel</name></type> <name>offerCourseTab</name> <init>= <expr><operator>new</operator> <call><name>JPanel</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>managePeople</name><operator>.</operator><name>addTab</name></name><argument_list>(<argument><expr><literal type="string">"Offer Courses"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>offerCourseTab</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>offerCourseTab</name><operator>.</operator><name>setLayout</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><name>allDepartmentsCombo</name> <operator>=</operator> <operator>new</operator> <call><name><name>JComboBox</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>allDepartmentsCombo</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>ActionListener</name></super><argument_list>()</argument_list> <block>{
			<function><type><specifier>public</specifier> <name>void</name></type> <name>actionPerformed</name><parameter_list>(<param><decl><type><name>ActionEvent</name></type> <name>arg0</name></decl></param>)</parameter_list> <block>{
				<try>try <block>{
					<decl_stmt><decl><type><name>Department</name></type> <name>d</name><init>= <expr><operator>new</operator> <call><name>Department</name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator><call><name><name>allDepartmentsCombo</name><operator>.</operator><name>getSelectedItem</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="template">&lt;<argument><name>Course</name></argument>&gt;</argument_list></name></type> <name>deptCourses</name> <init>= <expr><call><name><name>Course</name><operator>.</operator><name>getCoursesOfDepartment</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="template">&lt;<argument><name>Professor</name></argument>&gt;</argument_list></name></type> <name>deptProfessor</name> <init>= <expr><call><name><name>Professor</name><operator>.</operator><name>getAllProfInADept</name></name><argument_list>(<argument><expr><call><name><name>d</name><operator>.</operator><name>getDepartmentID</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					
					<decl_stmt><decl><type><name><name>DefaultComboBoxModel</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>modelCourse</name> <init>= <expr><operator>new</operator> <call><name><name>DefaultComboBoxModel</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name><name>DefaultComboBoxModel</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>modelProfessor</name> <init>= <expr><operator>new</operator> <call><name><name>DefaultComboBoxModel</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					
					<if>if<condition>(<expr><call><name><name>deptCourses</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
						<block type="pseudo"><expr_stmt><expr><call><name><name>allCoursesCombo</name><operator>.</operator><name>setModel</name></name><argument_list>(<argument><expr><name>modelCourse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
					
					<if>if<condition>(<expr><call><name><name>deptProfessor</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
						<block type="pseudo"><expr_stmt><expr><call><name><name>allProfessorCombo</name><operator>.</operator><name>setModel</name></name><argument_list>(<argument><expr><name>modelProfessor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
					
					<for>for<control>(<init><decl><type><name>Course</name></type> <name>c</name><range>:<expr><name>deptCourses</name></expr></range></decl></init>)</control><block>{
						<expr_stmt><expr><call><name><name>modelCourse</name><operator>.</operator><name>addElement</name></name><argument_list>(<argument><expr><call><name><name>c</name><operator>.</operator><name>getCourseName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name>allCoursesCombo</name><operator>.</operator><name>setModel</name></name><argument_list>(<argument><expr><name>modelCourse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></for>
					
					<for>for<control>(<init><decl><type><name>Professor</name></type> <name>p</name><range>:<expr><name>deptProfessor</name></expr></range></decl></init>)</control><block>{
						<expr_stmt><expr><call><name><name>modelProfessor</name><operator>.</operator><name>addElement</name></name><argument_list>(<argument><expr><call><name><name>p</name><operator>.</operator><name>getUserName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name>allProfessorCombo</name><operator>.</operator><name>setModel</name></name><argument_list>(<argument><expr><name>modelProfessor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></for>
					
					
				}</block> <catch>catch <parameter_list>(<param><decl><type><name><name>Department</name><operator>.</operator><name>DepartmentDoesNotExistException</name></name></type> <name>e</name></decl></param>)</parameter_list> <block>{
					<comment type="line">// TODO Auto-generated catch block</comment>
					<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				}</block></catch> <catch>catch <parameter_list>(<param><decl><type><name><name>Professor</name><operator>.</operator><name>ProfessorDoesNotExistException</name></name></type> <name>e</name></decl></param>)</parameter_list> <block>{
					<comment type="line">// TODO Auto-generated catch block</comment>
					<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				}</block></catch></try>
			}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>allDepartmentsCombo</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><literal type="number">27</literal></expr></argument>, <argument><expr><literal type="number">57</literal></expr></argument>, <argument><expr><literal type="number">147</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>offerCourseTab</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>allDepartmentsCombo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><name>allCoursesCombo</name> <operator>=</operator> <operator>new</operator> <call><name><name>JComboBox</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>allCoursesCombo</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><literal type="number">226</literal></expr></argument>, <argument><expr><literal type="number">57</literal></expr></argument>, <argument><expr><literal type="number">138</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>offerCourseTab</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>allCoursesCombo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><name>allProfessorCombo</name> <operator>=</operator> <operator>new</operator> <call><name><name>JComboBox</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>allProfessorCombo</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><literal type="number">430</literal></expr></argument>, <argument><expr><literal type="number">56</literal></expr></argument>, <argument><expr><literal type="number">156</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>offerCourseTab</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>allProfessorCombo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><name>classCapacity</name> <operator>=</operator> <operator>new</operator> <call><name><name>JComboBox</name><argument_list type="template">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>DefaultComboBoxModel</name><argument_list type="template">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>new</operator> <name><name>Integer</name><index>[]</index></name> <block>{<expr><literal type="number">5</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">10</literal></expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>classCapacity</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><literal type="number">637</literal></expr></argument>, <argument><expr><literal type="number">56</literal></expr></argument>, <argument><expr><literal type="number">127</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>offerCourseTab</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>classCapacity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JLabel</name></type> <name>lblCourseNames</name> <init>= <expr><operator>new</operator> <call><name>JLabel</name><argument_list>(<argument><expr><literal type="string">"Department"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>lblCourseNames</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="number">33</literal></expr></argument>, <argument><expr><literal type="number">107</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>offerCourseTab</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>lblCourseNames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JLabel</name></type> <name>lblNewLabel_3</name> <init>= <expr><operator>new</operator> <call><name>JLabel</name><argument_list>(<argument><expr><literal type="string">"Courses"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>lblNewLabel_3</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><literal type="number">256</literal></expr></argument>, <argument><expr><literal type="number">34</literal></expr></argument>, <argument><expr><literal type="number">97</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>offerCourseTab</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>lblNewLabel_3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JLabel</name></type> <name>lblTotalCapacity</name> <init>= <expr><operator>new</operator> <call><name>JLabel</name><argument_list>(<argument><expr><literal type="string">"Professor"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>lblTotalCapacity</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><literal type="number">462</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">107</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>offerCourseTab</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>lblTotalCapacity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JLabel</name></type> <name>lblTotalCapacity_1</name> <init>= <expr><operator>new</operator> <call><name>JLabel</name><argument_list>(<argument><expr><literal type="string">"Total Capacity"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>lblTotalCapacity_1</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><literal type="number">636</literal></expr></argument>, <argument><expr><literal type="number">27</literal></expr></argument>, <argument><expr><literal type="number">84</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>offerCourseTab</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>lblTotalCapacity_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JButton</name></type> <name>btnNewButton_1</name> <init>= <expr><operator>new</operator> <call><name>JButton</name><argument_list>(<argument><expr><literal type="string">"Offer this course"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>btnNewButton_1</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>ActionListener</name></super><argument_list>()</argument_list> <block>{
			<function><type><specifier>public</specifier> <name>void</name></type> <name>actionPerformed</name><parameter_list>(<param><decl><type><name>ActionEvent</name></type> <name>arg0</name></decl></param>)</parameter_list> <block>{
				<if>if<condition>(<expr><call><name><name>allProfessorCombo</name><operator>.</operator><name>getModel</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSize</name><argument_list>()</argument_list></call><operator>&lt;=</operator><literal type="number">0</literal></expr>)</condition><then><block>{
					<expr_stmt><expr><call><name>showMessage</name><argument_list>(<argument><expr><literal type="string">"No professors in this department"</literal></expr></argument>, <argument><expr><literal type="string">"Error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return>return;</return>
				}</block></then></if>
				
				<if>if<condition>(<expr><call><name><name>allDepartmentsCombo</name><operator>.</operator><name>getModel</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSize</name><argument_list>()</argument_list></call><operator>&lt;=</operator><literal type="number">0</literal></expr>)</condition><then><block>{
					<expr_stmt><expr><call><name>showMessage</name><argument_list>(<argument><expr><literal type="string">"Department does not exist"</literal></expr></argument>, <argument><expr><literal type="string">"Error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return>return;</return>
				}</block></then></if>
				
				<if>if<condition>(<expr><call><name><name>allCoursesCombo</name><operator>.</operator><name>getModel</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSize</name><argument_list>()</argument_list></call><operator>&lt;=</operator><literal type="number">0</literal></expr>)</condition><then><block>{
					<expr_stmt><expr><call><name>showMessage</name><argument_list>(<argument><expr><literal type="string">"Course list empty"</literal></expr></argument>, <argument><expr><literal type="string">"Error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return>return;</return>
				}</block></then></if>
				
				<try>try <block>{
					<decl_stmt><decl><type><name>Course</name></type> <name>course</name> <init>= <expr><operator>new</operator> <call><name>Course</name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator><call><name><name>allCoursesCombo</name><operator>.</operator><name>getSelectedItem</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>Professor</name></type> <name>professor</name> <init>= <expr><operator>new</operator> <call><name>Professor</name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator><call><name><name>allProfessorCombo</name><operator>.</operator><name>getSelectedItem</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>int</name></type> <name>expectedCapacity</name> <init>= <expr><operator>(</operator><name>Integer</name><operator>)</operator><call><name><name>classCapacity</name><operator>.</operator><name>getSelectedItem</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>	
					<try>try <block>{
						<decl_stmt><decl><type><name>boolean</name></type> <name>flag</name> <init>= <expr><call><name><name>CourseOffered</name><operator>.</operator><name>addCourseOfferingToDatabase</name></name><argument_list>(<argument><expr><name>course</name></expr></argument>, <argument><expr><name>professor</name></expr></argument>, <argument><expr><name>expectedCapacity</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<if>if<condition>(<expr><name>flag</name></expr>)</condition><then>
							<block type="pseudo"><expr_stmt><expr><call><name>showMessage</name><argument_list>(<argument><expr><literal type="string">"Successfully added the new offering"</literal></expr></argument>, <argument><expr><literal type="string">"Success"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
						<else>else
							<block type="pseudo"><expr_stmt><expr><call><name>showMessage</name><argument_list>(<argument><expr><literal type="string">"Error adding course offering"</literal></expr></argument>, <argument><expr><literal type="string">"Failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
					}</block> <catch>catch <parameter_list>(<param><decl><type><name><name>CourseOffered</name><operator>.</operator><name>CourseOfferingAlreadyExistsException</name></name></type> <name>e</name></decl></param>)</parameter_list> <block>{
						<expr_stmt><expr><call><name>showMessage</name><argument_list>(<argument><expr><literal type="string">"CourseOffering with same parameters already exists"</literal></expr></argument>, <argument><expr><literal type="string">"Duplicate Offering"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<comment type="line">//e.printStackTrace();</comment>
					}</block></catch> <catch>catch <parameter_list>(<param><decl><type><name><name>CourseOffered</name><operator>.</operator><name>CourseOfferingNotSchedulable</name></name></type> <name>e</name></decl></param>)</parameter_list> <block>{
						<expr_stmt><expr><call><name>showMessage</name><argument_list>(<argument><expr><literal type="string">"CourseOffering not added as there are no empty class"</literal>
								<operator>+</operator> <literal type="string">" rooms available"</literal></expr></argument>, <argument><expr><literal type="string">"Classrooms full"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<comment type="line">//e.printStackTrace();</comment>
					}</block></catch></try>
					
				}</block> <catch>catch <parameter_list>(<param><decl><type><name><name>Course</name><operator>.</operator><name>CourseDoesNotExistException</name></name></type> <name>e</name></decl></param>)</parameter_list> <block>{
					<if>if<condition>(<expr><name>e</name> <operator>instanceof</operator> <name><name>Course</name><operator>.</operator><name>CourseDoesNotExistException</name></name></expr>)</condition><then><block>{
						<expr_stmt><expr><call><name>showMessage</name><argument_list>(<argument><expr><literal type="string">"Error Retrieving Course"</literal></expr></argument>, <argument><expr><literal type="string">"Offering not added"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then>
					<else>else<block>{
						<expr_stmt><expr><call><name>showMessage</name><argument_list>(<argument><expr><literal type="string">"Error Retrieving Professor"</literal></expr></argument>, <argument><expr><literal type="string">"Offering not added"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></else></if>
					<comment type="line">//e.printStackTrace();</comment>
				}</block></catch>
				
				<finally>finally<block>{
					<expr_stmt><expr><call><name>initializeEveryThing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				}</block></finally></try>
			}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>btnNewButton_1</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><literal type="number">282</literal></expr></argument>, <argument><expr><literal type="number">130</literal></expr></argument>, <argument><expr><literal type="number">245</literal></expr></argument>, <argument><expr><literal type="number">59</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>offerCourseTab</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>btnNewButton_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><name>manageCourseInstance</name> <operator>=</operator> <call><name><name>manageCourse</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>JTabbedPane</name></type> <name>courseManagementPane</name> <init>= <expr><name>manageCourseInstance</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>managePeople</name><operator>.</operator><name>addTab</name></name><argument_list>(<argument><expr><literal type="string">"Manage Courses"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>courseManagementPane</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		
		<comment type="line">//--------------------------------------------------------</comment>
		<comment type="line">//--------------------Wait list monitor----------------------</comment>
		<comment type="line">//--------------------------------------------------------</comment>
		<decl_stmt><decl><type><name>JPanel</name></type> <name>waitListMonitor</name> <init>= <expr><operator>new</operator> <call><name>JPanel</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>managePeople</name><operator>.</operator><name>addTab</name></name><argument_list>(<argument><expr><literal type="string">"Monitor wait list"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>waitListMonitor</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>waitListMonitor</name><operator>.</operator><name>setLayout</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><name>waitListStudents</name> <operator>=</operator> <operator>new</operator> <call><name>JScrollPane</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>waitListStudents</name><operator>.</operator><name>setForeground</name></name><argument_list>(<argument><expr><name><name>Color</name><operator>.</operator><name>WHITE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>waitListStudents</name><operator>.</operator><name>setBackground</name></name><argument_list>(<argument><expr><name><name>Color</name><operator>.</operator><name>BLACK</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>waitListStudentsJList</name>  <operator>=</operator> <operator>new</operator> <call><name><name>JList</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>waitListStudentsJList</name><operator>.</operator><name>setSelectedIndex</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>waitListStudents</name><operator>.</operator><name>getViewport</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setView</name><argument_list>(<argument><expr><name>waitListStudentsJList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>waitListStudents</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><literal type="number">28</literal></expr></argument>, <argument><expr><literal type="number">83</literal></expr></argument>, <argument><expr><literal type="number">284</literal></expr></argument>, <argument><expr><literal type="number">271</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>waitListMonitor</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>waitListStudents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><name>emailedStudents</name> <operator>=</operator> <operator>new</operator> <call><name>JScrollPane</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>emailedStudents</name><operator>.</operator><name>setBackground</name></name><argument_list>(<argument><expr><name><name>Color</name><operator>.</operator><name>BLACK</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>emailedStudents</name><operator>.</operator><name>setForeground</name></name><argument_list>(<argument><expr><name><name>Color</name><operator>.</operator><name>WHITE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>emailedStudentsJList</name> <operator>=</operator> <operator>new</operator> <call><name><name>JList</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>emailedStudentsJList</name><operator>.</operator><name>setSelectedIndex</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>emailedStudents</name><operator>.</operator><name>getViewport</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setView</name><argument_list>(<argument><expr><name>emailedStudentsJList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>emailedStudents</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><literal type="number">608</literal></expr></argument>, <argument><expr><literal type="number">83</literal></expr></argument>, <argument><expr><literal type="number">276</literal></expr></argument>, <argument><expr><literal type="number">271</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>waitListMonitor</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>emailedStudents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><name>courseOfferSelectForWaitListCombo</name> <operator>=</operator> <operator>new</operator> <call><name><name>JComboBox</name><argument_list type="template">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>courseOfferSelectForWaitListCombo</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>ActionListener</name></super><argument_list>()</argument_list> <block>{
			<function><type><specifier>public</specifier> <name>void</name></type> <name>actionPerformed</name><parameter_list>(<param><decl><type><name>ActionEvent</name></type> <name>arg0</name></decl></param>)</parameter_list> <block>{
				<decl_stmt><decl><type><name>int</name></type> <name>offerID</name> <init>= <expr><operator>(</operator><name>Integer</name><operator>)</operator><call><name><name>courseOfferSelectForWaitListCombo</name><operator>.</operator><name>getSelectedItem</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				
				<decl_stmt><decl><type><name><name>DefaultListModel</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>waitList</name> <init>= <expr><operator>new</operator> <call><name><name>DefaultListModel</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<for>for<control>(<init><decl><type><name>Student</name></type> <name>s</name><range>:<expr><call><name><name>WaitList</name><operator>.</operator><name>getStudentsOnWaitList</name></name><argument_list>(<argument><expr><name>offerID</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control><block>{
					<expr_stmt><expr><call><name><name>waitList</name><operator>.</operator><name>addElement</name></name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>getUIN</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="string">"- "</literal><operator>+</operator><call><name><name>s</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></for>
				
				<expr_stmt><expr><call><name><name>waitListStudentsJList</name><operator>.</operator><name>setModel</name></name><argument_list>(<argument><expr><name>waitList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				
				<decl_stmt><decl><type><name><name>DefaultListModel</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>emailedList</name> <init>= <expr><operator>new</operator> <call><name><name>DefaultListModel</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<for>for<control>(<init><decl><type><name>Student</name></type> <name>s</name><range>:<expr><call><name><name>WaitList</name><operator>.</operator><name>getStudentsOnEmailList</name></name><argument_list>(<argument><expr><name>offerID</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control><block>{
					<expr_stmt><expr><call><name><name>emailedList</name><operator>.</operator><name>addElement</name></name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>getUIN</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="string">"- "</literal><operator>+</operator><call><name><name>s</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></for>
				
				<expr_stmt><expr><call><name><name>emailedStudentsJList</name><operator>.</operator><name>setModel</name></name><argument_list>(<argument><expr><name>emailedList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				
				<try>try <block>{
					<decl_stmt><decl><type><name>CourseOffered</name></type> <name>co</name> <init>= <expr><operator>new</operator> <call><name>CourseOffered</name><argument_list>(<argument><expr><name>offerID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					
					<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"courseName"</literal></expr></argument>, <argument><expr><literal type="string">"courses"</literal></expr></argument>, <argument><expr><literal type="string">"CourseName"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name>String</name></type> <name>courseName</name> <init>= <expr><call><name><name>co</name><operator>.</operator><name>getCourseName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>String</name></type> <name>s</name><init>=<expr><literal type="string">"Course Name:"</literal><operator>+</operator><name>courseName</name></expr></init></decl>;</decl_stmt>
					
					<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"deptName"</literal></expr></argument>, <argument><expr><literal type="string">"department"</literal></expr></argument>, <argument><expr><literal type="string">"DepartmentName"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name>String</name></type> <name>deptName</name> <init>= <expr><call><name><name>co</name><operator>.</operator><name>getDepartmentName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><name>s</name><operator>+=</operator><literal type="string">"\nDepartment:"</literal><operator>+</operator><name>deptName</name></expr>;</expr_stmt>
					
					<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"classLoc"</literal></expr></argument>, <argument><expr><literal type="string">"classroom"</literal></expr></argument>, <argument><expr><literal type="string">"ClassroomLocation"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name>String</name></type> <name>classLoc</name> <init>= <expr><call><name><name>co</name><operator>.</operator><name>getClassRoomLocation</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><name>s</name><operator>+=</operator><literal type="string">"\nClassroom Location:"</literal><operator>+</operator><name>classLoc</name></expr>;</expr_stmt>
					
					<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"className"</literal></expr></argument>, <argument><expr><literal type="string">"classroom"</literal></expr></argument>, <argument><expr><literal type="string">"ClassroomName"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name>String</name></type> <name>className</name> <init>= <expr><call><name><name>co</name><operator>.</operator><name>getClassRoomName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><name>s</name><operator>+=</operator><literal type="string">"\nClasstroom Name:"</literal><operator>+</operator> <name>className</name></expr>;</expr_stmt>
					
					<expr_stmt><expr><name>s</name><operator>+=</operator><literal type="string">"\nTimings:"</literal><operator>+</operator><call><name><name>co</name><operator>.</operator><name>getTiming</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					
					<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"prof"</literal></expr></argument>, <argument><expr><literal type="string">"people"</literal></expr></argument>, <argument><expr><literal type="string">"Name"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name>String</name></type> <name>prof</name> <init>= <expr><call><name><name>co</name><operator>.</operator><name>getProfessorName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><name>s</name><operator>+=</operator><literal type="string">"\nTaught by professor:"</literal><operator>+</operator><name>prof</name></expr>;</expr_stmt>
					
					<expr_stmt><expr><call><name><name>courseDetailsTextPane</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					
				}</block> <catch>catch <parameter_list>(<param><decl><type><name><name>Course</name><operator>.</operator><name>CourseDoesNotExistException</name></name></type> <name>e</name></decl></param>)</parameter_list> <block>{
					<comment type="line">// TODO Auto-generated catch block</comment>
					<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				}</block></catch> <catch>catch <parameter_list>(<param><decl><type><name><name>CourseOffered</name><operator>.</operator><name>CourseOfferingDoesNotExistException</name></name></type> <name>e</name></decl></param>)</parameter_list> <block>{
					<comment type="line">// TODO Auto-generated catch block</comment>
					<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				}</block></catch></try>
			}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>courseOfferSelectForWaitListCombo</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><literal type="number">375</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">133</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>waitListMonitor</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>courseOfferSelectForWaitListCombo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JLabel</name></type> <name>lblCurrentStudentsOn</name> <init>= <expr><operator>new</operator> <call><name>JLabel</name><argument_list>(<argument><expr><literal type="string">"Current students on waitlist"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>lblCurrentStudentsOn</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><literal type="number">28</literal></expr></argument>, <argument><expr><literal type="number">55</literal></expr></argument>, <argument><expr><literal type="number">276</literal></expr></argument>, <argument><expr><literal type="number">17</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>waitListMonitor</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>lblCurrentStudentsOn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JLabel</name></type> <name>lblStudentAllowedTo</name> <init>= <expr><operator>new</operator> <call><name>JLabel</name><argument_list>(<argument><expr><literal type="string">"Students who received emails to register"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>lblStudentAllowedTo</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><literal type="number">608</literal></expr></argument>, <argument><expr><literal type="number">56</literal></expr></argument>, <argument><expr><literal type="number">276</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>waitListMonitor</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>lblStudentAllowedTo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><name>courseDetailsTextPane</name> <operator>=</operator> <operator>new</operator> <call><name>JTextPane</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>courseDetailsTextPane</name><operator>.</operator><name>setFont</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Font</name><argument_list>(<argument><expr><literal type="string">"Times New Roman"</literal></expr></argument>, <argument><expr><name><name>Font</name><operator>.</operator><name>BOLD</name></name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>courseDetailsTextPane</name><operator>.</operator><name>setForeground</name></name><argument_list>(<argument><expr><name><name>Color</name><operator>.</operator><name>WHITE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>courseDetailsTextPane</name><operator>.</operator><name>setBackground</name></name><argument_list>(<argument><expr><name><name>Color</name><operator>.</operator><name>BLACK</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>courseDetailsTextPane</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><literal type="number">347</literal></expr></argument>, <argument><expr><literal type="number">81</literal></expr></argument>, <argument><expr><literal type="number">209</literal></expr></argument>, <argument><expr><literal type="number">154</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>waitListMonitor</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>courseDetailsTextPane</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JTabbedPane</name></type> <name>departmentPane</name> <init>= <expr><operator>new</operator> <call><name>JTabbedPane</name><argument_list>(<argument><expr><name><name>JTabbedPane</name><operator>.</operator><name>TOP</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>managePeople</name><operator>.</operator><name>addTab</name></name><argument_list>(<argument><expr><literal type="string">"Manage Departments"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>departmentPane</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JPanel</name></type> <name>addDepartmentPanel</name> <init>= <expr><operator>new</operator> <call><name>JPanel</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>departmentPane</name><operator>.</operator><name>addTab</name></name><argument_list>(<argument><expr><literal type="string">"Add New Department"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>addDepartmentPanel</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>addDepartmentPanel</name><operator>.</operator><name>setLayout</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>GridLayout</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JLabel</name></type> <name>lblDepartmentName</name> <init>= <expr><operator>new</operator> <call><name>JLabel</name><argument_list>(<argument><expr><literal type="string">"Department Name"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>addDepartmentPanel</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>lblDepartmentName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><name>txtDepartmentName</name> <operator>=</operator> <operator>new</operator> <call><name>JTextField</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>addDepartmentPanel</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>txtDepartmentName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>txtDepartmentName</name><operator>.</operator><name>setColumns</name></name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JLabel</name></type> <name>lblConfirm_1</name> <init>= <expr><operator>new</operator> <call><name>JLabel</name><argument_list>(<argument><expr><literal type="string">"Confirm"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>addDepartmentPanel</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>lblConfirm_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JButton</name></type> <name>btnAddDepartment</name> <init>= <expr><operator>new</operator> <call><name>JButton</name><argument_list>(<argument><expr><literal type="string">"Add department"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>btnAddDepartment</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>ActionListener</name></super><argument_list>()</argument_list> <block>{
			<function><type><specifier>public</specifier> <name>void</name></type> <name>actionPerformed</name><parameter_list>(<param><decl><type><name>ActionEvent</name></type> <name>arg0</name></decl></param>)</parameter_list> <block>{
				<decl_stmt><decl><type><name>boolean</name></type> <name>checkName</name> <init>= <expr><call><name>checkStringForName</name><argument_list>(<argument><expr><call><name><name>txtDepartmentName</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if<condition>(<expr><operator>!</operator><name>checkName</name></expr>)</condition><then>
					<block type="pseudo"><expr_stmt><expr><call><name>showMessage</name><argument_list>(<argument><expr><literal type="string">"Department name format incorrect"</literal></expr></argument>, <argument><expr><literal type="string">"Please correct the department name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
				<else>else<block>{
					<try>try <block>{
						<expr_stmt><expr><call><name><name>Department</name><operator>.</operator><name>addNewDepartment</name></name><argument_list>(<argument><expr><call><name><name>txtDepartmentName</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>initializeEveryThing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>showMessage</name><argument_list>(<argument><expr><literal type="string">"Successfully added department:"</literal><operator>+</operator><call><name><name>txtDepartmentName</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Success"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name>txtDepartmentName</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block> <catch>catch <parameter_list>(<param><decl><type><name><name>Department</name><operator>.</operator><name>DepartmentAlreadyExistsException</name></name></type> <name>e</name></decl></param>)</parameter_list> <block>{
						<expr_stmt><expr><call><name>showMessage</name><argument_list>(<argument><expr><literal type="string">"Department with same name already exists"</literal></expr></argument>, <argument><expr><literal type="string">"Duplicate department"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					}</block></catch></try>
				}</block></else></if>
			}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>addDepartmentPanel</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>btnAddDepartment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JPanel</name></type> <name>updateDepartment</name> <init>= <expr><operator>new</operator> <call><name>JPanel</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>departmentPane</name><operator>.</operator><name>addTab</name></name><argument_list>(<argument><expr><literal type="string">"Update Department"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>updateDepartment</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>updateDepartment</name><operator>.</operator><name>setLayout</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>GridLayout</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JLabel</name></type> <name>lblSelectDepartment_1</name> <init>= <expr><operator>new</operator> <call><name>JLabel</name><argument_list>(<argument><expr><literal type="string">"Select department"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>updateDepartment</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>lblSelectDepartment_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><name>updateDeptCombo</name> <operator>=</operator> <operator>new</operator> <call><name><name>JComboBox</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>DefaultComboBoxModel</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>departmentNameArray</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>updateDepartment</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>updateDeptCombo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JLabel</name></type> <name>lblEnterNewName</name> <init>= <expr><operator>new</operator> <call><name>JLabel</name><argument_list>(<argument><expr><literal type="string">"Enter new name"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>updateDepartment</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>lblEnterNewName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><name>txtDepartmentnamenew</name> <operator>=</operator> <operator>new</operator> <call><name>JTextField</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>updateDepartment</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>txtDepartmentnamenew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>txtDepartmentnamenew</name><operator>.</operator><name>setColumns</name></name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JLabel</name></type> <name>lblNewLabel_4</name> <init>= <expr><operator>new</operator> <call><name>JLabel</name><argument_list>(<argument><expr><literal type="string">"Confirm"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>updateDepartment</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>lblNewLabel_4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JButton</name></type> <name>btnUpdateSelectedDepartment</name> <init>= <expr><operator>new</operator> <call><name>JButton</name><argument_list>(<argument><expr><literal type="string">"Update selected department"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>btnUpdateSelectedDepartment</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>ActionListener</name></super><argument_list>()</argument_list> <block>{
			
			<comment type="line">//@Override</comment>
			<function><type><specifier>public</specifier> <name>void</name></type> <name>actionPerformed</name><parameter_list>(<param><decl><type><name>ActionEvent</name></type> <name>arg0</name></decl></param>)</parameter_list> <block>{
				<if>if<condition>(<expr><call><name><name>updateDeptCombo</name><operator>.</operator><name>getModel</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSize</name><argument_list>()</argument_list></call><operator>&lt;=</operator><literal type="number">0</literal></expr>)</condition><then><block>{
					<expr_stmt><expr><call><name>showMessage</name><argument_list>(<argument><expr><literal type="string">"No department selected"</literal></expr></argument>, <argument><expr><literal type="string">"Error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return>return;</return>
				}</block></then>
				
				<else>else<block>{
					<decl_stmt><decl><type><name>String</name></type> <name>oldName</name> <init>= <expr><call><name><name>updateDeptCombo</name><operator>.</operator><name>getItemAt</name></name><argument_list>(<argument><expr><call><name><name>updateDeptCombo</name><operator>.</operator><name>getSelectedIndex</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>Department</name></type> <name>d</name></decl>;</decl_stmt>
					<try>try <block>{
						<expr_stmt><expr><name>d</name> <operator>=</operator> <operator>new</operator> <call><name>Department</name><argument_list>(<argument><expr><name>oldName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name>boolean</name></type> <name>flag</name> <init>= <expr><call><name>checkStringForName</name><argument_list>(<argument><expr><call><name><name>txtDepartmentnamenew</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<if>if<condition>(<expr><name>flag</name></expr>)</condition><then><block>{
							<expr_stmt><expr><call><name><name>d</name><operator>.</operator><name>setDepartmentName</name></name><argument_list>(<argument><expr><call><name><name>txtDepartmentnamenew</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<decl_stmt><decl><type><name>boolean</name></type> <name>isUpdated</name> <init>= <expr><call><name><name>d</name><operator>.</operator><name>updateDepartment</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
							<if>if<condition>(<expr><name>isUpdated</name></expr>)</condition><then><block>{
								<expr_stmt><expr><call><name>showMessage</name><argument_list>(<argument><expr><literal type="string">"Successfully updated department name"</literal></expr></argument>, <argument><expr><literal type="string">"Success"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								<expr_stmt><expr><call><name>initializeEveryThing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
							}</block></then>
							<else>else<block>{
								<expr_stmt><expr><call><name>showMessage</name><argument_list>(<argument><expr><literal type="string">"Failed to update"</literal></expr></argument>, <argument><expr><literal type="string">"Failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							}</block></else></if>
						}</block></then>
						
						<else>else<block>{
							<expr_stmt><expr><call><name>showMessage</name><argument_list>(<argument><expr><literal type="string">"Please enter depratment name correctly"</literal></expr></argument>, <argument><expr><literal type="string">"Error in name format"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></else></if>
						
					}</block> <catch>catch <parameter_list>(<param><decl><type><name><name>Department</name><operator>.</operator><name>DepartmentDoesNotExistException</name></name></type> <name>e</name></decl></param>)</parameter_list> <block>{
						<expr_stmt><expr><call><name>showMessage</name><argument_list>(<argument><expr><literal type="string">"Department not found"</literal></expr></argument>, <argument><expr><literal type="string">"Error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					}</block></catch> <catch>catch <parameter_list>(<param><decl><type><name><name>Department</name><operator>.</operator><name>DepartmentAlreadyExistsException</name></name></type> <name>e</name></decl></param>)</parameter_list> <block>{
						<expr_stmt><expr><call><name>showMessage</name><argument_list>(<argument><expr><literal type="string">"Department name already exists"</literal></expr></argument>, <argument><expr><literal type="string">"Failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					}</block></catch></try>
				}</block></else></if>
				
			}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>updateDepartment</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>btnUpdateSelectedDepartment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><name>giveBonusPanel</name> <operator>=</operator> <operator>new</operator> <call><name>GiveBonusUI</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>managePeople</name><operator>.</operator><name>addTab</name></name><argument_list>(<argument><expr><literal type="string">"Manage Employee pay"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>giveBonusPanel</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JPanel</name></type> <name>logOutPanel</name> <init>= <expr><operator>new</operator> <call><name>LogOutUI</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>managePeople</name><operator>.</operator><name>addTab</name></name><argument_list>(<argument><expr><literal type="string">"Logout"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>logOutPanel</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>logOutPanel</name><operator>.</operator><name>setLayout</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JPanel</name></type> <name>goToNextSemester</name> <init>= <expr><operator>new</operator> <call><name>JPanel</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>managePeople</name><operator>.</operator><name>addTab</name></name><argument_list>(<argument><expr><literal type="string">"Go to next Semester"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>goToNextSemester</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>goToNextSemester</name><operator>.</operator><name>setLayout</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><specifier>final</specifier> <name>JButton</name></type> <name>btnInitializeNextSemester</name> <init>= <expr><operator>new</operator> <call><name>JButton</name><argument_list>(<argument><expr><literal type="string">"Initialize next semester (USE WITH EXTREME CAUTION)"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>btnInitializeNextSemester</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>ActionListener</name></super><argument_list>()</argument_list> <block>{
			<function><type><specifier>public</specifier> <name>void</name></type> <name>actionPerformed</name><parameter_list>(<param><decl><type><name>ActionEvent</name></type> <name>arg0</name></decl></param>)</parameter_list> <block>{
				<decl_stmt><decl><type><name>int</name></type> <name>reply</name> <init>= <expr><call><name><name>JOptionPane</name><operator>.</operator><name>showConfirmDialog</name></name><argument_list>(<argument><expr><name>btnInitializeNextSemester</name></expr></argument>, <argument><expr><literal type="string">"Are you sure\nAll the grades of all the students will be finalized"</literal>
						<operator>+</operator> <literal type="string">" and a new semester will be initialized. \nWARNING: This is an irreversible process"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if<condition>(<expr><name>reply</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
					<decl_stmt><decl><type><name>Semester</name></type> <name>s</name> <init>= <expr><operator>new</operator> <call><name>Semester</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>goToNextSemester</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>JOptionPane</name><operator>.</operator><name>showMessageDialog</name></name><argument_list>(<argument><expr><name>btnInitializeNextSemester</name></expr></argument>, <argument><expr><literal type="string">"Successfully initializes new semester, the application will now close."</literal>
							<operator>+</operator> <literal type="string">" Please restart application and login again for the changes to reflect"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>exit</name></name><argument_list>(<argument><expr><name>ABORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					
				}</block></then></if>
			}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>btnInitializeNextSemester</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><literal type="number">195</literal></expr></argument>, <argument><expr><literal type="number">135</literal></expr></argument>, <argument><expr><literal type="number">442</literal></expr></argument>, <argument><expr><literal type="number">112</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>goToNextSemester</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>btnInitializeNextSemester</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				
		
		<comment type="line">//initialize data across UI</comment>
		<expr_stmt><expr><call><name>initializeEveryThing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>Thread</name></type> <name>waitListViewRefresh</name> <init>= <expr><operator>new</operator> <call><name>Thread</name><argument_list>(<argument><expr><operator>new</operator> <call><name>MonitorWaitList</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>waitListViewRefresh</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		
	}</block></constructor>
	
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>AdminUI</name></type> <name>initializeAdminUI</name><parameter_list>(<param><decl><type><name>Admin</name></type> <name>admin</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name><name>Department</name><operator>.</operator><name>DepartmentDoesNotExistException</name></name></expr></argument></throws><block>{
		<expr_stmt><expr><name>adminUI</name> <operator>=</operator> <operator>new</operator> <call><name>AdminUI</name><argument_list>(<argument><expr><name>admin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>adminUI</name></expr>;</return> 
	}</block></function>
	
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>AdminUI</name></type> <name>getInstance</name><parameter_list>()</parameter_list><block>{
		<return>return <expr><name>adminUI</name></expr>;</return>
	}</block></function>
	
	<function><type><specifier>public</specifier> <name>void</name></type> <name>initializeEveryThing</name><parameter_list>()</parameter_list><block>{
		<expr_stmt><expr><call><name>initializeBackgroundData</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>initializeJListsForCourseSchedule</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>ClassroomLocation</name></type> <name>l</name> <init>= <expr><call><name><name>ClassroomLocation</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator><call><name><name>classLocationCombo</name><operator>.</operator><name>getSelectedItem</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>timeSlotType</name> <init>= <expr><call><name><name>timeSlotTypeCombo</name><operator>.</operator><name>getSelectedIndex</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><call><name><name>courseScheduledCombo</name><operator>.</operator><name>getModel</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSize</name><argument_list>()</argument_list></call><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then><block>{
			<decl_stmt><decl><type><name>CourseOffered</name></type> <name>co</name> <init>= <expr><call><name><name>coursesOffered</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><operator>(</operator><name>Integer</name><operator>)</operator><call><name><name>courseScheduledCombo</name><operator>.</operator><name>getSelectedItem</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>initilizeSingleRescheduleTab</name><argument_list>(<argument><expr><operator>(</operator><name>Integer</name><operator>)</operator><call><name><name>courseScheduledCombo</name><operator>.</operator><name>getSelectedItem</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>cap</name> <init>= <expr><call><name><name>co</name><operator>.</operator><name>getTotalCapacity</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>initializeEmptyClassAndTimeSlot</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>timeSlotType</name></expr></argument>, <argument><expr><name>cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		
		<expr_stmt><expr><call><name>initializeOfferTab</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>initializeWaitListMonitor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>manageCourseInstance</name><operator>.</operator><name>initializeAll</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name><name>DefaultComboBoxModel</name><argument_list type="template">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>allIDsModel</name> <init>= <expr><operator>new</operator> <call><name><name>DefaultComboBoxModel</name><argument_list type="template">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>Integer</name></type> <name>i</name><range>:<expr><call><name><name>coursesOffered</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block>{
			<expr_stmt><expr><call><name><name>allIDsModel</name><operator>.</operator><name>addElement</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
		<expr_stmt><expr><call><name><name>courseOfferIDComboBox</name><operator>.</operator><name>setModel</name></name><argument_list>(<argument><expr><name>allIDsModel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name><name>DefaultComboBoxModel</name><argument_list type="template">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>allStudentsModel</name> <init>= <expr><operator>new</operator> <call><name><name>DefaultComboBoxModel</name><argument_list type="template">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>Student</name></type> <name>s</name><range>:<expr><name>students</name></expr></range></decl></init>)</control><block>{
			<expr_stmt><expr><call><name><name>allStudentsModel</name><operator>.</operator><name>addElement</name></name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>getUIN</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
		
		<for>for<control>(<init><decl><type><name>Student</name></type> <name>s</name><range>:<expr><name>tas</name></expr></range></decl></init>)</control><block>{
			<expr_stmt><expr><call><name><name>allStudentsModel</name><operator>.</operator><name>addElement</name></name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>getUIN</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
		<expr_stmt><expr><call><name><name>taComboBox</name><operator>.</operator><name>setModel</name></name><argument_list>(<argument><expr><name>allStudentsModel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name><name>departmentSelectStudent</name><operator>.</operator><name>setModel</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>DefaultComboBoxModel</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>departmentNameArray</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>departmentSelectProfessor</name><operator>.</operator><name>setModel</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>DefaultComboBoxModel</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>departmentNameArray</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>updateDeptCombo</name><operator>.</operator><name>setModel</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>DefaultComboBoxModel</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>departmentNameArray</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>adminDeptCombo</name><operator>.</operator><name>setModel</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>DefaultComboBoxModel</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>departmentNameArray</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
	}</block></function>
	
	<function><type><specifier>public</specifier> <name>boolean</name></type> <name>checkStringForName</name><parameter_list>(<param><decl><type><name>String</name></type> <name>s</name></decl></param>)</parameter_list><block>{
		<return>return <expr><call><name><name>s</name><operator>.</operator><name>matches</name></name><argument_list>(<argument><expr><literal type="string">"[a-zA-Z]+( [a-zA-Z]+)?"</literal></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
	
	<function><type><specifier>public</specifier> <name>void</name></type> <name>showMessage</name><parameter_list>(<param><decl><type><name>String</name></type> <name>message</name></decl></param>, <param><decl><type><name>String</name></type> <name>title</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name><name>JOptionPane</name><operator>.</operator><name>showMessageDialog</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name>title</name></expr></argument>, <argument><expr><name><name>JOptionPane</name><operator>.</operator><name>INFORMATION_MESSAGE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
	
	<function><type><specifier>public</specifier> <name>boolean</name></type> <name>addStudent</name><parameter_list>()</parameter_list><block>{
		<decl_stmt><decl><type><name>boolean</name></type> <name>isAdded</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><operator>!</operator><call><name>checkStringForName</name><argument_list>(<argument><expr><call><name><name>studentNameText</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
			<expr_stmt><expr><call><name>showMessage</name><argument_list>(<argument><expr><literal type="string">"Student name is in incorrect format"</literal></expr></argument>, <argument><expr><literal type="string">"Error in student name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="boolean">false</literal></expr>;</return>
		}</block></then></if>
		<decl_stmt><decl><type><name>String</name></type> <name>departmentName</name> <init>= <expr><call><name><name>departmentSelectStudent</name><operator>.</operator><name>getItemAt</name></name><argument_list>(<argument><expr><call><name><name>departmentSelectStudent</name><operator>.</operator><name>getSelectedIndex</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Department</name></type> <name>dept</name></decl>;</decl_stmt>
		<try>try <block>{
			<expr_stmt><expr><name>dept</name> <operator>=</operator> <operator>new</operator> <call><name>Department</name><argument_list>(<argument><expr><name>departmentName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>level</name> <init>= <expr><call><name><name>levelSelectStudent</name><operator>.</operator><name>getSelectedIndex</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>isAdded</name> <operator>=</operator> <call><name><name>Student</name><operator>.</operator><name>addStudentToDb</name></name><argument_list>(<argument><expr><call><name><name>studentNameText</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dept</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>isAdded</name></expr>;</return>
		}</block> <catch>catch <parameter_list>(<param><decl><type><name><name>Department</name><operator>.</operator><name>DepartmentDoesNotExistException</name></name></type> <name>e</name></decl></param>)</parameter_list> <block>{
			<expr_stmt><expr><call><name>showMessage</name><argument_list>(<argument><expr><literal type="string">"Department does not exist"</literal></expr></argument>, <argument><expr><literal type="string">"Error in department"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>isAdded</name></expr>;</return>
		}</block></catch> <catch>catch <parameter_list>(<param><decl><type><name><name>Student</name><operator>.</operator><name>levelNotExistException</name></name></type> <name>e</name></decl></param>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>isAdded</name></expr>;</return>
		}</block></catch></try>
		
	}</block></function>
	
	<function><type><specifier>public</specifier> <name>boolean</name></type> <name>addProfessor</name><parameter_list>()</parameter_list><block>{
		<decl_stmt><decl><type><name>boolean</name></type> <name>isAdded</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><operator>!</operator><call><name>checkStringForName</name><argument_list>(<argument><expr><call><name><name>professorNameText</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
			<expr_stmt><expr><call><name>showMessage</name><argument_list>(<argument><expr><literal type="string">"Professor name is in incorrect format"</literal></expr></argument>, <argument><expr><literal type="string">"Error in professor name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="boolean">false</literal></expr>;</return>
		}</block></then></if>
		<decl_stmt><decl><type><name>String</name></type> <name>departmentName</name> <init>= <expr><call><name><name>departmentSelectProfessor</name><operator>.</operator><name>getItemAt</name></name><argument_list>(<argument><expr><call><name><name>departmentSelectProfessor</name><operator>.</operator><name>getSelectedIndex</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Department</name></type> <name>dept</name></decl>;</decl_stmt>
		<try>try <block>{
			<expr_stmt><expr><name>dept</name> <operator>=</operator> <operator>new</operator> <call><name>Department</name><argument_list>(<argument><expr><name>departmentName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>isAdded</name> <operator>=</operator> <call><name><name>Professor</name><operator>.</operator><name>addProfToDb</name></name><argument_list>(<argument><expr><call><name><name>professorNameText</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dept</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>isAdded</name></expr>;</return>
		}</block> <catch>catch <parameter_list>(<param><decl><type><name><name>Department</name><operator>.</operator><name>DepartmentDoesNotExistException</name></name></type> <name>e</name></decl></param>)</parameter_list> <block>{
			<expr_stmt><expr><call><name>showMessage</name><argument_list>(<argument><expr><literal type="string">"Department does not exist"</literal></expr></argument>, <argument><expr><literal type="string">"Error in department"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>isAdded</name></expr>;</return>
		}</block></catch></try>
		
	}</block></function>
	
	<function><type><specifier>public</specifier> <name>boolean</name></type> <name>addAdmin</name><parameter_list>()</parameter_list><block>{
		<decl_stmt><decl><type><name>boolean</name></type> <name>isAdded</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><operator>!</operator><call><name>checkStringForName</name><argument_list>(<argument><expr><call><name><name>adminName</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
			<expr_stmt><expr><call><name>showMessage</name><argument_list>(<argument><expr><literal type="string">"Admin name is in incorrect format"</literal></expr></argument>, <argument><expr><literal type="string">"Error in admin name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="boolean">false</literal></expr>;</return>
		}</block></then></if>
		<decl_stmt><decl><type><name>String</name></type> <name>departmentName</name> <init>= <expr><call><name><name>adminDeptCombo</name><operator>.</operator><name>getItemAt</name></name><argument_list>(<argument><expr><call><name><name>adminDeptCombo</name><operator>.</operator><name>getSelectedIndex</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Department</name></type> <name>dept</name></decl>;</decl_stmt>
		<try>try <block>{
			<expr_stmt><expr><name>dept</name> <operator>=</operator> <operator>new</operator> <call><name>Department</name><argument_list>(<argument><expr><name>departmentName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>isAdded</name> <operator>=</operator> <call><name><name>Admin</name><operator>.</operator><name>addAdmin</name></name><argument_list>(<argument><expr><call><name><name>adminName</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dept</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>isAdded</name></expr>;</return>
		}</block> <catch>catch <parameter_list>(<param><decl><type><name><name>Department</name><operator>.</operator><name>DepartmentDoesNotExistException</name></name></type> <name>e</name></decl></param>)</parameter_list> <block>{
			<expr_stmt><expr><call><name>showMessage</name><argument_list>(<argument><expr><literal type="string">"Department does not exist"</literal></expr></argument>, <argument><expr><literal type="string">"Error in department"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>isAdded</name></expr>;</return>
		}</block></catch> <catch>catch <parameter_list>(<param><decl><type><name><name>Admin</name><operator>.</operator><name>loginDetailsnotAdded</name></name></type> <name>e</name></decl></param>)</parameter_list> <block>{
			<return>return <expr><name>isAdded</name></expr>;</return>
		}</block></catch></try>
		
	}</block></function>

	<function><type><specifier>public</specifier> <name><name>ArrayList</name><argument_list type="template">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>getOfferIdOfScheduledCourses</name><parameter_list>()</parameter_list><block>{
		<decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="template">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>offerID</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="template">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>courseSchedule</name> <operator>=</operator> <call><name><name>CourseSchedule</name><operator>.</operator><name>getHaspMapForSchedule</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>Integer</name></type> <name>i</name><range>: <expr><call><name><name>courseSchedule</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block>{
			<expr_stmt><expr><call><name><name>offerID</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
		
		<return>return <expr><name>offerID</name></expr>;</return>
		
	}</block></function>

	<function><type><specifier>public</specifier> <name>void</name></type> <name>initializeJListsForCourseSchedule</name><parameter_list>()</parameter_list><block>{
		<expr_stmt><expr><call><name>initializeBackgroundData</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="template">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>offerIDs</name> <init>= <expr><call><name>getOfferIdOfScheduledCourses</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>courseNameList</name> <init>= <expr><operator>new</operator> <name><name>String</name><index>[<expr><call><name><name>offerIDs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Integer</name><index>[]</index></type> <name>courseOfferIDList</name> <init>= <expr><operator>new</operator> <name><name>Integer</name><index>[<expr><call><name><name>offerIDs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>profNameList</name> <init>= <expr><operator>new</operator> <name><name>String</name><index>[<expr><call><name><name>offerIDs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>classLocationList</name> <init>= <expr><operator>new</operator> <name><name>String</name><index>[<expr><call><name><name>offerIDs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>classRoomNameList</name> <init>= <expr><operator>new</operator> <name><name>String</name><index>[<expr><call><name><name>offerIDs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>classTimingList</name> <init>= <expr><operator>new</operator> <name><name>String</name><index>[<expr><call><name><name>offerIDs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
		
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name><name>offerIDs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
			<decl_stmt><decl><type><name>CourseOffered</name></type> <name>co</name></decl>;</decl_stmt>
			<try>try <block>{
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"OfferID:"</literal><operator>+</operator><call><name><name>offerIDs</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>co</name> <operator>=</operator> <operator>new</operator> <call><name>CourseOffered</name><argument_list>(<argument><expr><call><name><name>offerIDs</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				
				<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"courseName"</literal></expr></argument>, <argument><expr><literal type="string">"courses"</literal></expr></argument>, <argument><expr><literal type="string">"CourseName"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><name>String</name></type> <name>courseName</name> <init>= <expr><call><name><name>co</name><operator>.</operator><name>getCourseName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name><name>courseNameList</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>courseName</name></expr>;</expr_stmt>
				
				<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"offerID"</literal></expr></argument>, <argument><expr><literal type="string">"coursesoffered"</literal></expr></argument>, <argument><expr><literal type="string">"OfferID"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><name>int</name></type> <name>offerID</name> <init>= <expr><call><name><name>co</name><operator>.</operator><name>getOfferID</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name><name>courseOfferIDList</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>offerID</name></expr>;</expr_stmt>
				
				<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"prof"</literal></expr></argument>, <argument><expr><literal type="string">"people"</literal></expr></argument>, <argument><expr><literal type="string">"Name"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><name>String</name></type> <name>prof</name> <init>= <expr><call><name><name>co</name><operator>.</operator><name>getProfessorName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name><name>profNameList</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>prof</name></expr>;</expr_stmt>
				
				<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"classLoc"</literal></expr></argument>, <argument><expr><literal type="string">"classroom"</literal></expr></argument>, <argument><expr><literal type="string">"ClassroomLocation"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><name>String</name></type> <name>classLoc</name> <init>= <expr><call><name><name>co</name><operator>.</operator><name>getClassRoomLocation</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name><name>classLocationList</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>classLoc</name></expr>;</expr_stmt>
				
				<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"className"</literal></expr></argument>, <argument><expr><literal type="string">"classroom"</literal></expr></argument>, <argument><expr><literal type="string">"ClassroomName"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><name>String</name></type> <name>className</name> <init>= <expr><call><name><name>co</name><operator>.</operator><name>getClassRoomName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name><name>classRoomNameList</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>className</name></expr>;</expr_stmt>
				
				<expr_stmt><expr><name><name>classTimingList</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>co</name><operator>.</operator><name>getTiming</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				
			}</block> <catch>catch <parameter_list>(<param><decl><type><name><name>Course</name><operator>.</operator><name>CourseDoesNotExistException</name></name></type> <name>e</name></decl></param>)</parameter_list> <block>{
				<comment type="line">// TODO Auto-generated catch block</comment>
				<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></catch> <catch>catch <parameter_list>(<param><decl><type><name><name>CourseOffered</name><operator>.</operator><name>CourseOfferingDoesNotExistException</name></name></type> <name>e</name></decl></param>)</parameter_list> <block>{
				<comment type="line">// TODO Auto-generated catch block</comment>
				<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
			
			
		}</block></for>
		<comment type="line">//Setting the Jlists</comment>
		<expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>courseNameList</name><operator>.</operator><name>setListData</name></name><argument_list>(<argument><expr><name>courseNameList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>courseOfferIDList</name><operator>.</operator><name>setListData</name></name><argument_list>(<argument><expr><name>courseOfferIDList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>professorNameList</name><operator>.</operator><name>setListData</name></name><argument_list>(<argument><expr><name>profNameList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>classLocationList</name><operator>.</operator><name>setListData</name></name><argument_list>(<argument><expr><name>classLocationList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>classNameList</name><operator>.</operator><name>setListData</name></name><argument_list>(<argument><expr><name>classRoomNameList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>classTimingList</name><operator>.</operator><name>setListData</name></name><argument_list>(<argument><expr><name>classTimingList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>		
		<expr_stmt><expr><call><name>setAllIndexTo</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<comment type="line">//setting the course select combo box</comment>
		<expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>courseScheduledCombo</name><operator>.</operator><name>setModel</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>DefaultComboBoxModel</name><argument_list type="template">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>courseOfferIDList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if<condition>(<expr><name><name>courseOfferIDList</name><operator>.</operator><name>length</name></name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><call><name>initilizeSingleRescheduleTab</name><argument_list>(<argument><expr><name><name>courseOfferIDList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
		
	}</block></function>

	<function><type><specifier>public</specifier> <name>void</name></type> <name>initilizeSingleRescheduleTab</name><parameter_list>(<param><decl><type><name>int</name></type> <name>offerID</name></decl></param>)</parameter_list><block>{
		<decl_stmt><decl><type><name>CourseOffered</name></type> <name>co</name> <init>= <expr><call><name><name>coursesOffered</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>offerID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>s</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"courseName"</literal></expr></argument>, <argument><expr><literal type="string">"courses"</literal></expr></argument>, <argument><expr><literal type="string">"CourseName"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>courseName</name> <init>= <expr><call><name><name>co</name><operator>.</operator><name>getCourseName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>s</name><operator>+=</operator><literal type="string">"Course Name:"</literal><operator>+</operator><name>courseName</name></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"deptName"</literal></expr></argument>, <argument><expr><literal type="string">"department"</literal></expr></argument>, <argument><expr><literal type="string">"DepartmentName"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>deptName</name> <init>= <expr><call><name><name>co</name><operator>.</operator><name>getDepartmentName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>s</name><operator>+=</operator><literal type="string">"\nDepartment:"</literal><operator>+</operator><name>deptName</name></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"classLoc"</literal></expr></argument>, <argument><expr><literal type="string">"classroom"</literal></expr></argument>, <argument><expr><literal type="string">"ClassroomLocation"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>classLoc</name> <init>= <expr><call><name><name>co</name><operator>.</operator><name>getClassRoomLocation</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>s</name><operator>+=</operator><literal type="string">"\nClassroom Location:"</literal><operator>+</operator><name>classLoc</name></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"className"</literal></expr></argument>, <argument><expr><literal type="string">"classroom"</literal></expr></argument>, <argument><expr><literal type="string">"ClassroomName"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>className</name> <init>= <expr><call><name><name>co</name><operator>.</operator><name>getClassRoomName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>s</name><operator>+=</operator><literal type="string">"\nClasstroom Name:"</literal><operator>+</operator> <name>className</name></expr>;</expr_stmt>
		
		<expr_stmt><expr><name>s</name><operator>+=</operator><literal type="string">"\nTimings:"</literal><operator>+</operator><call><name><name>co</name><operator>.</operator><name>getTiming</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"prof"</literal></expr></argument>, <argument><expr><literal type="string">"people"</literal></expr></argument>, <argument><expr><literal type="string">"Name"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>prof</name> <init>= <expr><call><name><name>co</name><operator>.</operator><name>getProfessorName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>s</name><operator>+=</operator><literal type="string">"\nTaught by professor:"</literal><operator>+</operator><name>prof</name></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name><name>courseScheduleTextPane</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><type><specifier>public</specifier> <name>void</name></type> <name>initializeBackgroundData</name><parameter_list>()</parameter_list><block>{
		<expr_stmt><expr><name>coursesOffered</name> <operator>=</operator> <call><name><name>CourseOffered</name><operator>.</operator><name>getAllOfferedIDAndCourseOffered</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>courseSchedule</name> <operator>=</operator> <call><name><name>CourseSchedule</name><operator>.</operator><name>getHaspMapForSchedule</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>departments</name> <operator>=</operator> <call><name><name>Department</name><operator>.</operator><name>getAllDepartments</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>courses</name> <operator>=</operator> <call><name><name>Course</name><operator>.</operator><name>getAllCourses</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>students</name> <operator>=</operator> <call><name><name>Student</name><operator>.</operator><name>getAllStudents</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>tas</name> <operator>=</operator> <call><name><name>TA</name><operator>.</operator><name>getAllTAs</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>departmentNameArray</name> <operator>=</operator> <operator>new</operator> <name><name>String</name><index>[<expr><call><name><name>departments</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>departmentNameArray</name><operator>.</operator><name>length</name></name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
			<expr_stmt><expr><name><name>departmentNameArray</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>departments</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getDepartmentName</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></for>
	}</block></function>
	
	<function><type><specifier>public</specifier> <name>void</name></type> <name>initializeOfferTab</name><parameter_list>()</parameter_list><block>{
		<decl_stmt><decl><type><name><name>DefaultComboBoxModel</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>model</name> <init>= <expr><operator>new</operator> <call><name><name>DefaultComboBoxModel</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>Department</name></type> <name>d</name><range>:<expr><name>departments</name></expr></range></decl></init>)</control><block>{
			<expr_stmt><expr><call><name><name>model</name><operator>.</operator><name>addElement</name></name><argument_list>(<argument><expr><call><name><name>d</name><operator>.</operator><name>getDepartmentName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
		<expr_stmt><expr><call><name><name>allDepartmentsCombo</name><operator>.</operator><name>setModel</name></name><argument_list>(<argument><expr><name>model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>Department</name></type> <name>d</name></decl>;</decl_stmt>
		<try>try <block>{
			<expr_stmt><expr><name>d</name> <operator>=</operator> <operator>new</operator> <call><name>Department</name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator><call><name><name>allDepartmentsCombo</name><operator>.</operator><name>getSelectedItem</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="template">&lt;<argument><name>Course</name></argument>&gt;</argument_list></name></type> <name>deptCourses</name> <init>= <expr><call><name><name>Course</name><operator>.</operator><name>getCoursesOfDepartment</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="template">&lt;<argument><name>Professor</name></argument>&gt;</argument_list></name></type> <name>deptProfessor</name> <init>= <expr><call><name><name>Professor</name><operator>.</operator><name>getAllProfInADept</name></name><argument_list>(<argument><expr><call><name><name>d</name><operator>.</operator><name>getDepartmentID</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name><name>DefaultComboBoxModel</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>modelCourse</name> <init>= <expr><operator>new</operator> <call><name><name>DefaultComboBoxModel</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name>DefaultComboBoxModel</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>modelProfessor</name> <init>= <expr><operator>new</operator> <call><name><name>DefaultComboBoxModel</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<if>if<condition>(<expr><call><name><name>deptCourses</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><call><name><name>allCoursesCombo</name><operator>.</operator><name>setModel</name></name><argument_list>(<argument><expr><name>modelCourse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
			
			<if>if<condition>(<expr><call><name><name>deptProfessor</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><call><name><name>allProfessorCombo</name><operator>.</operator><name>setModel</name></name><argument_list>(<argument><expr><name>modelProfessor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
			
			<for>for<control>(<init><decl><type><name>Course</name></type> <name>c</name><range>:<expr><name>deptCourses</name></expr></range></decl></init>)</control><block>{
				<expr_stmt><expr><call><name><name>modelCourse</name><operator>.</operator><name>addElement</name></name><argument_list>(<argument><expr><call><name><name>c</name><operator>.</operator><name>getCourseName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>allCoursesCombo</name><operator>.</operator><name>setModel</name></name><argument_list>(<argument><expr><name>modelCourse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></for>
			
			<for>for<control>(<init><decl><type><name>Professor</name></type> <name>p</name><range>:<expr><name>deptProfessor</name></expr></range></decl></init>)</control><block>{
				<expr_stmt><expr><call><name><name>modelProfessor</name><operator>.</operator><name>addElement</name></name><argument_list>(<argument><expr><call><name><name>p</name><operator>.</operator><name>getUserName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>allProfessorCombo</name><operator>.</operator><name>setModel</name></name><argument_list>(<argument><expr><name>modelProfessor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></for>
			
		}</block> <catch>catch <parameter_list>(<param><decl><type><name><name>Department</name><operator>.</operator><name>DepartmentDoesNotExistException</name></name></type> <name>e</name></decl></param>)</parameter_list> <block>{
			<comment type="line">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></catch> <catch>catch <parameter_list>(<param><decl><type><name><name>Professor</name><operator>.</operator><name>ProfessorDoesNotExistException</name></name></type> <name>e</name></decl></param>)</parameter_list> <block>{
			<comment type="line">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		
		
		
	}</block></function>

	<function><type><specifier>public</specifier> <name>void</name></type> <name>initializeWaitListMonitor</name><parameter_list>()</parameter_list><block>{
		<decl_stmt><decl><type><name><name>DefaultComboBoxModel</name><argument_list type="template">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>model</name> <init>= <expr><operator>new</operator> <call><name><name>DefaultComboBoxModel</name><argument_list type="template">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>Integer</name></type> <name>i</name><range>:<expr><call><name><name>coursesOffered</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block>{
			<expr_stmt><expr><call><name><name>model</name><operator>.</operator><name>addElement</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
		<expr_stmt><expr><call><name><name>courseOfferSelectForWaitListCombo</name><operator>.</operator><name>setModel</name></name><argument_list>(<argument><expr><name>model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<if>if<condition>(<expr><call><name><name>model</name><operator>.</operator><name>getSize</name></name><argument_list>()</argument_list></call><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then><block>{
			<decl_stmt><decl><type><name>int</name></type> <name>offerID</name> <init>= <expr><call><name><name>model</name><operator>.</operator><name>getElementAt</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name><name>DefaultListModel</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>waitList</name> <init>= <expr><operator>new</operator> <call><name><name>DefaultListModel</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<for>for<control>(<init><decl><type><name>Student</name></type> <name>s</name><range>:<expr><call><name><name>WaitList</name><operator>.</operator><name>getStudentsOnWaitList</name></name><argument_list>(<argument><expr><name>offerID</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control><block>{
				<expr_stmt><expr><call><name><name>waitList</name><operator>.</operator><name>addElement</name></name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></for>
			
			<expr_stmt><expr><call><name><name>waitListStudentsJList</name><operator>.</operator><name>setModel</name></name><argument_list>(<argument><expr><name>waitList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
			<decl_stmt><decl><type><name><name>DefaultListModel</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>emailedList</name> <init>= <expr><operator>new</operator> <call><name><name>DefaultListModel</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<for>for<control>(<init><decl><type><name>Student</name></type> <name>s</name><range>:<expr><call><name><name>WaitList</name><operator>.</operator><name>getStudentsOnEmailList</name></name><argument_list>(<argument><expr><name>offerID</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control><block>{
				<expr_stmt><expr><call><name><name>emailedList</name><operator>.</operator><name>addElement</name></name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></for>
			
			<expr_stmt><expr><call><name><name>emailedStudentsJList</name><operator>.</operator><name>setModel</name></name><argument_list>(<argument><expr><name>emailedList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
			<try>try <block>{
				<decl_stmt><decl><type><name>CourseOffered</name></type> <name>co</name> <init>= <expr><operator>new</operator> <call><name>CourseOffered</name><argument_list>(<argument><expr><name>offerID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>String</name></type> <name>s</name> <init>= <expr><literal type="string">"Course name:"</literal><operator>+</operator><call><name><name>co</name><operator>.</operator><name>getCourseName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name>s</name><operator>+=</operator><literal type="string">"\nDepartment name:"</literal><operator>+</operator><call><name><name>co</name><operator>.</operator><name>getDepartmentName</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>s</name><operator>+=</operator><literal type="string">"\nTaught by Prof. "</literal><operator>+</operator><call><name><name>co</name><operator>.</operator><name>getProfessorName</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>s</name><operator>+=</operator><literal type="string">"\nClass location and name:"</literal><operator>+</operator><call><name><name>co</name><operator>.</operator><name>getClassRoomLocation</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="string">", "</literal><operator>+</operator><call><name><name>co</name><operator>.</operator><name>getClassRoomName</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>s</name><operator>+=</operator><literal type="string">"\nTimings:"</literal><operator>+</operator><call><name><name>co</name><operator>.</operator><name>getTiming</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>courseDetailsTextPane</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				
			}</block> <catch>catch <parameter_list>(<param><decl><type><name><name>Course</name><operator>.</operator><name>CourseDoesNotExistException</name></name></type>	<name>e</name></decl></param>)</parameter_list> <block>{
				<comment type="line">// TODO Auto-generated catch block</comment>
				<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></catch> <catch>catch <parameter_list>(<param><decl><type><name><name>CourseOffered</name><operator>.</operator><name>CourseOfferingDoesNotExistException</name></name></type> <name>e</name></decl></param>)</parameter_list> <block>{
				<comment type="line">// TODO Auto-generated catch block</comment>
				<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
			
		}</block></then></if>
		
		
	}</block></function>
	<comment type="line">//???write a initialize manage people tab function???</comment>
	
	<function><type><specifier>public</specifier> <name>void</name></type> <name>initializeEmptyClassAndTimeSlot</name><parameter_list>(<param><decl><type><name>ClassroomLocation</name></type> <name>location</name></decl></param>, <param><decl><type><name>int</name></type> <name>timeSlotType</name></decl></param>, <param><decl><type><name>int</name></type> <name>courseCapacity</name></decl></param>)</parameter_list><block>{
		<decl_stmt><decl><type><name><name>LinkedHashMap</name><argument_list type="template">&lt;<argument><name>Integer</name></argument>, <argument><name>Classroom</name></argument>&gt;</argument_list></name></type> <name>emptyClassRooms</name> <init>= <expr><call><name><name>Classroom</name><operator>.</operator><name>getAllEmptyClassroom</name></name><argument_list>(<argument><expr><name>location</name></expr></argument>, <argument><expr><name>timeSlotType</name></expr></argument>, <argument><expr><name>courseCapacity</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>classroomAndTimeslots</name> <operator>=</operator> <operator>new</operator> <call><name><name>LinkedHashMap</name><argument_list type="template">&lt;<argument><name>Classroom</name></argument>, <argument><name><name>ArrayList</name><argument_list type="template">&lt;<argument><name>Timeslots</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>		
		<decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>classRoomStrings</name> <init>= <expr><operator>new</operator> <name><name>String</name><index>[<expr><call><name><name>emptyClassRooms</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>index</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>Integer</name></type> <name>i</name> <range>: <expr><call><name><name>emptyClassRooms</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block>{
			<decl_stmt><decl><type><name>Classroom</name></type> <name>cr</name> <init>= <expr><call><name><name>emptyClassRooms</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="template">&lt;<argument><name>Timeslots</name></argument>&gt;</argument_list></name></type> <name>ts</name> <init>= <expr><call><name><name>cr</name><operator>.</operator><name>findOpenSlotsForClassroom</name></name><argument_list>(<argument><expr><name>timeSlotType</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>classroomAndTimeslots</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>cr</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>classRoomStrings</name><index>[<expr><name>index</name></expr>]</index></name> <operator>=</operator> <call><name><name>cr</name><operator>.</operator><name>getClassroomName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr>;</expr_stmt>			
			<if>if<condition>(<expr><name>index</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><call><name>initializeEmptyTimeSlotCombo</name><argument_list>(<argument><expr><name>cr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
			<expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt>
		}</block></for>
		
		<expr_stmt><expr><call><name><name>classRoomCombo</name><operator>.</operator><name>setModel</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>DefaultComboBoxModel</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>classRoomStrings</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<if>if<condition>(<expr><call><name><name>classRoomCombo</name><operator>.</operator><name>getModel</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSize</name><argument_list>()</argument_list></call><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><call><name><name>classRoomCombo</name><operator>.</operator><name>setSelectedIndex</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
		
		<if>if<condition>(<expr><call><name><name>timingAvailableCombo</name><operator>.</operator><name>getModel</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSize</name><argument_list>()</argument_list></call><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><call><name><name>timingAvailableCombo</name><operator>.</operator><name>setSelectedIndex</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
		
	}</block></function>
	
	<function><type><specifier>public</specifier> <name>void</name></type> <name>initializeEmptyTimeSlotCombo</name><parameter_list>(<param><decl><type><name>Classroom</name></type> <name>c</name></decl></param>)</parameter_list><block>{
		<decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="template">&lt;<argument><name>Timeslots</name></argument>&gt;</argument_list></name></type> <name>ts</name> <init>= <expr><call><name><name>classroomAndTimeslots</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>timeSlotsStrings</name> <init>= <expr><operator>new</operator> <name><name>String</name><index>[<expr><call><name><name>ts</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name><name>ts</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
			<expr_stmt><expr><name><name>timeSlotsStrings</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>ts</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getStartHour</name><argument_list>()</argument_list></call><operator>+</operator> <literal type="string">"00 to "</literal><operator>+</operator><call><name><name>ts</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getEndHour</name><argument_list>()</argument_list></call><operator>+</operator><literal type="string">"00"</literal></expr>;</expr_stmt>
		}</block></for>
		
		<expr_stmt><expr><call><name><name>timingAvailableCombo</name><operator>.</operator><name>setModel</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>DefaultComboBoxModel</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>timeSlotsStrings</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><type><specifier>public</specifier> <name>void</name></type> <name>updateCourseSchedule</name><parameter_list>(<param><decl><type><name>CourseOffered</name></type> <name>coursOffered</name></decl></param>, <param><decl><type><name>Classroom</name></type> <name>classroom</name></decl></param>, <param><decl><type><name>Timeslots</name></type> <name>timeslot</name></decl></param>)</parameter_list><block>{
		<try>try <block>{
			<expr_stmt><expr><call><name><name>CourseSchedule</name><operator>.</operator><name>updateCourseSchedule</name></name><argument_list>(<argument><expr><name>coursOffered</name></expr></argument>, <argument><expr><name>classroom</name></expr></argument>, <argument><expr><name>timeslot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>showMessage</name><argument_list>(<argument><expr><literal type="string">"Updated successfully"</literal></expr></argument>, <argument><expr><literal type="string">"Success"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>initilizeSingleRescheduleTab</name><argument_list>(<argument><expr><call><name><name>coursOffered</name><operator>.</operator><name>getOfferID</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>initializeBackgroundData</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>initializeJListsForCourseSchedule</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>ClassroomLocation</name></type> <name>l</name> <init>= <expr><call><name><name>ClassroomLocation</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator><call><name><name>classLocationCombo</name><operator>.</operator><name>getSelectedItem</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>timeSlotType</name> <init>= <expr><call><name><name>timeSlotTypeCombo</name><operator>.</operator><name>getSelectedIndex</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>CourseOffered</name></type> <name>co</name> <init>= <expr><call><name><name>coursesOffered</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><operator>(</operator><name>Integer</name><operator>)</operator><call><name><name>courseScheduledCombo</name><operator>.</operator><name>getSelectedItem</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>cap</name> <init>= <expr><call><name><name>co</name><operator>.</operator><name>getTotalCapacity</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>initializeEmptyClassAndTimeSlot</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>timeSlotType</name></expr></argument>, <argument><expr><name>cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
		}</block> <catch>catch <parameter_list>(<param><decl><type><name><name>CourseOffered</name><operator>.</operator><name>CourseOfferingNotCurrentException</name></name></type> <name>e</name></decl></param>)</parameter_list> <block>{
			<expr_stmt><expr><call><name>showMessage</name><argument_list>(<argument><expr><literal type="string">"Unable to update"</literal></expr></argument>, <argument><expr><literal type="string">"Unable to update"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
	}</block></function>
	
	<function><type><specifier>public</specifier> <name>void</name></type> <name>setAllIndexTo</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>)</parameter_list><block>{
		<expr_stmt><expr><call><name><name>courseNameList</name><operator>.</operator><name>setSelectedIndex</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>courseOfferIDList</name><operator>.</operator><name>setSelectedIndex</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>professorNameList</name><operator>.</operator><name>setSelectedIndex</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>classLocationList</name><operator>.</operator><name>setSelectedIndex</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>classNameList</name><operator>.</operator><name>setSelectedIndex</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>classTimingList</name><operator>.</operator><name>setSelectedIndex</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
	}</block></function>
	
	<comment type="line">//to refresh the data show to the user periodically</comment>
	<class><specifier>private</specifier> class <name>MonitorWaitList</name> <super><implements>implements <name>Runnable</name></implements></super><block>{
		<comment type="line">//@Override</comment>
		<function><type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
			<while>while<condition>(<expr><literal type="boolean">true</literal></expr>)</condition><block>{
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Initializing the wait list monitor - Admin UI"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>initializeWaitListMonitor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<try>try <block>{
					<expr_stmt><expr><call><name><name>Thread</name><operator>.</operator><name>sleep</name></name><argument_list>(<argument><expr><literal type="number">10000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Finished the wait list monitor - Admin UI"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block> <catch>catch <parameter_list>(<param><decl><type><name>InterruptedException</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
					<comment type="line">// TODO Auto-generated catch block</comment>
					<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				}</block></catch></try>
			}</block></while>
		}</block></function>
		
	}</block></class>
}</block></class>
</unit>
