<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Boyang\Desktop\ASE15\subjects\UMAS\src\com\umas\frontend\ManageDeptPeople.java"><package>package <name><name>com</name><operator>.</operator><name>umas</name><operator>.</operator><name>frontend</name></name>;</package>



<comment type="block" format="javadoc">/****************@author Simant Purohit*********************************/</comment>

<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>GridLayout</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>event</name><operator>.</operator><name>ActionEvent</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>event</name><operator>.</operator><name>ActionListener</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>DefaultComboBoxModel</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>JButton</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>JComboBox</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>JLabel</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>JOptionPane</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>JPanel</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>JTabbedPane</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>JTextField</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>JTextArea</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>umas</name><operator>.</operator><name>code</name><operator>.</operator><name>Admin</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>umas</name><operator>.</operator><name>code</name><operator>.</operator><name>Course</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>umas</name><operator>.</operator><name>code</name><operator>.</operator><name>CourseOffered</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>umas</name><operator>.</operator><name>code</name><operator>.</operator><name>CourseSchedule</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>umas</name><operator>.</operator><name>code</name><operator>.</operator><name>DBAnnotation</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>umas</name><operator>.</operator><name>code</name><operator>.</operator><name>Department</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>umas</name><operator>.</operator><name>code</name><operator>.</operator><name>People</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>umas</name><operator>.</operator><name>code</name><operator>.</operator><name>Professor</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>umas</name><operator>.</operator><name>code</name><operator>.</operator><name>Student</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>umas</name><operator>.</operator><name>code</name><operator>.</operator><name>TA</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>umas</name><operator>.</operator><name>code</name><operator>.</operator><name>Course</name><operator>.</operator><name>CourseDoesNotExistException</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>umas</name><operator>.</operator><name>code</name><operator>.</operator><name>CourseOffered</name><operator>.</operator><name>CourseOfferingDoesNotExistException</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>umas</name><operator>.</operator><name>code</name><operator>.</operator><name>Department</name><operator>.</operator><name>DepartmentDoesNotExistException</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>umas</name><operator>.</operator><name>code</name><operator>.</operator><name>People</name><operator>.</operator><name>PersonDoesNotExistException</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>umas</name><operator>.</operator><name>code</name><operator>.</operator><name>Student</name><operator>.</operator><name>levelNotExistException</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>umas</name><operator>.</operator><name>code</name><operator>.</operator><name>TA</name><operator>.</operator><name>AlreadyExistsInTAException</name></name>;</import>


<class><specifier>public</specifier> class <name>ManageDeptPeople</name> <super><extends>extends <name>JPanel</name></extends></super> <block>{

	<decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> <init>= <expr><literal type="number">1L</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>Admin</name></type> <name>admin</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>Department</name></type> <name>adminDepartment</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>ManageDeptPeople</name></type> <name>managePeople</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><specifier>private</specifier> <name>JTextField</name></type> <name>studentNameText</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name><name>JComboBox</name><argument_list type="template">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>levelSelectStudent</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>JTextField</name></type> <name>professorNameText</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>JTextField</name></type> <name>txtToBeDecided</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>JTextField</name></type> <name>txtToBeDecided_1</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name><name>ArrayList</name><argument_list type="template">&lt;<argument><name>Student</name></argument>&gt;</argument_list></name></type> <name>students</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="template">&lt;<argument><name>Student</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name><name>ArrayList</name><argument_list type="template">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>courseOffered</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="template">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name><name>JComboBox</name><argument_list type="template">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>taComboBox</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name><name>JComboBox</name><argument_list type="template">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>courseOfferIDComboBox</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>JTextArea</name></type> <name>txtrStudentDetails</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>JTextArea</name></type> <name>txtrCourseDetails</name></decl>;</decl_stmt>

	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>ManageDeptPeople</name></type> <name>getInstance</name><parameter_list>(<param><decl><type><name>Admin</name></type> <name>a</name></decl></param>)</parameter_list> <block>{
		<try>try <block>{
			<expr_stmt><expr><name>managePeople</name> <operator>=</operator> <operator>new</operator> <call><name>ManageDeptPeople</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch>catch <parameter_list>(<param><decl><type><name><name>Department</name><operator>.</operator><name>DepartmentDoesNotExistException</name></name></type> <name>e</name></decl></param>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		<return>return <expr><name>managePeople</name></expr>;</return>
	}</block></function>

	<constructor><specifier>private</specifier> <name>ManageDeptPeople</name><parameter_list>(<param><decl><type><name>Admin</name></type> <name>a</name></decl></param>)</parameter_list>
			<throws>throws <argument><expr><name><name>Department</name><operator>.</operator><name>DepartmentDoesNotExistException</name></name></expr></argument></throws> <block>{
		<expr_stmt><expr><name>admin</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"deptID"</literal></expr></argument>, <argument><expr><literal type="string">"People"</literal></expr></argument>, <argument><expr><literal type="string">"DepartmentID"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>deptID</name> <init>= <expr><call><name><name>admin</name><operator>.</operator><name>getDeptID</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<expr_stmt><expr><name>adminDepartment</name> <operator>=</operator> <operator>new</operator> <call><name>Department</name><argument_list>(<argument><expr><name>deptID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>setLayout</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>JTabbedPane</name></type> <name>adminTabs</name> <init>= <expr><operator>new</operator> <call><name>JTabbedPane</name><argument_list>(<argument><expr><name><name>JTabbedPane</name><operator>.</operator><name>TOP</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>adminTabs</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">700</literal></expr></argument>, <argument><expr><literal type="number">500</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>adminTabs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>setBounds</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">800</literal></expr></argument>, <argument><expr><literal type="number">600</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>JPanel</name></type> <name>addNewStudent</name> <init>= <expr><operator>new</operator> <call><name>JPanel</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>addNewStudent</name><operator>.</operator><name>setLayout</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>GridLayout</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>adminTabs</name><operator>.</operator><name>addTab</name></name><argument_list>(<argument><expr><literal type="string">"Add A Student"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>addNewStudent</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>JLabel</name></type> <name>studentNameLabel</name> <init>= <expr><operator>new</operator> <call><name>JLabel</name><argument_list>(<argument><expr><literal type="string">"Enter student name"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>addNewStudent</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>studentNameLabel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>studentNameText</name> <operator>=</operator> <operator>new</operator> <call><name>JTextField</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>addNewStudent</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>studentNameText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>studentNameText</name><operator>.</operator><name>setColumns</name></name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>JLabel</name></type> <name>lblNewLabel_1</name> <init>= <expr><operator>new</operator> <call><name>JLabel</name><argument_list>(<argument><expr><literal type="string">"Select Department"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>addNewStudent</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>lblNewLabel_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>JLabel</name></type> <name>lblDepartmentName</name> <init>= <expr><operator>new</operator> <call><name>JLabel</name><argument_list>(
				<argument><expr><call><name><name>adminDepartment</name><operator>.</operator><name>getDepartmentName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>addNewStudent</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>lblDepartmentName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>JLabel</name></type> <name>lblNewLabel</name> <init>= <expr><operator>new</operator> <call><name>JLabel</name><argument_list>(<argument><expr><literal type="string">"Select Level"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>addNewStudent</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>lblNewLabel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>levelSelectStudent</name> <operator>=</operator> <operator>new</operator> <call><name><name>JComboBox</name><argument_list type="template">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>levelSelectStudent</name><operator>.</operator><name>setModel</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>DefaultComboBoxModel</name><argument_list type="template">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name><argument_list>(
				<argument><expr><operator>new</operator> <name><name>Integer</name><index>[]</index></name> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>addNewStudent</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>levelSelectStudent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>JLabel</name></type> <name>lblNewLabel_2</name> <init>= <expr><operator>new</operator> <call><name>JLabel</name><argument_list>(<argument><expr><literal type="string">"Confirm changes"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>addNewStudent</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>lblNewLabel_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>JButton</name></type> <name>addStudentButton</name> <init>= <expr><operator>new</operator> <call><name>JButton</name><argument_list>(<argument><expr><literal type="string">"Add student"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>addStudentButton</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>ActionListener</name></super><argument_list>()</argument_list> <block>{
			<function><type><specifier>public</specifier> <name>void</name></type> <name>actionPerformed</name><parameter_list>(<param><decl><type><name>ActionEvent</name></type> <name>arg0</name></decl></param>)</parameter_list> <block>{
				<decl_stmt><decl><type><name>boolean</name></type> <name>add</name> <init>= <expr><call><name>addStudent</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><name>add</name></expr>)</condition><then> <block>{
					<expr_stmt><expr><call><name>showMessage</name><argument_list>(<argument><expr><literal type="string">"Student added successfully"</literal></expr></argument>, <argument><expr><literal type="string">"Add successfull"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>DepartmentAdminUI</name><operator>.</operator><name>initializeAllTabs</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else>else <block>{
					<expr_stmt><expr><call><name>showMessage</name><argument_list>(<argument><expr><literal type="string">"Student not added"</literal></expr></argument>, <argument><expr><literal type="string">"Add unsuccessfull"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>
			}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>addNewStudent</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>addStudentButton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>JPanel</name></type> <name>addNewProfessor</name> <init>= <expr><operator>new</operator> <call><name>JPanel</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>adminTabs</name><operator>.</operator><name>addTab</name></name><argument_list>(<argument><expr><literal type="string">"Add a professor"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>addNewProfessor</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>addNewProfessor</name><operator>.</operator><name>setLayout</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>GridLayout</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>JLabel</name></type> <name>lblProfessorName</name> <init>= <expr><operator>new</operator> <call><name>JLabel</name><argument_list>(<argument><expr><literal type="string">"Professor name"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>addNewProfessor</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>lblProfessorName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>professorNameText</name> <operator>=</operator> <operator>new</operator> <call><name>JTextField</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>addNewProfessor</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>professorNameText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>professorNameText</name><operator>.</operator><name>setColumns</name></name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>JLabel</name></type> <name>lblSelectDepartment</name> <init>= <expr><operator>new</operator> <call><name>JLabel</name><argument_list>(<argument><expr><literal type="string">"Select Department"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>addNewProfessor</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>lblSelectDepartment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>JLabel</name></type> <name>lblDepartmentName_1</name> <init>= <expr><operator>new</operator> <call><name>JLabel</name><argument_list>(
				<argument><expr><call><name><name>adminDepartment</name><operator>.</operator><name>getDepartmentName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>addNewProfessor</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>lblDepartmentName_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>JLabel</name></type> <name>lblOfficeLocation</name> <init>= <expr><operator>new</operator> <call><name>JLabel</name><argument_list>(<argument><expr><literal type="string">"Office Location"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>addNewProfessor</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>lblOfficeLocation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>txtToBeDecided</name> <operator>=</operator> <operator>new</operator> <call><name>JTextField</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>txtToBeDecided</name><operator>.</operator><name>setEditable</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>txtToBeDecided</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><literal type="string">"To be decided later"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>addNewProfessor</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>txtToBeDecided</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>txtToBeDecided</name><operator>.</operator><name>setColumns</name></name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>JLabel</name></type> <name>lblOfficeHours</name> <init>= <expr><operator>new</operator> <call><name>JLabel</name><argument_list>(<argument><expr><literal type="string">"Office Hours"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>addNewProfessor</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>lblOfficeHours</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>txtToBeDecided_1</name> <operator>=</operator> <operator>new</operator> <call><name>JTextField</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>txtToBeDecided_1</name><operator>.</operator><name>setEditable</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>txtToBeDecided_1</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><literal type="string">"To be decided later"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>addNewProfessor</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>txtToBeDecided_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>txtToBeDecided_1</name><operator>.</operator><name>setColumns</name></name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>JLabel</name></type> <name>lblConfirm</name> <init>= <expr><operator>new</operator> <call><name>JLabel</name><argument_list>(<argument><expr><literal type="string">"Confirm"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>addNewProfessor</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>lblConfirm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>JButton</name></type> <name>addProfessorButton</name> <init>= <expr><operator>new</operator> <call><name>JButton</name><argument_list>(<argument><expr><literal type="string">"Add Professor"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>addProfessorButton</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>ActionListener</name></super><argument_list>()</argument_list> <block>{
			<function><type><specifier>public</specifier> <name>void</name></type> <name>actionPerformed</name><parameter_list>(<param><decl><type><name>ActionEvent</name></type> <name>arg0</name></decl></param>)</parameter_list> <block>{
				<decl_stmt><decl><type><name>boolean</name></type> <name>add</name> <init>= <expr><call><name>addProfessor</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><name>add</name></expr>)</condition><then> <block>{
					<expr_stmt><expr><call><name>showMessage</name><argument_list>(<argument><expr><literal type="string">"Professor added successfully"</literal></expr></argument>,
							<argument><expr><literal type="string">"Add successfull"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>DepartmentAdminUI</name><operator>.</operator><name>initializeAllTabs</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else>else <block>{
					<expr_stmt><expr><call><name>showMessage</name><argument_list>(<argument><expr><literal type="string">"Professor not added"</literal></expr></argument>, <argument><expr><literal type="string">"Add unsuccessfull"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>
			}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>addNewProfessor</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>addProfessorButton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// -------------------Add a teaching assistant</comment>
		<comment type="line">// course-------------------//</comment>
		<decl_stmt><decl><type><name>JPanel</name></type> <name>addTeachingAssistant</name> <init>= <expr><operator>new</operator> <call><name>JPanel</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>adminTabs</name><operator>.</operator><name>addTab</name></name><argument_list>(<argument><expr><literal type="string">"Add a TA"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>addTeachingAssistant</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>addTeachingAssistant</name><operator>.</operator><name>setLayout</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>taComboBox</name> <operator>=</operator> <operator>new</operator> <call><name><name>JComboBox</name><argument_list type="template">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>taComboBox</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>ActionListener</name></super><argument_list>()</argument_list> <block>{
			<function><type><specifier>public</specifier> <name>void</name></type> <name>actionPerformed</name><parameter_list>(<param><decl><type><name>ActionEvent</name></type> <name>arg0</name></decl></param>)</parameter_list> <block>{
				<decl_stmt><decl><type><name>Student</name></type> <name>s</name></decl>;</decl_stmt>
				<try>try <block>{
					<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>new</operator> <call><name>Student</name><argument_list>(<argument><expr><call><name><name>taComboBox</name><operator>.</operator><name>getItemAt</name></name><argument_list>(<argument><expr><call><name><name>taComboBox</name><operator>.</operator><name>getSelectedIndex</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					
					<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><literal type="string">"People"</literal></expr></argument>, <argument><expr><literal type="string">"Name"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					
					<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"gpa"</literal></expr></argument>, <argument><expr><literal type="string">"student"</literal></expr></argument>, <argument><expr><literal type="string">"GPA"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name>double</name></type> <name>gpa</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>getGPA</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					
					<decl_stmt><decl><type><name>String</name></type> <name>details</name> <init>= <expr><literal type="string">"Name: "</literal><operator>+</operator><name>name</name></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><name>details</name><operator>+=</operator> <literal type="string">"\nGPA: "</literal><operator>+</operator><name>gpa</name></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>txtrStudentDetails</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>details</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block> <catch>catch <parameter_list>(<param><decl><type><name><name>People</name><operator>.</operator><name>PersonDoesNotExistException</name></name></type> <name>e</name></decl></param>)</parameter_list> <block>{
					<comment type="line">// TODO Auto-generated catch block</comment>
					<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				}</block></catch></try>
			}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name><name>taComboBox</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><literal type="number">79</literal></expr></argument>, <argument><expr><literal type="number">47</literal></expr></argument>, <argument><expr><literal type="number">162</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>addTeachingAssistant</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>taComboBox</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>courseOfferIDComboBox</name> <operator>=</operator> <operator>new</operator> <call><name><name>JComboBox</name><argument_list type="template">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>courseOfferIDComboBox</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>ActionListener</name></super><argument_list>()</argument_list> <block>{
			<function><type><specifier>public</specifier> <name>void</name></type> <name>actionPerformed</name><parameter_list>(<param><decl><type><name>ActionEvent</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
				<decl_stmt><decl><type><name>CourseOffered</name></type> <name>c</name></decl>;</decl_stmt>
				<try>try <block>{
					<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>new</operator> <call><name>CourseOffered</name><argument_list>(<argument><expr><call><name><name>courseOfferIDComboBox</name><operator>.</operator><name>getItemAt</name></name><argument_list>(<argument><expr><call><name><name>courseOfferIDComboBox</name><operator>.</operator><name>getSelectedIndex</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					
					<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"cName"</literal></expr></argument>, <argument><expr><literal type="string">"courses"</literal></expr></argument>, <argument><expr><literal type="string">"CourseName"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name>String</name></type> <name>cName</name> <init>= <expr><call><name><name>c</name><operator>.</operator><name>getCourseName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					
					<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"prof"</literal></expr></argument>, <argument><expr><literal type="string">"people"</literal></expr></argument>, <argument><expr><literal type="string">"Name"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name>String</name></type> <name>prof</name> <init>= <expr><call><name><name>c</name><operator>.</operator><name>getProfessorName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					
					<decl_stmt><decl><type><name>String</name></type> <name>details</name> <init>= <expr><literal type="string">"Course Name: "</literal><operator>+</operator><name>cName</name></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><name>details</name> <operator>+=</operator> <literal type="string">"\nProfessor: "</literal><operator>+</operator><name>prof</name></expr>;</expr_stmt>
					
					<expr_stmt><expr><call><name><name>txtrCourseDetails</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>details</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block> <catch>catch <parameter_list>(<param><decl><type><name><name>Course</name><operator>.</operator><name>CourseDoesNotExistException</name></name></type> <name>e1</name></decl></param>)</parameter_list> <block>{
					<comment type="line">// TODO Auto-generated catch block</comment>
					<expr_stmt><expr><call><name><name>e1</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				}</block></catch> <catch>catch <parameter_list>(<param><decl><type><name><name>CourseOffered</name><operator>.</operator><name>CourseOfferingDoesNotExistException</name></name></type> <name>e1</name></decl></param>)</parameter_list> <block>{
					<comment type="line">// TODO Auto-generated catch block</comment>
					<expr_stmt><expr><call><name><name>e1</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				}</block></catch></try>
			}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>courseOfferIDComboBox</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><literal type="number">416</literal></expr></argument>, <argument><expr><literal type="number">47</literal></expr></argument>, <argument><expr><literal type="number">162</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>addTeachingAssistant</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>courseOfferIDComboBox</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>JButton</name></type> <name>btnAddTa</name> <init>= <expr><operator>new</operator> <call><name>JButton</name><argument_list>(<argument><expr><literal type="string">"Add TA"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>btnAddTa</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>ActionListener</name></super><argument_list>()</argument_list> <block>{
			<function><type><specifier>public</specifier> <name>void</name></type> <name>actionPerformed</name><parameter_list>(<param><decl><type><name>ActionEvent</name></type> <name>arg0</name></decl></param>)</parameter_list> <block>{
				<if>if<condition>(<expr><call><name><name>taComboBox</name><operator>.</operator><name>getSelectedIndex</name></name><argument_list>()</argument_list></call><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then><block>{
					<expr_stmt><expr><call><name>showMessage</name><argument_list>(<argument><expr><literal type="string">"Please select a student first"</literal></expr></argument>, <argument><expr><literal type="string">"Error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return>return;</return>
				}</block></then></if>
				
				<if>if<condition>(<expr><call><name><name>courseOfferIDComboBox</name><operator>.</operator><name>getSelectedIndex</name></name><argument_list>()</argument_list></call><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then><block>{
					<expr_stmt><expr><call><name>showMessage</name><argument_list>(<argument><expr><literal type="string">"Select a course first"</literal></expr></argument>, <argument><expr><literal type="string">"Error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return>return;</return>
				}</block></then></if>
				
				<try>try <block>{
					<decl_stmt><decl><type><name>Student</name></type> <name>s</name> <init>= <expr><operator>new</operator> <call><name>Student</name><argument_list>(<argument><expr><operator>(</operator><name>Integer</name><operator>)</operator> <call><name><name>taComboBox</name><operator>.</operator><name>getSelectedItem</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					
					<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"uin"</literal></expr></argument>, <argument><expr><literal type="string">"student"</literal></expr></argument>, <argument><expr><literal type="string">"UIN"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name>int</name></type> <name>uin</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>getUIN</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name>TA</name><operator>.</operator><name>addTAtoTAtable</name></name><argument_list>(<argument><expr><name>uin</name></expr></argument>,	<argument><expr><operator>(</operator><name>Integer</name><operator>)</operator> <call><name><name>courseOfferIDComboBox</name><operator>.</operator><name>getSelectedItem</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>showMessage</name><argument_list>(<argument><expr><literal type="string">"Added a TA successfully"</literal></expr></argument>, <argument><expr><literal type="string">"Success"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>DepartmentAdminUI</name><operator>.</operator><name>initializeAllTabs</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					
				}</block> <catch>catch <parameter_list>(<param><decl><type><name><name>TA</name><operator>.</operator><name>AlreadyExistsInTAException</name></name></type> <name>e</name></decl></param>)</parameter_list> <block>{
					<expr_stmt><expr><call><name>showMessage</name><argument_list>(<argument><expr><literal type="string">"TA already exists"</literal></expr></argument>, <argument><expr><literal type="string">"Failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				}</block></catch> <catch>catch <parameter_list>(<param><decl><type><name><name>People</name><operator>.</operator><name>PersonDoesNotExistException</name></name></type> <name>e</name></decl></param>)</parameter_list> <block>{
					<comment type="line">// TODO Auto-generated catch block</comment>
					<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				}</block></catch></try>
			}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>btnAddTa</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><literal type="number">261</literal></expr></argument>, <argument><expr><literal type="number">283</literal></expr></argument>, <argument><expr><literal type="number">136</literal></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>addTeachingAssistant</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>btnAddTa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><name>txtrStudentDetails</name> <operator>=</operator> <operator>new</operator> <call><name>JTextArea</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>txtrStudentDetails</name><operator>.</operator><name>setEditable</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>txtrStudentDetails</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><literal type="string">"Student Details"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>txtrStudentDetails</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><literal type="number">79</literal></expr></argument>, <argument><expr><literal type="number">87</literal></expr></argument>, <argument><expr><literal type="number">162</literal></expr></argument>, <argument><expr><literal type="number">149</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>addTeachingAssistant</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>txtrStudentDetails</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JLabel</name></type> <name>lblSelectStudent</name> <init>= <expr><operator>new</operator> <call><name>JLabel</name><argument_list>(<argument><expr><literal type="string">"Select student"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>lblSelectStudent</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><literal type="number">129</literal></expr></argument>, <argument><expr><literal type="number">22</literal></expr></argument>, <argument><expr><literal type="number">130</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>addTeachingAssistant</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>lblSelectStudent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JLabel</name></type> <name>lblSelectCourse</name> <init>= <expr><operator>new</operator> <call><name>JLabel</name><argument_list>(<argument><expr><literal type="string">"Select Course"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>lblSelectCourse</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><literal type="number">448</literal></expr></argument>, <argument><expr><literal type="number">22</literal></expr></argument>, <argument><expr><literal type="number">111</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>addTeachingAssistant</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>lblSelectCourse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><name>txtrCourseDetails</name> <operator>=</operator> <operator>new</operator> <call><name>JTextArea</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>txtrCourseDetails</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><literal type="string">"Course Details"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>txtrCourseDetails</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><literal type="number">416</literal></expr></argument>, <argument><expr><literal type="number">87</literal></expr></argument>, <argument><expr><literal type="number">162</literal></expr></argument>, <argument><expr><literal type="number">149</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>addTeachingAssistant</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>txtrCourseDetails</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name>initializeValues</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>

	<function><type><specifier>public</specifier> <name>boolean</name></type> <name>checkStringForName</name><parameter_list>(<param><decl><type><name>String</name></type> <name>s</name></decl></param>)</parameter_list> <block>{
		<return>return <expr><call><name><name>s</name><operator>.</operator><name>matches</name></name><argument_list>(<argument><expr><literal type="string">"[a-zA-Z]+( [a-zA-Z]+)?"</literal></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<function><type><specifier>public</specifier> <name>void</name></type> <name>showMessage</name><parameter_list>(<param><decl><type><name>String</name></type> <name>message</name></decl></param>, <param><decl><type><name>String</name></type> <name>title</name></decl></param>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>JOptionPane</name><operator>.</operator><name>showMessageDialog</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name>title</name></expr></argument>,
				<argument><expr><name><name>JOptionPane</name><operator>.</operator><name>INFORMATION_MESSAGE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><type><specifier>public</specifier> <name>boolean</name></type> <name>addStudent</name><parameter_list>()</parameter_list> <block>{
		<decl_stmt><decl><type><name>boolean</name></type> <name>isAdded</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><operator>!</operator><call><name>checkStringForName</name><argument_list>(<argument><expr><call><name><name>studentNameText</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>showMessage</name><argument_list>(<argument><expr><literal type="string">"Student name is in incorrect format"</literal></expr></argument>,
					<argument><expr><literal type="string">"Error in student name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="boolean">false</literal></expr>;</return>
		}</block></then></if>
		<decl_stmt><decl><type><name>Department</name></type> <name>dept</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>dept</name> <operator>=</operator> <name>adminDepartment</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>level</name> <init>= <expr><call><name><name>levelSelectStudent</name><operator>.</operator><name>getSelectedIndex</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<try>try <block>{
			<expr_stmt><expr><name>isAdded</name> <operator>=</operator> <call><name><name>Student</name>
					<operator>.</operator><name>addStudentToDb</name></name><argument_list>(<argument><expr><call><name><name>studentNameText</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dept</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch>catch <parameter_list>(<param><decl><type><name><name>Student</name><operator>.</operator><name>levelNotExistException</name></name></type> <name>e</name></decl></param>)</parameter_list> <block>{
			<comment type="line">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>

		<return>return <expr><name>isAdded</name></expr>;</return>
	}</block></function>

	<function><type><specifier>public</specifier> <name>boolean</name></type> <name>addProfessor</name><parameter_list>()</parameter_list> <block>{
		<decl_stmt><decl><type><name>boolean</name></type> <name>isAdded</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><operator>!</operator><call><name>checkStringForName</name><argument_list>(<argument><expr><call><name><name>professorNameText</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>showMessage</name><argument_list>(<argument><expr><literal type="string">"Professor name is in incorrect format"</literal></expr></argument>,
					<argument><expr><literal type="string">"Error in professor name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="boolean">false</literal></expr>;</return>
		}</block></then></if>
		<decl_stmt><decl><type><name>Department</name></type> <name>dept</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>dept</name> <operator>=</operator> <name>adminDepartment</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>isAdded</name> <operator>=</operator> <call><name><name>Professor</name><operator>.</operator><name>addProfToDb</name></name><argument_list>(<argument><expr><call><name><name>professorNameText</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dept</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>isAdded</name></expr>;</return>

	}</block></function>

	<function><type><specifier>public</specifier> <name>void</name></type> <name>initializeValues</name><parameter_list>()</parameter_list> <block>{

		<decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="template">&lt;<argument><name>Student</name></argument>&gt;</argument_list></name></type> <name>allStudents</name> <init>= <expr><call><name><name>Student</name><operator>.</operator><name>getAllStudents</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>students</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="template">&lt;<argument><name>Student</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><decl><type><name>Student</name></type> <name>s</name> <range>: <expr><name>allStudents</name></expr></range></decl></init>)</control> <block>{
			
			<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"sDeptID"</literal></expr></argument>, <argument><expr><literal type="string">"people"</literal></expr></argument>, <argument><expr><literal type="string">"DepartmentID"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>sDeptID</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>getDeptID</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"aDeptID"</literal></expr></argument>, <argument><expr><literal type="string">"people"</literal></expr></argument>, <argument><expr><literal type="string">"DepartmentID"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>aDeptID</name> <init>= <expr><call><name><name>adminDepartment</name><operator>.</operator><name>getDepartmentID</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<if>if <condition>(<expr><name>sDeptID</name> <operator>==</operator> <name>aDeptID</name></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name><name>students</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></for>
		
		<decl_stmt><decl><type><name><name>DefaultComboBoxModel</name><argument_list type="template">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>allStudentsModel</name> <init>= <expr><operator>new</operator> <call><name><name>DefaultComboBoxModel</name><argument_list type="template">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>Student</name></type> <name>s</name> <range>: <expr><name>students</name></expr></range></decl></init>)</control> <block>{
			<expr_stmt><expr><call><name><name>allStudentsModel</name><operator>.</operator><name>addElement</name></name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>getUIN</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
		
		<decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="template">&lt;<argument><name>TA</name></argument>&gt;</argument_list></name></type> <name>tas</name> <init>= <expr><call><name><name>TA</name><operator>.</operator><name>getAllTAs</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>Student</name></type> <name>s</name> <range>: <expr><name>tas</name></expr></range></decl></init>)</control> <block>{
			<expr_stmt><expr><call><name><name>allStudentsModel</name><operator>.</operator><name>addElement</name></name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>getUIN</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
		<expr_stmt><expr><call><name><name>taComboBox</name><operator>.</operator><name>setModel</name></name><argument_list>(<argument><expr><name>allStudentsModel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<if>if<condition>(<expr><call><name><name>allStudentsModel</name><operator>.</operator><name>getSize</name></name><argument_list>()</argument_list></call><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><call><name><name>taComboBox</name><operator>.</operator><name>setSelectedIndex</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

		<decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="template">&lt;<argument><name>CourseSchedule</name></argument>&gt;</argument_list></name></type> <name>allCoursesScheduled</name> <init>= <expr><call><name><name>CourseSchedule</name><operator>.</operator><name>getAllScheduledCourses</name></name><argument_list>(<argument><expr><name>adminDepartment</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>courseOffered</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="template">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><decl><type><name>CourseSchedule</name></type> <name>cs</name> <range>: <expr><name>allCoursesScheduled</name></expr></range></decl></init>)</control> <block>{
			<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"offerID"</literal></expr></argument>, <argument><expr><literal type="string">"courseschedule"</literal></expr></argument>, <argument><expr><literal type="string">"OfferID"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>offerID</name> <init>= <expr><call><name><name>cs</name><operator>.</operator><name>getOfferID</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>courseOffered</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>offerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
		
		<decl_stmt><decl><type><name><name>DefaultComboBoxModel</name><argument_list type="template">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>allIDsModel</name> <init>= <expr><operator>new</operator> <call><name><name>DefaultComboBoxModel</name><argument_list type="template">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>Integer</name></type> <name>i</name> <range>: <expr><name>courseOffered</name></expr></range></decl></init>)</control> <block>{
			<expr_stmt><expr><call><name><name>allIDsModel</name><operator>.</operator><name>addElement</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
		<expr_stmt><expr><call><name><name>courseOfferIDComboBox</name><operator>.</operator><name>setModel</name></name><argument_list>(<argument><expr><name>allIDsModel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if<condition>(<expr><call><name><name>allIDsModel</name><operator>.</operator><name>getSize</name></name><argument_list>()</argument_list></call><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><call><name><name>courseOfferIDComboBox</name><operator>.</operator><name>setSelectedIndex</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
	}</block></function>
}</block></class>
</unit>
