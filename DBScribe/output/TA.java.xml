<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Boyang\Desktop\ASE15\subjects\UMAS\src\com\umas\code\TA.java"><package>package <name><name>com</name><operator>.</operator><name>umas</name><operator>.</operator><name>code</name></name>;</package>


<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>annotation</name><operator>.</operator><name>ElementType</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Retention</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>annotation</name><operator>.</operator><name>RetentionPolicy</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Target</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>Connection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>PreparedStatement</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>ResultSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>SQLException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>



<comment type="block" format="javadoc">/**
 * @author Akshay
 * 
 */</comment>

<comment type="block" format="javadoc">/*************** TA.JAVA CLASS WAS WRITTEN BY AKSHAY THIRKATEH ********************************/</comment>

<class><specifier>public</specifier> class <name>TA</name> <super><extends>extends <name>Student</name></extends></super> <block>{
	

	<comment type="line">//TA class constructor takes in the UIN and then sets the values to the UIn specific </comment>
	<constructor><specifier>public</specifier> <name>TA</name><parameter_list>(<param><decl><type><name>int</name></type> <name>UIN</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>PersonDoesNotExistException</name></expr></argument></throws> <block>{
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line">//calls the super class</comment>
		
		<try>try<block>{
			<decl_stmt><decl><type><name>Connection</name></type> <name>conn</name> <init>= <expr><call><name><name>Database</name><operator>.</operator><name>getConnection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//get the connection</comment>
			<decl_stmt><decl><type><name>String</name></type> <name>SQLStudentTASelect</name><init>=<expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
			<try>try<block>{
			
				<if>if<condition>(<expr><name>conn</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then><block>{
					
					<expr_stmt><expr><name>SQLStudentTASelect</name> <operator>=</operator> <literal type="string">"Select * From teachingassistant where TaUIN=?;"</literal></expr>;</expr_stmt><comment type="line">//write the query</comment>
				}</block></then></if>
				
				<decl_stmt><decl><type><name>PreparedStatement</name></type> <name>stmtForSelect</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>prepareStatement</name></name><argument_list>(<argument><expr><name>SQLStudentTASelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>stmtForSelect</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line">//set the UIN</comment>
				
				<decl_stmt><decl><type><name>ResultSet</name></type> <name>rs</name> <init>=  <expr><call><name><name>stmtForSelect</name><operator>.</operator><name>executeQuery</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//execute the query</comment>
					
					<if>if<condition>(<expr><call><name><name>rs</name><operator>.</operator><name>first</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
					<block>{
						<comment type="line">//if the resultset exists then get the values</comment>
						
						<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"retrievedTAOfferID"</literal></expr></argument>, <argument><expr><literal type="string">"teachingassistant"</literal></expr></argument>, <argument><expr><literal type="string">"OfferID"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				        <decl_stmt><decl><type><name>int</name></type> <name>retrievedTAOfferID</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"OfferID"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				        
				        <expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"retrievedTAOfficeHours"</literal></expr></argument>, <argument><expr><literal type="string">"teachingassistant"</literal></expr></argument>, <argument><expr><literal type="string">"TaOfficeHours"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				        <decl_stmt><decl><type><name>String</name></type> <name>retrievedTAOfficeHours</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"TaOfficeHours"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				        
				        <expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"retrievedTAOfficeAddress"</literal></expr></argument>, <argument><expr><literal type="string">"teachingassistant"</literal></expr></argument>, <argument><expr><literal type="string">"TaOfficeLocation"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				        <decl_stmt><decl><type><name>String</name></type> <name>retrievedTAOfficeAddress</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"TaOfficeLocation"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



					}</block></then>
					
					<else>else
					<block>{
						<comment type="line">//else the UIN does not exist</comment>
						<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"UIN does not exist in the TA table"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<throw>throw <expr><operator>new</operator> <call><name>PersonDoesNotExistException</name><argument_list>()</argument_list></call></expr>;</throw>

					}</block></else></if>
					
				
			
		
	}</block>
			<comment type="line">//catch the SQL exception</comment>
			<catch>catch<parameter_list>(<param><decl><type><name>SQLException</name></type> <name>e</name></decl></param>)</parameter_list><block>{
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>print</name></name><argument_list>(<argument><expr><literal type="string">"SQL exception in student const"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>	
			}</block></catch></try>
		}</block>
			
		<comment type="line">//catch the person deos not exist exception</comment>
		<catch>catch<parameter_list>(<param><decl><type><name>PersonDoesNotExistException</name></type> <name>e</name></decl></param>)</parameter_list><block>{
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<throw>throw <expr><operator>new</operator> <call><name>PersonDoesNotExistException</name><argument_list>()</argument_list></call></expr>;</throw>
			
		}</block></catch>
		
		<comment type="line">//finally block</comment>
		<finally>finally<block>{
			
			<comment type="line">//System.out.println("retrieved");</comment>
		}</block></finally></try>
		<comment type="line">// TODO Auto-generated constructor stub</comment>
	}</block></constructor>

	<comment type="block">/*
	 * updateTA office sddress function takes in the inputs of the UIN of the TA and the
	 * offer ID of the course and the new office address
	 * 
	 * Calls the addtoEmployee function which returns a boolean value 
	 * 
	 * it updated it returns true
	 * 
	 * else the function returns false
	 */</comment>

	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>updateTaOfficeAddress</name><parameter_list>(<param><decl><type><name>int</name></type> <name>UIN</name></decl></param>, <param><decl><type><name>int</name></type> <name>offerID</name></decl></param>, <param><decl><type><name>String</name></type> <name>newOfficeAddress</name></decl></param>)</parameter_list><block>{
		
		<decl_stmt><decl><type><name>boolean</name></type> <name>isUpdated</name><init>=<expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt> 
		
		<comment type="line">//check for null</comment>
		<if>if<condition>(<expr><name>newOfficeAddress</name><operator>==</operator><literal type="null">null</literal></expr>)</condition><then><block>{
			<return>return <expr><literal type="boolean">false</literal></expr>;</return>
			
		}</block></then></if>
		<comment type="line">//check the length</comment>
		<if>if<condition>(<expr><call><name><name>newOfficeAddress</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{
			<return>return <expr><literal type="boolean">false</literal></expr>;</return>
		}</block></then></if>
		
		
		<decl_stmt><decl><type><name>boolean</name></type> <name>check</name><init>=<expr><call><name>addTAtoTAtableCheck</name><argument_list>(<argument><expr><name>UIN</name></expr></argument>, <argument><expr><name>offerID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//check if TA exists</comment>
		<if>if<condition>(<expr><operator>!</operator><name>check</name></expr>)</condition><then><block>{
			<return>return <expr><literal type="boolean">false</literal></expr>;</return>
		}</block></then></if>
		
		<try>try<block>{
			<decl_stmt><decl><type><name>Connection</name></type> <name>conn</name> <init>= <expr><call><name><name>Database</name><operator>.</operator><name>getConnection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//get the connection</comment>
			
			<try>try<block>{
				
				<decl_stmt><decl><type><name>CourseOffered</name></type> <name>c</name><init>=<expr><operator>new</operator> <call><name>CourseOffered</name><argument_list>(<argument><expr><name>offerID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						
						<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Updating data in the database"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name>String</name></type> <name>SQLPeopleInsert</name><init>= <expr><literal type="string">"UPDATE teachingassistant SET TaOfficeLocation= ? where TaUIN=? and OfferID=? ;"</literal></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name>PreparedStatement</name></type> <name>stmt</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>prepareStatement</name></name><argument_list>(<argument><expr><name>SQLPeopleInsert</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name>stmt</name><operator>.</operator><name>setString</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>newOfficeAddress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line">//set the values</comment>
						<expr_stmt><expr><call><name><name>stmt</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line">//set the values</comment>
						<expr_stmt><expr><call><name><name>stmt</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>offerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line">//set the values</comment>
						<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name><name>stmt</name><operator>.</operator><name>executeUpdate</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//execute the query</comment>
						
						<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"newOfficeAddress"</literal></expr></argument>, <argument><expr><literal type="string">"teachingassistant"</literal></expr></argument>, <argument><expr><literal type="string">"TaOfficeLocation"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"UIN"</literal></expr></argument>, <argument><expr><literal type="string">"teachingassistant"</literal></expr></argument>, <argument><expr><literal type="string">"TaUIN"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"offerID"</literal></expr></argument>, <argument><expr><literal type="string">"teachingassistant"</literal></expr></argument>, <argument><expr><literal type="string">"OfferID"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						
						<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Updated"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name>isUpdated</name><operator>=</operator><literal type="boolean">true</literal></expr>;</expr_stmt>
						
						<expr_stmt><expr><call><name><name>Database</name><operator>.</operator><name>commitTransaction</name></name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						
					
					
			}</block>
			<comment type="line">//catch block for SQL exception</comment>
			<catch>catch<parameter_list>(<param><decl><type><name>SQLException</name></type> <name>e</name></decl></param>)</parameter_list><block>{
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Error adding/updating to database"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	
			}</block></catch></try>
			
		}</block>
		<comment type="line">//outer catch block for other exceptions</comment>
		<catch>catch <parameter_list>(<param><decl><type><name><name>Course</name><operator>.</operator><name>CourseDoesNotExistException</name></name></type> <name>e1</name></decl></param>)</parameter_list> <block>{
			<comment type="line">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name>e1</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></catch>
		
		<catch>catch <parameter_list>(<param><decl><type><name><name>CourseOffered</name><operator>.</operator><name>CourseOfferingDoesNotExistException</name></name></type> <name>e1</name></decl></param>)</parameter_list> <block>{
			<comment type="line">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name>e1</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></catch>
		<catch>catch<parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list><block>{
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Connection failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
		}</block></catch>
	
		
		<finally>finally<block>{
			
			<comment type="line">//System.out.println("retrieved");</comment>
		}</block></finally></try>
		
	<return>return <expr><name>isUpdated</name></expr>;</return>
		
	}</block></function>
	
	
	<comment type="block">/*
	 * updateTA office hours function takes in the inputs of the UIN of the TA and the
	 * offer ID of the course and the new office hours
	 * 
	 * Calls the addtoEmployee function which returns a boolean value 
	 * 
	 * it updated it returns true
	 * 
	 * else the function returns false
	 */</comment>
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>updateTaOfficeHours</name><parameter_list>(<param><decl><type><name>int</name></type> <name>UIN</name></decl></param>, <param><decl><type><name>int</name></type> <name>offerID</name></decl></param>, <param><decl><type><name>String</name></type> <name>newOfficeHours</name></decl></param>)</parameter_list><block>{
		
		<decl_stmt><decl><type><name>boolean</name></type> <name>isUpdated</name><init>=<expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt> <comment type="line">//set to false</comment>
		
		<comment type="line">//check for null</comment>
		<if>if<condition>(<expr><name>newOfficeHours</name><operator>==</operator><literal type="null">null</literal></expr>)</condition><then><block>{
			<return>return <expr><literal type="boolean">false</literal></expr>;</return>
			
		}</block></then></if>
		<comment type="line">//check the length</comment>
		<if>if<condition>(<expr><call><name><name>newOfficeHours</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{
			<return>return <expr><literal type="boolean">false</literal></expr>;</return>
		}</block></then></if>
		
		
		<decl_stmt><decl><type><name>boolean</name></type> <name>check</name><init>=<expr><call><name>addTAtoTAtableCheck</name><argument_list>(<argument><expr><name>UIN</name></expr></argument>, <argument><expr><name>offerID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//check if the Uin exists</comment>
		<if>if<condition>(<expr><operator>!</operator><name>check</name></expr>)</condition><then><block>{
			<return>return <expr><literal type="boolean">false</literal></expr>;</return>
		}</block></then></if>
		
		
		<try>try<block>{
			<decl_stmt><decl><type><name>Connection</name></type> <name>conn</name> <init>= <expr><call><name><name>Database</name><operator>.</operator><name>getConnection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//get the connection</comment>
			
			<try>try<block>{
				
				    <decl_stmt><decl><type><name>CourseOffered</name></type> <name>c</name><init>=<expr><operator>new</operator> <call><name>CourseOffered</name><argument_list>(<argument><expr><name>offerID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						
						<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Updating data in the database"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name>String</name></type> <name>SQLPeopleInsert</name><init>= <expr><literal type="string">"UPDATE teachingassistant SET TaOfficeHours= ? where TaUIN=? and OfferID=? ;"</literal></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name>PreparedStatement</name></type> <name>stmt</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>prepareStatement</name></name><argument_list>(<argument><expr><name>SQLPeopleInsert</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name>stmt</name><operator>.</operator><name>setString</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>newOfficeHours</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line">//set the values</comment>
						<expr_stmt><expr><call><name><name>stmt</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line">//set the values</comment>
						<expr_stmt><expr><call><name><name>stmt</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>offerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line">//set the values</comment>
						<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name><name>stmt</name><operator>.</operator><name>executeUpdate</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//execute the query</comment>
						
						<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"newOfficeHours"</literal></expr></argument>, <argument><expr><literal type="string">"teachingassistant"</literal></expr></argument>, <argument><expr><literal type="string">"TaOfficeHours"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"UIN"</literal></expr></argument>, <argument><expr><literal type="string">"teachingassistant"</literal></expr></argument>, <argument><expr><literal type="string">"TaUIN"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"offerID"</literal></expr></argument>, <argument><expr><literal type="string">"teachingassistant"</literal></expr></argument>, <argument><expr><literal type="string">"OfferID"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						
						<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Updated"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name>isUpdated</name><operator>=</operator><literal type="boolean">true</literal></expr>;</expr_stmt>
						
						<expr_stmt><expr><call><name><name>Database</name><operator>.</operator><name>commitTransaction</name></name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						
					
					
			}</block>
			<comment type="line">//catch block for SQL query</comment>
			<catch>catch<parameter_list>(<param><decl><type><name>SQLException</name></type> <name>e</name></decl></param>)</parameter_list><block>{
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Error adding/updating to database"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	
			}</block></catch></try>
			
		}</block>
		<comment type="line">//catch block </comment>
		<catch>catch<parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list><block>{
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Connection failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
		}</block></catch>
		<comment type="line">//finally block</comment>
		<finally>finally<block>{
			
			<comment type="line">//System.out.println("retrieved");</comment>
		}</block></finally></try>
		
	<return>return <expr><name>isUpdated</name></expr>;</return>
		
	}</block></function>
	
	<comment type="block">/*this function is to retrieve the office address of the Ta
	 * 
	 * passed is the offer ID and the UIN
	 * 
	 * it returns a string */</comment>
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getTAOfficeAddress</name><parameter_list>(<param><decl><type><name>int</name></type> <name>UIN</name></decl></param>, <param><decl><type><name>int</name></type> <name>offerID</name></decl></param>)</parameter_list><block>{
		
		
		<try>try<block>{
			<decl_stmt><decl><type><name>Connection</name></type> <name>conn</name> <init>= <expr><call><name><name>Database</name><operator>.</operator><name>getConnection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//get the connection</comment>
			
			<try>try<block>{
				
				    <decl_stmt><decl><type><name>CourseOffered</name></type> <name>c</name><init>=<expr><operator>new</operator> <call><name>CourseOffered</name><argument_list>(<argument><expr><name>offerID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						
						<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"selecting TA s office location"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name>String</name></type> <name>SQLTASelect</name><init>= <expr><literal type="string">"select * from teachingassistant where TaUIN=? and OfferID=? ;"</literal></expr></init></decl>;</decl_stmt><comment type="line">//write the query</comment>
						<decl_stmt><decl><type><name>PreparedStatement</name></type> <name>stmt</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>prepareStatement</name></name><argument_list>(<argument><expr><name>SQLTASelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name>stmt</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line">//set the values</comment>
						<expr_stmt><expr><call><name><name>stmt</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>offerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line">//set the values</comment>
						<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line">//set the values</comment>
						<decl_stmt><decl><type><name>ResultSet</name></type> <name>rs</name><init>=<expr><call><name><name>stmt</name><operator>.</operator><name>executeQuery</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//execute the queries</comment>
						<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Retreived"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						
						<if>if<condition>(<expr><call><name><name>rs</name><operator>.</operator><name>first</name></name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
							
							<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"getTAOfficeLocation"</literal></expr></argument>, <argument><expr><literal type="string">"teachingassistant"</literal></expr></argument>, <argument><expr><literal type="string">"TaOfficeLocation"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<decl_stmt><decl><type><name>String</name></type> <name>getTAOfficeLocation</name><init>=<expr><call><name><name>rs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"TaOfficeLocation"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//get the values</comment>
							<return>return <expr><name>getTAOfficeLocation</name></expr>;</return>
						}</block></then></if>
					
			}</block>
			<comment type="line">//catch block</comment>
			<catch>catch<parameter_list>(<param><decl><type><name>SQLException</name></type> <name>e</name></decl></param>)</parameter_list><block>{
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Error adding/updating to database"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	
			}</block></catch></try>
			
		}</block>
		<comment type="line">//catch block </comment>
		<catch>catch<parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list><block>{
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Connection failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
		}</block></catch>
		<comment type="line">//finally block </comment>
		<finally>finally<block>{
			
			<comment type="line">//System.out.println("retrieved");</comment>
		}</block></finally></try>
		
	<return>return <expr><literal type="null">null</literal></expr>;</return>
		
	}</block></function>
	
	
	<comment type="block">/*this function is to retrieve the office hours of the Ta
	 * 
	 * passed is the offer ID and the UIN
	 * 
	 * it returns a string */</comment>
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getTAOfficeHours</name><parameter_list>(<param><decl><type><name>int</name></type> <name>UIN</name></decl></param>, <param><decl><type><name>int</name></type> <name>offerID</name></decl></param>)</parameter_list><block>{
		
		
		<try>try<block>{
			<decl_stmt><decl><type><name>Connection</name></type> <name>conn</name> <init>= <expr><call><name><name>Database</name><operator>.</operator><name>getConnection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//get the connection</comment>
			
			<try>try<block>{
				
				<decl_stmt><decl><type><name>CourseOffered</name></type> <name>c</name><init>=<expr><operator>new</operator> <call><name>CourseOffered</name><argument_list>(<argument><expr><name>offerID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						
						<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"selecting TA s office hours"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name>String</name></type> <name>SQLTASelect</name><init>= <expr><literal type="string">"select * from teachingassistant where TaUIN=? and OfferID=? ;"</literal></expr></init></decl>;</decl_stmt><comment type="line">//write the query</comment>
						<decl_stmt><decl><type><name>PreparedStatement</name></type> <name>stmt</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>prepareStatement</name></name><argument_list>(<argument><expr><name>SQLTASelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name>stmt</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line">//set the values</comment>
						<expr_stmt><expr><call><name><name>stmt</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>offerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line">//set the values</comment>
						<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name>ResultSet</name></type> <name>rs</name><init>=<expr><call><name><name>stmt</name><operator>.</operator><name>executeQuery</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Retreived"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						
						<if>if<condition>(<expr><call><name><name>rs</name><operator>.</operator><name>first</name></name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
							<comment type="line">//if the resultset exists</comment>
							<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"getTAOfficeHours"</literal></expr></argument>, <argument><expr><literal type="string">"teachingassistant"</literal></expr></argument>, <argument><expr><literal type="string">"TaOfficeHours"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<decl_stmt><decl><type><name>String</name></type> <name>getTAOfficeHours</name><init>=<expr><call><name><name>rs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"TaOfficeHours"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
							<return>return <expr><name>getTAOfficeHours</name></expr>;</return>
						}</block></then></if>
					
			}</block>
			<comment type="line">//catch the SQL exception</comment>
			<catch>catch<parameter_list>(<param><decl><type><name>SQLException</name></type> <name>e</name></decl></param>)</parameter_list><block>{
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Error adding/updating to database"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	
			}</block></catch></try>
			
		}</block>
		<comment type="line">//catch block </comment>
		<catch>catch<parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list><block>{
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Connection failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
		}</block></catch>
		<comment type="line">//finally block</comment>
		<finally>finally<block>{
			
			<comment type="line">//System.out.println("retrieved");</comment>
		}</block></finally></try>
		
	<return>return <expr><literal type="null">null</literal></expr>;</return>
		
	}</block></function>
	
	
	
	<comment type="block">/*This functions checks if the passed offer ID is a valid and current
	 * 
	 * if true it then checks if there exists an employee with the same UIN
	 * 
	 * if an employee exists it returns true
	 * 
	 * if the addToTATableCheck function does not return true
	 * 
	 * then it adds it to the Ta table with the TaUIN and Offer ID
	 * 
	 * */</comment>	
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>addTAtoTAtable</name><parameter_list>(<param><decl><type><name>int</name></type> <name>UIN</name></decl></param>, <param><decl><type><name>int</name></type> <name>offerID</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>AlreadyExistsInTAException</name></expr></argument></throws><block>{

				
		<decl_stmt><decl><type><name>boolean</name></type> <name>isAdded</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt><comment type="line">//set it to false</comment>

		<try>try <block>{
			<decl_stmt><decl><type><name>Connection</name></type> <name>conn</name> <init>= <expr><call><name><name>Database</name><operator>.</operator><name>getConnection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//get the connection</comment>

				<try>try<block>{
					<decl_stmt><decl><type><name>Student</name></type> <name>stud</name><init>=<expr><operator>new</operator> <call><name>Student</name><argument_list>(<argument><expr><name>UIN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>CourseOffered</name></type> <name>c</name><init>=<expr><operator>new</operator> <call><name>CourseOffered</name><argument_list>(<argument><expr><name>offerID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				}</block>
				<catch>catch <parameter_list>(<param><decl><type><name><name>Student</name><operator>.</operator><name>PersonDoesNotExistException</name></name></type> <name>e</name></decl></param>)</parameter_list> <block>{
					<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Not a student"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return>return <expr><literal type="boolean">false</literal></expr>;</return>

				}</block></catch> <catch>catch <parameter_list>(<param><decl><type><name><name>Course</name><operator>.</operator><name>CourseDoesNotExistException</name></name></type> <name>e</name></decl></param>)</parameter_list> <block>{
					<comment type="line">// TODO Auto-generated catch block</comment>
					<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				}</block></catch> <catch>catch <parameter_list>(<param><decl><type><name><name>CourseOffered</name><operator>.</operator><name>CourseOfferingDoesNotExistException</name></name></type> <name>e</name></decl></param>)</parameter_list> <block>{
					<comment type="line">// TODO Auto-generated catch block</comment>
					<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				}</block></catch></try>

				<decl_stmt><decl><type><name>boolean</name></type> <name>ifExists</name> <init>= <expr><call><name>addTAtoTAtableCheck</name><argument_list>(<argument><expr><name>UIN</name></expr></argument>, <argument><expr><name>offerID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//check if it exists</comment>

				<if>if <condition>(<expr><name>ifExists</name></expr>)</condition><then> <block>{
					<throw>throw <expr><operator>new</operator> <call><name>AlreadyExistsInTAException</name><argument_list>()</argument_list></call></expr>;</throw>
				}</block></then>

				<else>else <block>{

					<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Adding new data into the database"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					
					
					<decl_stmt><decl><type><name>String</name></type> <name>SQLPeopleInsert</name> <init>= <expr><literal type="string">"Insert into teachingassistant (TaUIN, OfferID) Values (?,?);"</literal></expr></init></decl>;</decl_stmt><comment type="line">//write the query</comment>
					<decl_stmt><decl><type><name>PreparedStatement</name></type> <name>stmt</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>prepareStatement</name></name><argument_list>(<argument><expr><name>SQLPeopleInsert</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name>stmt</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line">//set the values</comment>
					<expr_stmt><expr><call><name><name>stmt</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>offerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line">//set the values</comment>
					<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name><name>stmt</name><operator>.</operator><name>executeUpdate</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//execute the query</comment>
					
					<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"UIN"</literal></expr></argument>, <argument><expr><literal type="string">"teachingassistant"</literal></expr></argument>, <argument><expr><literal type="string">"TaUIN"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"offerID"</literal></expr></argument>, <argument><expr><literal type="string">"teachingassistant"</literal></expr></argument>, <argument><expr><literal type="string">"OfferID"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					
					<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Inserted"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>isAdded</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>updateStudentToTA</name><argument_list>(<argument><expr><name>UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line">//call the update function</comment>

				}</block></else></if>

			}</block>
			<comment type="line">//catch block </comment>
			<catch>catch <parameter_list>(<param><decl><type><name>SQLException</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Error adding/updating to database"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch>

		
		<comment type="line">//catch the already exists exception</comment>
		<catch>catch <parameter_list>(<param><decl><type><name>AlreadyExistsInTAException</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<throw>throw <expr><operator>new</operator> <call><name>AlreadyExistsInTAException</name><argument_list>()</argument_list></call></expr>;</throw>

		}</block></catch>

		<finally>finally <block>{

			<comment type="line">// System.out.println("retrieved");</comment>
		}</block></finally></try>

		<return>return <expr><name>isAdded</name></expr>;</return>

	}</block></function>

	
	<comment type="block">/*This functions checks if the passed offer ID is a valid and current
	 * 
	 * if true it then checks if there exists an TA with the same UIN
	 * 
	 * if an TA exists it returns true
	 * 
	 * else it returns false
	 * 
	 * */</comment>	
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>addTAtoTAtableCheck</name><parameter_list>(<param><decl><type><name>int</name></type> <name>UIN</name></decl></param>, <param><decl><type><name>int</name></type> <name>offerID</name></decl></param>)</parameter_list> <block>{

		<decl_stmt><decl><type><name>boolean</name></type> <name>isExisting</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt><comment type="line">//set it to false</comment>

		<try>try <block>{
			<decl_stmt><decl><type><name>Connection</name></type> <name>conn</name> <init>= <expr><call><name><name>Database</name><operator>.</operator><name>getConnection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//get the connection</comment>
			<decl_stmt><decl><type><name>String</name></type> <name>SQLPeopleSelect</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

			<try>try <block>{

				<expr_stmt><expr><name>SQLPeopleSelect</name> <operator>=</operator> <literal type="string">"Select TaUIN From teachingassistant where OfferID=? and TaUIN= ?;"</literal></expr>;</expr_stmt><comment type="line">//write the query</comment>
				<decl_stmt><decl><type><name>PreparedStatement</name></type> <name>stmt</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>prepareStatement</name></name><argument_list>(<argument><expr><name>SQLPeopleSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>stmt</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>offerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line">//set the values</comment>
				<expr_stmt><expr><call><name><name>stmt</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line">//set the values</comment>
				<decl_stmt><decl><type><name>ResultSet</name></type> <name>rs</name> <init>= <expr><call><name><name>stmt</name><operator>.</operator><name>executeQuery</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//execute the query</comment>

				<if>if <condition>(<expr><call><name><name>rs</name><operator>.</operator><name>first</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
					<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>UIN</name><operator>+</operator> <literal type="string">"already exists as a TA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return>return <expr><literal type="boolean">true</literal></expr>;</return>
				}</block></then></if>

			}</block>
			<comment type="line">//catch the exception</comment>
			<catch>catch <parameter_list>(<param><decl><type><name>SQLException</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Error adding/updating to database"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
			
		}</block>
		<comment type="line">//catch block</comment>
		<catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Connection failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></catch>
		<comment type="line">//finally</comment>
		<finally>finally <block>{

			<comment type="line">// System.out.println("retrieved");</comment>
		}</block></finally></try>

		<return>return <expr><name>isExisting</name></expr>;</return>

	}</block></function>

	<comment type="block">/*
	 * getAllAdmin function returns an arraylist of the admins from the
	 * database.
	 * 
	 * It retrieves the data from the people table.
	 */</comment>
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>ArrayList</name><argument_list type="template">&lt;<argument><name>TA</name></argument>&gt;</argument_list></name></type> <name>getAllTAs</name><parameter_list>()</parameter_list> <block>{


		<decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="template">&lt;<argument><name>TA</name></argument>&gt;</argument_list></name></type> <name>getAllTAs</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="template">&lt;<argument><name>TA</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//initialize an arraylist</comment>

		<try>try <block>{
			<decl_stmt><decl><type><name>Connection</name></type> <name>conn</name> <init>= <expr><call><name><name>Database</name><operator>.</operator><name>getConnection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//get the connection</comment>

			<try>try <block>{
				<if>if <condition>(<expr><name>conn</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{

					<comment type="line">// Retrieve all the professors from one department</comment>
					<decl_stmt><decl><type><name>String</name></type> <name>ProfessorSelect</name> <init>= <expr><literal type="string">"Select *"</literal>
							<operator>+</operator> <literal type="string">" FROM people"</literal> <operator>+</operator> <literal type="string">" WHERE PositionID=4"</literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>PreparedStatement</name></type> <name>statement</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>prepareStatement</name></name><argument_list>(<argument><expr><name>ProfessorSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>ResultSet</name></type> <name>rs</name> <init>= <expr><call><name><name>statement</name><operator>.</operator><name>executeQuery</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//execute the query</comment>

					<while>while <condition>(<expr><call><name><name>rs</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{

						<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"retreivedTAUIN"</literal></expr></argument>, <argument><expr><literal type="string">"people"</literal></expr></argument>, <argument><expr><literal type="string">"UIN"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name>int</name></type> <name>retreivedTAUIN</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"UIN"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<comment type="line">// System.out.println(retreivedProfUserNames);</comment>
						<decl_stmt><decl><type><name>TA</name></type> <name>teachingAssistant</name></decl>;</decl_stmt>
						<try>try <block>{
							<expr_stmt><expr><name>teachingAssistant</name> <operator>=</operator> <operator>new</operator> <call><name>TA</name><argument_list>(<argument><expr><name>retreivedTAUIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name><name>getAllTAs</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>teachingAssistant</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line">//add the retreived TA objects to the arraylist</comment>
							
							<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"getTaUserName"</literal></expr></argument>, <argument><expr><literal type="string">"people"</literal></expr></argument>, <argument><expr><literal type="string">"Username"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<decl_stmt><decl><type><name>String</name></type> <name>getTaUserName</name><init>=<expr><call><name><name>teachingAssistant</name><operator>.</operator><name>getUserName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
							<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>getTaUserName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							
						}</block> <catch>catch <parameter_list>(<param><decl><type><name>PersonDoesNotExistException</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
							<comment type="line">// TODO Auto-generated catch block</comment>
							<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
						}</block></catch></try>
						
					}</block></while>

				}</block></then></if>

			}</block>
			<comment type="line">//catch the SQl exception</comment>
			<catch>catch <parameter_list>(<param><decl><type><name>SQLException</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Error fetching all the professors"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

			}</block></catch>
			<comment type="line">//finally block</comment>
			<finally>finally <block>{
				<comment type="line">// Database.commitTransaction(conn);</comment>
			}</block></finally></try>

		}</block>
		<comment type="line">//finally block </comment>
		<finally>finally <block>{
		}</block></finally></try>

		<return>return <expr><name>getAllTAs</name></expr>;</return>

	}</block></function>

	<comment type="block">/*
	 * updateTAUserName function takes in the inputs of the new user name of
	 * the TA
	 * calls the boolean function update username from the people class with the new passed new username and the initialized objects
	 * username.
	 * 
	 * if updated returns true
	 * 
	 * 
	 * else the function returns false
	 */</comment>
	<function><type><specifier>public</specifier> <name>boolean</name></type> <name>updateTAUserName</name><parameter_list>(<param><decl><type><name>String</name></type> <name>userName</name></decl></param>)</parameter_list> <block>{

		<comment type="line">//check for null</comment>
		<if>if<condition>(<expr><name>userName</name><operator>==</operator><literal type="null">null</literal></expr>)</condition><then><block>{
			<return>return <expr><literal type="boolean">false</literal></expr>;</return>
			
		}</block></then></if>
		<comment type="line">//check for empty string</comment>
		<if>if<condition>(<expr><call><name><name>userName</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{
			<return>return <expr><literal type="boolean">false</literal></expr>;</return>
		}</block></then></if>
		
		
		<decl_stmt><decl><type><name>boolean</name></type> <name>isUpdated</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt><comment type="line">//set to false to be returned if it does not exist in login table</comment>

		<try>try <block>{
			<decl_stmt><decl><type><name>Connection</name></type> <name>conn</name> <init>= <expr><call><name><name>Database</name><operator>.</operator><name>getConnection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//get the connection</comment>

			<try>try <block>{

				<decl_stmt><decl><type><name>boolean</name></type> <name>ifUpdatedInLogin</name> <init>= <expr><call><name><name>People</name><operator>.</operator><name>updateUserNameIntoLoginTable</name></name><argument_list>(<argument><expr><name>userName</name></expr></argument>, <argument><expr><call><name><name>this</name><operator>.</operator><name>getUserName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//check if it is updated in the login table</comment>
				<if>if <condition>(<expr><name>ifUpdatedInLogin</name></expr>)</condition><then>
					<block type="pseudo"><expr_stmt><expr><name>isUpdated</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt></block></then></if>

			}</block>
			<comment type="line">//catch block</comment>
			<catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Error adding/updating to database"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>

		}</block>
		<comment type="line">//catch the exception</comment>
		<catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Connection failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></catch>
		<comment type="line">//finally block</comment>
		<finally>finally <block>{

			<comment type="line">// System.out.println("retrieved");</comment>
		}</block></finally></try>

		<return>return <expr><name>isUpdated</name></expr>;</return>

	}</block></function>
	
	<comment type="block">/*
	 * updateTAName function takes in the inputs of the new name of the TA
	 * 
	 * calls the boolean function update name from the people class with the
	 * passed new name and the initialized objects UIN.
	 * 
	 * if updated returns true
	 * 
	 * 
	 * else the function returns false
	 */</comment>

	<function><type><specifier>public</specifier> <name>boolean</name></type> <name>updateTAName</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{

		<decl_stmt><decl><type><name>boolean</name></type> <name>isUpdated</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
		
		<comment type="line">//check for null</comment>
		<if>if<condition>(<expr><name>name</name><operator>==</operator><literal type="null">null</literal></expr>)</condition><then><block>{
			<return>return <expr><literal type="boolean">false</literal></expr>;</return>
			
		}</block></then></if>
		<comment type="line">//check if the length of the string is 0</comment>
		<if>if<condition>(<expr><call><name><name>name</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{
			<return>return <expr><literal type="boolean">false</literal></expr>;</return>
		}</block></then></if>
		

		<try>try <block>{
			<decl_stmt><decl><type><name>Connection</name></type> <name>conn</name> <init>= <expr><call><name><name>Database</name><operator>.</operator><name>getConnection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//get the connection</comment>

			<try>try <block>{

				<decl_stmt><decl><type><name>boolean</name></type> <name>ifUpdatedInPeople</name> <init>= <expr><call><name><name>People</name><operator>.</operator><name>updateNameIntoPeopleTable</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>this</name><operator>.</operator><name>getUIN</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//update in the people table</comment>
				<if>if <condition>(<expr><name>ifUpdatedInPeople</name></expr>)</condition><then>
					<block type="pseudo"><expr_stmt><expr><name>isUpdated</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt></block></then></if>

			}</block>
			<comment type="line">//catch block</comment>
			<catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Error adding/updating to database"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>

		}</block>
		<comment type="line">//catch block</comment>
		<catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Connection failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></catch>
		<comment type="line">//finally block</comment>
		<finally>finally <block>{

			<comment type="line">// System.out.println("retrieved");</comment>
		}</block></finally></try>

		<return>return <expr><name>isUpdated</name></expr>;</return>

	}</block></function>
	
	<comment type="block">/*
	 * updateTADept function takes in the inputs of the newdept of the TA
	 * * calls the boolean function update dept from the people class with the
	 * passed new name and the initialized objects UIN.
	 * 
	 * if updated returns true
	 * 
	 * 
	 * else the function returns false
	 */</comment>

	<function><type><specifier>public</specifier> <name>boolean</name></type> <name>updateTADept</name><parameter_list>(<param><decl><type><name>int</name></type> <name>deptID</name></decl></param>)</parameter_list> <block>{
		
		<try>try <block>{
			<decl_stmt><decl><type><name>Department</name></type> <name>d</name><init>=<expr><operator>new</operator> <call><name>Department</name><argument_list>(<argument><expr><name>deptID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		}</block> <catch>catch <parameter_list>(<param><decl><type><name><name>Department</name><operator>.</operator><name>DepartmentDoesNotExistException</name></name></type> <name>e1</name></decl></param>)</parameter_list> <block>{
			<comment type="line">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name>e1</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>

		<decl_stmt><decl><type><name>boolean</name></type> <name>isUpdated</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt><comment type="line">//set the value to be returned as false</comment>

		<try>try <block>{
			<decl_stmt><decl><type><name>Connection</name></type> <name>conn</name> <init>= <expr><call><name><name>Database</name><operator>.</operator><name>getConnection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//get the connection</comment>

			<try>try <block>{

				<decl_stmt><decl><type><name>boolean</name></type> <name>ifUpdatedInPeople</name> <init>= <expr><call><name><name>People</name><operator>.</operator><name>updateDeptIntoPeopleTable</name></name><argument_list>(<argument><expr><name>deptID</name></expr></argument>, <argument><expr><call><name><name>this</name><operator>.</operator><name>getUIN</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//update in people</comment>
				<if>if <condition>(<expr><name>ifUpdatedInPeople</name></expr>)</condition><then>
					<block type="pseudo"><expr_stmt><expr><name>isUpdated</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt></block></then></if>

			}</block>
			<comment type="line">//catch block</comment>
			<catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Error adding/updating to database"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>

		}</block>
		<comment type="line">//catch block</comment>
		<catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Connection failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></catch>
		<comment type="line">//finally block</comment>
		<finally>finally <block>{

			<comment type="line">// System.out.println("retrieved");</comment>
		}</block></finally></try>

		<return>return <expr><name>isUpdated</name></expr>;</return>

	}</block></function>

	<comment type="block">/*if a student is added as a TA the nhis position ID is changed to TA
	 * 
	 * the parameter passed is UIN
	 * 
	 * the return type is boolean*/</comment>
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>updateStudentToTA</name><parameter_list>(<param><decl><type><name>int</name></type> <name>UIN</name></decl></param>)</parameter_list><block>{
		
		<decl_stmt><decl><type><name>boolean</name></type> <name>isUpdated</name><init>=<expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt><comment type="line">//set the return value to false</comment>
		<decl_stmt><decl><type><name>int</name></type> <name>setPosition</name><init>=<expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
		
		<try>try<block>{
			<decl_stmt><decl><type><name>Connection</name></type> <name>conn</name> <init>= <expr><call><name><name>Database</name><operator>.</operator><name>getConnection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//get the connection</comment>
			
			<try>try<block>{
				
				    
						
						<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Updating data in the database"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name>String</name></type> <name>SQLDeptUpdate</name><init>= <expr><literal type="string">"UPDATE people SET PositionID= ? where UIN=?;"</literal></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name>PreparedStatement</name></type> <name>stmt</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>prepareStatement</name></name><argument_list>(<argument><expr><name>SQLDeptUpdate</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name>stmt</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>setPosition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line">//set the values</comment>
						<expr_stmt><expr><call><name><name>stmt</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line">//set the values</comment>
						<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name><name>stmt</name><operator>.</operator><name>executeUpdate</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//execute the query</comment>
						
						<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"setPosition"</literal></expr></argument>, <argument><expr><literal type="string">"people"</literal></expr></argument>, <argument><expr><literal type="string">"PositionID"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"UIN"</literal></expr></argument>, <argument><expr><literal type="string">"people"</literal></expr></argument>, <argument><expr><literal type="string">"UIN"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						
						<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Inserted"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name>isUpdated</name><operator>=</operator><literal type="boolean">true</literal></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name>Database</name><operator>.</operator><name>commitTransaction</name></name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						
					
					
			}</block>
			<comment type="line">//catch the SQL exception</comment>
			<catch>catch<parameter_list>(<param><decl><type><name>SQLException</name></type> <name>e</name></decl></param>)</parameter_list><block>{
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Error adding/updating to database"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	
				<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
		}</block>
		<comment type="line">//outer catch block </comment>
		<catch>catch<parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list><block>{
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Connection failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			
		}</block></catch>
		<comment type="line">//finally block</comment>
		<finally>finally<block>{
			
			<comment type="line">//System.out.println("retrieved");</comment>
		}</block></finally></try>
		
	<return>return <expr><name>isUpdated</name></expr>;</return>
	}</block></function>
		
	<comment type="block">/*if a TA is relieved of his Ta ship then his position ID is changed 3 as all students
	 * 
	 * the parameter passed is UIN
	 * 
	 * the return type is boolean*/</comment>
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>updateTAtoStudent</name><parameter_list>(<param><decl><type><name>int</name></type> <name>UIN</name></decl></param>)</parameter_list><block>{
		
		<decl_stmt><decl><type><name>boolean</name></type> <name>isUpdated</name><init>=<expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt><comment type="line">//set the return value to be false</comment>
		<decl_stmt><decl><type><name>int</name></type> <name>setPosition</name><init>=<expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
		
		
		<try>try<block>{
			<decl_stmt><decl><type><name>Connection</name></type> <name>conn</name> <init>= <expr><call><name><name>Database</name><operator>.</operator><name>getConnection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//get the connection</comment>
			
			<try>try<block>{
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Updating data in the database"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><name>String</name></type> <name>SQLDeptUpdate</name><init>= <expr><literal type="string">"UPDATE people SET PositionID= ? where UIN=?;"</literal></expr></init></decl>;</decl_stmt><comment type="line">//write the query</comment>
				<decl_stmt><decl><type><name>PreparedStatement</name></type> <name>stmt</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>prepareStatement</name></name><argument_list>(<argument><expr><name>SQLDeptUpdate</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>stmt</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>setPosition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line">//set the values</comment>
				<expr_stmt><expr><call><name><name>stmt</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line">//set the values</comment>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name><name>stmt</name><operator>.</operator><name>executeUpdate</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//execute the query</comment>
				
				<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"setPosition"</literal></expr></argument>, <argument><expr><literal type="string">"people"</literal></expr></argument>, <argument><expr><literal type="string">"PositionID"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"UIN"</literal></expr></argument>, <argument><expr><literal type="string">"people"</literal></expr></argument>, <argument><expr><literal type="string">"UIN"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Inserted"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>isUpdated</name><operator>=</operator><literal type="boolean">true</literal></expr>;</expr_stmt>
				<if>if<condition>(<expr><name>isUpdated</name></expr>)</condition><then>
					<block type="pseudo"><expr_stmt><expr><call><name><name>Database</name><operator>.</operator><name>commitTransaction</name></name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
				
				<else>else
					<block type="pseudo"><expr_stmt><expr><call><name><name>Database</name><operator>.</operator><name>rollBackTransaction</name></name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
				
					
					
			}</block>
			<comment type="line">//catch block for SQL exception</comment>
			<catch>catch<parameter_list>(<param><decl><type><name>SQLException</name></type> <name>e</name></decl></param>)</parameter_list><block>{
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Error adding/updating to database"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	
				<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
			
		}</block>
		<comment type="line">//catch block</comment>
		<catch>catch<parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list><block>{
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Connection failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			
		}</block></catch>
		<comment type="line">//finally block</comment>
		<finally>finally<block>{
			
			<comment type="line">//System.out.println("retrieved");</comment>
		}</block></finally></try>
		
	<return>return <expr><name>isUpdated</name></expr>;</return>
	}</block></function>

	<comment type="line">//new added exceptions that can be thrown</comment>
	<class><specifier>public</specifier> <specifier>static</specifier> class <name>AlreadyExistsInTAException</name> <super><extends>extends <name>Exception</name></extends></super> <block>{
		<decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> <init>= <expr><literal type="number">1L</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>message</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

		<constructor><specifier>public</specifier> <name>AlreadyExistsInTAException</name><parameter_list>()</parameter_list> <block>{
			<expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>message</name></name> <operator>=</operator> <literal type="string">"TA is already existing for this course offering"</literal></expr>;</expr_stmt>
		}</block></constructor>

		<constructor><specifier>public</specifier> <name>AlreadyExistsInTAException</name><parameter_list>(<param><decl><type><name>String</name></type> <name>message</name></decl></param>)</parameter_list> <block>{
			<expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>message</name></name> <operator>=</operator> <name>message</name></expr>;</expr_stmt>
		}</block></constructor>

		<function><type><annotation>@<name>Override</name></annotation>
		<specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
			<return>return <expr><name>message</name></expr>;</return>
		}</block></function>

		<function><type><annotation>@<name>Override</name></annotation>
		<specifier>public</specifier> <name>String</name></type> <name>getMessage</name><parameter_list>()</parameter_list> <block>{
			<return>return <expr><name>message</name></expr>;</return>
		}</block></function>
	}</block></class>

	<comment type="block">/*
	 * All TA functions add, update, retrieve are specified in the this class
	 * 
	 * local main class is used for testing functions and specific executions
	 */</comment>
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<param><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></param>)</parameter_list> <block>{

		

	}</block></function>

}</block></class>
</unit>
