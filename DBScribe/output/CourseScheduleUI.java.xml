<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Boyang\Desktop\ASE15\subjects\UMAS\src\com\umas\frontend\CourseScheduleUI.java"><package>package <name><name>com</name><operator>.</operator><name>umas</name><operator>.</operator><name>frontend</name></name>;</package>


<comment type="block" format="javadoc">/****************@author Simant Purohit*********************************/</comment>

<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>BorderLayout</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>EventQueue</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>DefaultComboBoxModel</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>JButton</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>JComboBox</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>JDialog</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>JLabel</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>JList</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>JOptionPane</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>JPanel</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>JScrollPane</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>JTextPane</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>border</name><operator>.</operator><name>EmptyBorder</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>event</name><operator>.</operator><name>ListSelectionEvent</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>event</name><operator>.</operator><name>ListSelectionListener</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>JTabbedPane</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>umas</name><operator>.</operator><name>code</name><operator>.</operator><name>Admin</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>umas</name><operator>.</operator><name>code</name><operator>.</operator><name>Classroom</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>umas</name><operator>.</operator><name>code</name><operator>.</operator><name>ClassroomLocation</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>umas</name><operator>.</operator><name>code</name><operator>.</operator><name>Course</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>umas</name><operator>.</operator><name>code</name><operator>.</operator><name>CourseOffered</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>umas</name><operator>.</operator><name>code</name><operator>.</operator><name>CourseSchedule</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>umas</name><operator>.</operator><name>code</name><operator>.</operator><name>DBAnnotation</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>umas</name><operator>.</operator><name>code</name><operator>.</operator><name>Department</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>umas</name><operator>.</operator><name>code</name><operator>.</operator><name>Timeslots</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>umas</name><operator>.</operator><name>code</name><operator>.</operator><name>Course</name><operator>.</operator><name>CourseDoesNotExistException</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>umas</name><operator>.</operator><name>code</name><operator>.</operator><name>CourseOffered</name><operator>.</operator><name>CourseOfferingDoesNotExistException</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>umas</name><operator>.</operator><name>code</name><operator>.</operator><name>CourseOffered</name><operator>.</operator><name>CourseOfferingNotCurrentException</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>umas</name><operator>.</operator><name>code</name><operator>.</operator><name>Department</name><operator>.</operator><name>DepartmentDoesNotExistException</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>event</name><operator>.</operator><name>ActionListener</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>event</name><operator>.</operator><name>ActionEvent</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedHashMap</name></name>;</import>


<class><specifier>public</specifier> class <name>CourseScheduleUI</name> <super><extends>extends <name>JPanel</name></extends></super> <block>{

	<decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> <init>= <expr><literal type="number">1L</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>Admin</name></type> <name>admin</name><init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>Department</name></type> <name>adminDepartment</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>CourseScheduleUI</name></type> <name>courseScheduleUI</name></decl>;</decl_stmt>
	
	<comment type="line">//private JPanel contentPane;</comment>
	<decl_stmt><decl><type><specifier>private</specifier> <name><name>JList</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>courseNameList</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name><name>JList</name><argument_list type="template">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>courseOfferIDList</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name><name>JList</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>professorNameList</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name><name>JList</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>classLocationList</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name><name>JList</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>classNameList</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name><name>JList</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>classTimingList</name></decl>;</decl_stmt>	
	
	<comment type="line">//----------------BACKGROUND DATA------------//</comment>
	<decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="template">&lt;<argument><name>CourseOffered</name></argument>&gt;</argument_list></name></type> <name>allDeptCourseOfferings</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name><name>ArrayList</name><argument_list type="template">&lt;<argument><name>CourseSchedule</name></argument>&gt;</argument_list></name></type> <name>allDeptCoursesSchedule</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name><name>JComboBox</name><argument_list type="template">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>courseScheduledCombo</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name><name>JComboBox</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>timeSlotTypeCombo</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name><name>JComboBox</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>classLocationCombo</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name><name>JComboBox</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>classRoomCombo</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name><name>JComboBox</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>timingAvailableCombo</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>JTextPane</name></type> <name>courseScheduleTextPane</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name><name>LinkedHashMap</name><argument_list type="template">&lt;<argument><name>Classroom</name></argument>, <argument><name><name>ArrayList</name><argument_list type="template">&lt;<argument><name>Timeslots</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>classroomAndTimeslots</name></decl>;</decl_stmt>
	
	<comment type="block" format="javadoc">/**
	 * Launch the application.
	 */</comment>
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<param><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></param>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>EventQueue</name><operator>.</operator><name>invokeLater</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
			<function><type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
				<try>try <block>{
					<decl_stmt><decl><type><name>CourseScheduleUI</name></type> <name>frame</name> <init>= <expr><call><name>getInstance</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Admin</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name>frame</name><operator>.</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block> <catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
					<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				}</block></catch></try>
			}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>CourseScheduleUI</name></type> <name>getInstance</name><parameter_list>(<param><decl><type><name>Admin</name></type> <name>ad</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name><name>Department</name><operator>.</operator><name>DepartmentDoesNotExistException</name></name></expr></argument></throws><block>{
		<expr_stmt><expr><name>courseScheduleUI</name> <operator>=</operator> <operator>new</operator> <call><name>CourseScheduleUI</name><argument_list>(<argument><expr><name>ad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<if>if<condition>(<expr><name>admin</name> <operator>==</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>adminDepartment</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><literal type="null">null</literal></expr>;</return></block></then>
		
		<else>else
			<block type="pseudo"><return>return <expr><name>courseScheduleUI</name></expr>;</return></block></else></if>
	}</block></function>
	
	<constructor><specifier>private</specifier> <name>CourseScheduleUI</name><parameter_list>(<param><decl><type><name>Admin</name></type> <name>admin</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name><name>Department</name><operator>.</operator><name>DepartmentDoesNotExistException</name></name></expr></argument></throws> <block>{
		<expr_stmt><expr><name><name>CourseScheduleUI</name><operator>.</operator><name>admin</name></name> <operator>=</operator> <name>admin</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>CourseScheduleUI</name><operator>.</operator><name>adminDepartment</name></name> <operator>=</operator> <operator>new</operator> <call><name>Department</name><argument_list>(<argument><expr><call><name><name>admin</name><operator>.</operator><name>getDeptID</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">//setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</comment>
		<expr_stmt><expr><call><name>setBounds</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><literal type="number">800</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">//contentPane = new JPanel();</comment>
		<expr_stmt><expr><call><name>setBorder</name><argument_list>(<argument><expr><operator>new</operator> <call><name>EmptyBorder</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>setLayout</name><argument_list>(<argument><expr><operator>new</operator> <call><name>BorderLayout</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">//setContentPane(contentPane);</comment>
		
		<decl_stmt><decl><type><specifier>final</specifier> <name>JTabbedPane</name></type> <name>courseSchedule</name> <init>= <expr><operator>new</operator> <call><name>JTabbedPane</name><argument_list>(<argument><expr><name><name>JTabbedPane</name><operator>.</operator><name>TOP</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>courseSchedule</name></expr></argument>, <argument><expr><name><name>BorderLayout</name><operator>.</operator><name>CENTER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JPanel</name></type> <name>currentScheduleTable</name> <init>= <expr><operator>new</operator> <call><name>JPanel</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>currentScheduleTable</name><operator>.</operator><name>setSize</name></name><argument_list>(<argument><expr><name>HEIGHT</name></expr></argument>, <argument><expr><name>WIDTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>courseSchedule</name><operator>.</operator><name>addTab</name></name><argument_list>(<argument><expr><literal type="string">"Current Schedule"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>currentScheduleTable</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>courseSchedule</name><operator>.</operator><name>setEnabledAt</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>currentScheduleTable</name><operator>.</operator><name>setLayout</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JLabel</name></type> <name>lblCourseName</name> <init>= <expr><operator>new</operator> <call><name>JLabel</name><argument_list>(<argument><expr><literal type="string">"Course Name"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>lblCourseName</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">125</literal></expr></argument>, <argument><expr><literal type="number">72</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>currentScheduleTable</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>lblCourseName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JLabel</name></type> <name>lblCourseOfferid</name> <init>= <expr><operator>new</operator> <call><name>JLabel</name><argument_list>(<argument><expr><literal type="string">"Course OfferID"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>lblCourseOfferid</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><literal type="number">129</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">125</literal></expr></argument>, <argument><expr><literal type="number">72</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>currentScheduleTable</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>lblCourseOfferid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JLabel</name></type> <name>lblTaughtBy</name> <init>= <expr><operator>new</operator> <call><name>JLabel</name><argument_list>(<argument><expr><literal type="string">"Taught By"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>lblTaughtBy</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><literal type="number">256</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">125</literal></expr></argument>, <argument><expr><literal type="number">72</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>currentScheduleTable</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>lblTaughtBy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JLabel</name></type> <name>lblClassLocation</name> <init>= <expr><operator>new</operator> <call><name>JLabel</name><argument_list>(<argument><expr><literal type="string">"Class location"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>lblClassLocation</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><literal type="number">383</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">125</literal></expr></argument>, <argument><expr><literal type="number">72</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>currentScheduleTable</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>lblClassLocation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JLabel</name></type> <name>lblClassName</name> <init>= <expr><operator>new</operator> <call><name>JLabel</name><argument_list>(<argument><expr><literal type="string">"Class name"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>lblClassName</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><literal type="number">510</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">125</literal></expr></argument>, <argument><expr><literal type="number">72</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>currentScheduleTable</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>lblClassName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JLabel</name></type> <name>lblTiming</name> <init>= <expr><operator>new</operator> <call><name>JLabel</name><argument_list>(<argument><expr><literal type="string">"Timing"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>lblTiming</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><literal type="number">637</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">125</literal></expr></argument>, <argument><expr><literal type="number">72</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>currentScheduleTable</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>lblTiming</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JScrollPane</name></type> <name>courseNameScrollPane</name> <init>= <expr><operator>new</operator> <call><name>JScrollPane</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>courseNameList</name>  <operator>=</operator> <operator>new</operator> <call><name><name>JList</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>courseNameList</name><operator>.</operator><name>setSelectedIndex</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>courseNameList</name><operator>.</operator><name>addListSelectionListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>ListSelectionListener</name></super><argument_list>()</argument_list> <block>{
			
			<comment type="line">//@Override</comment>
			<function><type><specifier>public</specifier> <name>void</name></type> <name>valueChanged</name><parameter_list>(<param><decl><type><name>ListSelectionEvent</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
				<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><call><name><name>courseNameList</name><operator>.</operator><name>getSelectedIndex</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name>setSelectionForCurrentSchedule</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				
			}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>courseNameScrollPane</name><operator>.</operator><name>getViewport</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setView</name><argument_list>(<argument><expr><name>courseNameList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>courseNameScrollPane</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">74</literal></expr></argument>, <argument><expr><literal type="number">125</literal></expr></argument>, <argument><expr><literal type="number">211</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>currentScheduleTable</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>courseNameScrollPane</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JScrollPane</name></type> <name>courseOfferIDScrollPane</name> <init>= <expr><operator>new</operator> <call><name>JScrollPane</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>courseOfferIDList</name> <operator>=</operator> <operator>new</operator> <call><name><name>JList</name><argument_list type="template">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>courseOfferIDList</name><operator>.</operator><name>setSelectedIndex</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>courseOfferIDList</name><operator>.</operator><name>addListSelectionListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>ListSelectionListener</name></super><argument_list>()</argument_list> <block>{
			
			<comment type="line">//@Override</comment>
			<function><type><specifier>public</specifier> <name>void</name></type> <name>valueChanged</name><parameter_list>(<param><decl><type><name>ListSelectionEvent</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
				<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><call><name><name>courseOfferIDList</name><operator>.</operator><name>getSelectedIndex</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name>setSelectionForCurrentSchedule</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				
			}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>courseOfferIDScrollPane</name><operator>.</operator><name>getViewport</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setView</name><argument_list>(<argument><expr><name>courseOfferIDList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>courseOfferIDScrollPane</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><literal type="number">129</literal></expr></argument>, <argument><expr><literal type="number">74</literal></expr></argument>, <argument><expr><literal type="number">125</literal></expr></argument>, <argument><expr><literal type="number">211</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>currentScheduleTable</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>courseOfferIDScrollPane</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JScrollPane</name></type> <name>taughtByScrollPane</name> <init>= <expr><operator>new</operator> <call><name>JScrollPane</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>professorNameList</name> <operator>=</operator> <operator>new</operator> <call><name><name>JList</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>professorNameList</name><operator>.</operator><name>setSelectedIndex</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>professorNameList</name><operator>.</operator><name>addListSelectionListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>ListSelectionListener</name></super><argument_list>()</argument_list> <block>{
			
			<comment type="line">//@Override</comment>
			<function><type><specifier>public</specifier> <name>void</name></type> <name>valueChanged</name><parameter_list>(<param><decl><type><name>ListSelectionEvent</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
				<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><call><name><name>professorNameList</name><operator>.</operator><name>getSelectedIndex</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name>setSelectionForCurrentSchedule</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				
			}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>taughtByScrollPane</name><operator>.</operator><name>getViewport</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setView</name><argument_list>(<argument><expr><name>professorNameList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>taughtByScrollPane</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><literal type="number">256</literal></expr></argument>, <argument><expr><literal type="number">74</literal></expr></argument>, <argument><expr><literal type="number">125</literal></expr></argument>, <argument><expr><literal type="number">211</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>currentScheduleTable</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>taughtByScrollPane</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JScrollPane</name></type> <name>classLocationScrollPane</name> <init>= <expr><operator>new</operator> <call><name>JScrollPane</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>classLocationList</name> <operator>=</operator> <operator>new</operator> <call><name><name>JList</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>classLocationList</name><operator>.</operator><name>setSelectedIndex</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>classLocationList</name><operator>.</operator><name>addListSelectionListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>ListSelectionListener</name></super><argument_list>()</argument_list> <block>{
			
			<comment type="line">//@Override</comment>
			<function><type><specifier>public</specifier> <name>void</name></type> <name>valueChanged</name><parameter_list>(<param><decl><type><name>ListSelectionEvent</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
				<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><call><name><name>classLocationList</name><operator>.</operator><name>getSelectedIndex</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name>setSelectionForCurrentSchedule</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				
			}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>classLocationScrollPane</name><operator>.</operator><name>getViewport</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setView</name><argument_list>(<argument><expr><name>classLocationList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>classLocationScrollPane</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><literal type="number">383</literal></expr></argument>, <argument><expr><literal type="number">74</literal></expr></argument>, <argument><expr><literal type="number">125</literal></expr></argument>, <argument><expr><literal type="number">211</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>currentScheduleTable</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>classLocationScrollPane</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JScrollPane</name></type> <name>classNameScrollPane</name> <init>= <expr><operator>new</operator> <call><name>JScrollPane</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>classNameList</name> <operator>=</operator> <operator>new</operator> <call><name><name>JList</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>classNameList</name><operator>.</operator><name>setSelectedIndex</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>classNameList</name><operator>.</operator><name>addListSelectionListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>ListSelectionListener</name></super><argument_list>()</argument_list> <block>{
			
			<comment type="line">//@Override</comment>
			<function><type><specifier>public</specifier> <name>void</name></type> <name>valueChanged</name><parameter_list>(<param><decl><type><name>ListSelectionEvent</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
				<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><call><name><name>classNameList</name><operator>.</operator><name>getSelectedIndex</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name>setSelectionForCurrentSchedule</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				
			}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>classNameScrollPane</name><operator>.</operator><name>getViewport</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setView</name><argument_list>(<argument><expr><name>classNameList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>classNameScrollPane</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><literal type="number">510</literal></expr></argument>, <argument><expr><literal type="number">74</literal></expr></argument>, <argument><expr><literal type="number">125</literal></expr></argument>, <argument><expr><literal type="number">211</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>currentScheduleTable</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>classNameScrollPane</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JScrollPane</name></type> <name>timingScrollPane</name> <init>= <expr><operator>new</operator> <call><name>JScrollPane</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>classTimingList</name> <operator>=</operator> <operator>new</operator> <call><name><name>JList</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>classTimingList</name><operator>.</operator><name>setSelectedIndex</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>classTimingList</name><operator>.</operator><name>addListSelectionListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>ListSelectionListener</name></super><argument_list>()</argument_list> <block>{
			
			<comment type="line">//@Override</comment>
			<function><type><specifier>public</specifier> <name>void</name></type> <name>valueChanged</name><parameter_list>(<param><decl><type><name>ListSelectionEvent</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
				<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><call><name><name>classTimingList</name><operator>.</operator><name>getSelectedIndex</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name>setSelectionForCurrentSchedule</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				
			}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>timingScrollPane</name><operator>.</operator><name>getViewport</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setView</name><argument_list>(<argument><expr><name>classTimingList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>timingScrollPane</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><literal type="number">637</literal></expr></argument>, <argument><expr><literal type="number">74</literal></expr></argument>, <argument><expr><literal type="number">150</literal></expr></argument>, <argument><expr><literal type="number">211</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>currentScheduleTable</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>timingScrollPane</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><specifier>final</specifier> <name>JButton</name></type> <name>btnNewButton</name> <init>= <expr><operator>new</operator> <call><name>JButton</name><argument_list>(<argument><expr><literal type="string">"Reschedule all courses"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>btnNewButton</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>ActionListener</name></super><argument_list>()</argument_list> <block>{
			<function><type><specifier>public</specifier> <name>void</name></type> <name>actionPerformed</name><parameter_list>(<param><decl><type><name>ActionEvent</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
				<expr_stmt><expr><call><name><name>btnNewButton</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><literal type="string">"Refreshing and rescheduling"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><name>JDialog</name></type> <name>jd</name> <init>= <expr><operator>new</operator> <call><name>JDialog</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>jd</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><literal type="string">"Rescheduling, please wait"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>jd</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><call><name>getBounds</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>jd</name><operator>.</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>				
				<expr_stmt><expr><call><name><name>courseSchedule</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>CourseSchedule</name><operator>.</operator><name>scheduleAllCurrentCourses</name></name><argument_list>(<argument><expr><name>adminDepartment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<try>try <block>{
					<expr_stmt><expr><call><name><name>Thread</name><operator>.</operator><name>sleep</name></name><argument_list>(<argument><expr><literal type="number">5000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block> <catch>catch <parameter_list>(<param><decl><type><name>InterruptedException</name></type> <name>e1</name></decl></param>)</parameter_list> <block>{
					<comment type="line">// TODO Auto-generated catch block</comment>
					<expr_stmt><expr><call><name><name>e1</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				}</block></catch></try>
				<comment type="line">//initializeBackgroundData(adminDepartment);</comment>
				<expr_stmt><expr><call><name><name>DepartmentAdminUI</name><operator>.</operator><name>initializeAllTabs</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>jd</name><operator>.</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>btnNewButton</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>btnNewButton</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><literal type="string">"Reschedule all courses"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>courseSchedule</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>btnNewButton</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><literal type="number">214</literal></expr></argument>, <argument><expr><literal type="number">305</literal></expr></argument>, <argument><expr><literal type="number">356</literal></expr></argument>, <argument><expr><literal type="number">41</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>currentScheduleTable</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>btnNewButton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		
		<comment type="line">//-----------------Schedule individual course-----------------//</comment>
		<decl_stmt><decl><type><name>JPanel</name></type> <name>rescheduleIndividual</name> <init>= <expr><operator>new</operator> <call><name>JPanel</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>courseSchedule</name><operator>.</operator><name>addTab</name></name><argument_list>(<argument><expr><literal type="string">"Reschedule Single Course"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>rescheduleIndividual</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>rescheduleIndividual</name><operator>.</operator><name>setLayout</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><name>courseScheduledCombo</name> <operator>=</operator> <operator>new</operator> <call><name><name>JComboBox</name><argument_list type="template">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>		
		<expr_stmt><expr><call><name><name>courseScheduledCombo</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>ActionListener</name></super><argument_list>()</argument_list> <block>{
			<function><type><specifier>public</specifier> <name>void</name></type> <name>actionPerformed</name><parameter_list>(<param><decl><type><name>ActionEvent</name></type> <name>arg0</name></decl></param>)</parameter_list> <block>{
				<expr_stmt><expr><call><name>initilizeSingleRescheduleTab</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>classRoomCombo</name><operator>.</operator><name>setModel</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>DefaultComboBoxModel</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>timingAvailableCombo</name><operator>.</operator><name>setModel</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>DefaultComboBoxModel</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>courseScheduledCombo</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>, <argument><expr><literal type="number">38</literal></expr></argument>, <argument><expr><literal type="number">164</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>rescheduleIndividual</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>courseScheduledCombo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><name>timeSlotTypeCombo</name> <operator>=</operator> <operator>new</operator> <call><name><name>JComboBox</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>DefaultComboBoxModel</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><literal type="string">"M-W-F"</literal></expr>, <expr><literal type="string">"T-Th"</literal></expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>timeSlotTypeCombo</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>ActionListener</name></super><argument_list>()</argument_list> <block>{
			<function><type><specifier>public</specifier> <name>void</name></type> <name>actionPerformed</name><parameter_list>(<param><decl><type><name>ActionEvent</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
				<expr_stmt><expr><call><name>initilizeSingleRescheduleTab</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>classRoomCombo</name><operator>.</operator><name>setModel</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>DefaultComboBoxModel</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>timingAvailableCombo</name><operator>.</operator><name>setModel</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>DefaultComboBoxModel</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>timeSlotTypeCombo</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><literal type="number">466</literal></expr></argument>, <argument><expr><literal type="number">84</literal></expr></argument>, <argument><expr><literal type="number">164</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>rescheduleIndividual</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>timeSlotTypeCombo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><name>classLocationCombo</name> <operator>=</operator> <operator>new</operator> <call><name><name>JComboBox</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>DefaultComboBoxModel</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>ClassroomLocation</name><operator>.</operator><name>getAllLocations</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>classLocationCombo</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>ActionListener</name></super><argument_list>()</argument_list> <block>{
			<function><type><specifier>public</specifier> <name>void</name></type> <name>actionPerformed</name><parameter_list>(<param><decl><type><name>ActionEvent</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
				<expr_stmt><expr><call><name>initilizeSingleRescheduleTab</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>classRoomCombo</name><operator>.</operator><name>setModel</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>DefaultComboBoxModel</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>timingAvailableCombo</name><operator>.</operator><name>setModel</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>DefaultComboBoxModel</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>classLocationCombo</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><literal type="number">466</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><literal type="number">164</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>rescheduleIndividual</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>classLocationCombo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><name>classRoomCombo</name> <operator>=</operator> <operator>new</operator> <call><name><name>JComboBox</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>classRoomCombo</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>ActionListener</name></super><argument_list>()</argument_list> <block>{
			<function><type><specifier>public</specifier> <name>void</name></type> <name>actionPerformed</name><parameter_list>(<param><decl><type><name>ActionEvent</name></type> <name>arg0</name></decl></param>)</parameter_list> <block>{
				<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><call><name><name>classRoomCombo</name><operator>.</operator><name>getSelectedIndex</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if<condition>(<expr><name>index</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
					<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
					<for>for<control>(<init><decl><type><name>Classroom</name></type> <name>c</name><range>:<expr><call><name><name>classroomAndTimeslots</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block>{
						<decl_stmt><decl><type><name>Classroom</name></type> <name>newClassroom</name> <init>= <expr><name>c</name></expr></init></decl>;</decl_stmt>
						<if>if<condition>(<expr><name>count</name> <operator>==</operator> <name>index</name></expr>)</condition><then><block>{
							<expr_stmt><expr><call><name>initializeEmptyTimeSlotCombo</name><argument_list>(<argument><expr><name>newClassroom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<break>break;</break>
						}</block></then>
						<else>else
							<block type="pseudo"><expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt></block></else></if>
					}</block></for>
				}</block></then></if>
			}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>classRoomCombo</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><literal type="number">466</literal></expr></argument>, <argument><expr><literal type="number">213</literal></expr></argument>, <argument><expr><literal type="number">164</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>rescheduleIndividual</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>classRoomCombo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><name>timingAvailableCombo</name> <operator>=</operator> <operator>new</operator> <call><name><name>JComboBox</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>timingAvailableCombo</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><literal type="number">466</literal></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>, <argument><expr><literal type="number">164</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>rescheduleIndividual</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>timingAvailableCombo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JLabel</name></type> <name>lblType</name> <init>= <expr><operator>new</operator> <call><name>JLabel</name><argument_list>(<argument><expr><literal type="string">"Type"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>lblType</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><literal type="number">318</literal></expr></argument>, <argument><expr><literal type="number">87</literal></expr></argument>, <argument><expr><literal type="number">46</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>rescheduleIndividual</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>lblType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JLabel</name></type> <name>lblLocation</name> <init>= <expr><operator>new</operator> <call><name>JLabel</name><argument_list>(<argument><expr><literal type="string">"Location"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>lblLocation</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><literal type="number">318</literal></expr></argument>, <argument><expr><literal type="number">131</literal></expr></argument>, <argument><expr><literal type="number">46</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>rescheduleIndividual</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>lblLocation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JLabel</name></type> <name>lblClassroom</name> <init>= <expr><operator>new</operator> <call><name>JLabel</name><argument_list>(<argument><expr><literal type="string">"Classroom"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>lblClassroom</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><literal type="number">318</literal></expr></argument>, <argument><expr><literal type="number">216</literal></expr></argument>, <argument><expr><literal type="number">65</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>rescheduleIndividual</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>lblClassroom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JLabel</name></type> <name>lblTimingsAvailable</name> <init>= <expr><operator>new</operator> <call><name>JLabel</name><argument_list>(<argument><expr><literal type="string">"Timings Available"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>lblTimingsAvailable</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><literal type="number">318</literal></expr></argument>, <argument><expr><literal type="number">259</literal></expr></argument>, <argument><expr><literal type="number">81</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>rescheduleIndividual</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>lblTimingsAvailable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><name>courseScheduleTextPane</name> <operator>=</operator> <operator>new</operator> <call><name>JTextPane</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>courseScheduleTextPane</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>, <argument><expr><literal type="number">87</literal></expr></argument>, <argument><expr><literal type="number">278</literal></expr></argument>, <argument><expr><literal type="number">186</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>rescheduleIndividual</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>courseScheduleTextPane</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JButton</name></type> <name>btnSearchAvailable</name> <init>= <expr><operator>new</operator> <call><name>JButton</name><argument_list>(<argument><expr><literal type="string">"Search available"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>btnSearchAvailable</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>ActionListener</name></super><argument_list>()</argument_list> <block>{
			<function><type><specifier>public</specifier> <name>void</name></type> <name>actionPerformed</name><parameter_list>(<param><decl><type><name>ActionEvent</name></type> <name>arg0</name></decl></param>)</parameter_list> <block>{
				<decl_stmt><decl><type><name>int</name></type> <name>locationSelectIndex</name> <init>= <expr><operator>(</operator><name>Integer</name><operator>)</operator><call><name><name>classLocationCombo</name><operator>.</operator><name>getSelectedIndex</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>int</name></type> <name>selectedCourseOfferIndex</name> <init>= <expr><operator>(</operator><name>Integer</name><operator>)</operator><call><name><name>courseScheduledCombo</name><operator>.</operator><name>getSelectedIndex</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				
				<if>if<condition>(<expr><name>locationSelectIndex</name><operator>&gt;=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>selectedCourseOfferIndex</name><operator>&gt;=</operator><literal type="number">0</literal></expr>)</condition><then><block>{
					<decl_stmt><decl><type><name>ClassroomLocation</name></type> <name>l</name> <init>= <expr><call><name><name>ClassroomLocation</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator><call><name><name>classLocationCombo</name><operator>.</operator><name>getSelectedItem</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>int</name></type> <name>timeSlotType</name> <init>= <expr><call><name><name>timeSlotTypeCombo</name><operator>.</operator><name>getSelectedIndex</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
					<try>try <block>{
						<decl_stmt><decl><type><name>CourseOffered</name></type> <name>co</name> <init>= <expr><operator>new</operator> <call><name>CourseOffered</name><argument_list>(<argument><expr><operator>(</operator><name>Integer</name><operator>)</operator><call><name><name>courseScheduledCombo</name><operator>.</operator><name>getSelectedItem</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name>int</name></type> <name>cap</name> <init>= <expr><call><name><name>co</name><operator>.</operator><name>getTotalCapacity</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name>initializeEmptyClassAndTimeSlot</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>timeSlotType</name></expr></argument>, <argument><expr><name>cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block> <catch>catch <parameter_list>(<param><decl><type><name><name>Course</name><operator>.</operator><name>CourseDoesNotExistException</name></name></type> <name>e</name></decl></param>)</parameter_list> <block>{
						<comment type="line">// TODO Auto-generated catch block</comment>
						<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					}</block></catch> <catch>catch <parameter_list>(<param><decl><type><name><name>CourseOffered</name><operator>.</operator><name>CourseOfferingDoesNotExistException</name></name></type> <name>e</name></decl></param>)</parameter_list> <block>{
						<comment type="line">// TODO Auto-generated catch block</comment>
						<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					}</block></catch></try>
				}</block></then>
				
				<else>else<block>{
					<expr_stmt><expr><call><name>showMessage</name><argument_list>(<argument><expr><literal type="string">"Please select a course first"</literal></expr></argument>, <argument><expr><literal type="string">"Error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>
				
			}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>btnSearchAvailable</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><literal type="number">466</literal></expr></argument>, <argument><expr><literal type="number">159</literal></expr></argument>, <argument><expr><literal type="number">164</literal></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>rescheduleIndividual</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>btnSearchAvailable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JButton</name></type> <name>btnUpdateSelectedCourse</name> <init>= <expr><operator>new</operator> <call><name>JButton</name><argument_list>(<argument><expr><literal type="string">"Update selected course with above selected timings"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>btnUpdateSelectedCourse</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>ActionListener</name></super><argument_list>()</argument_list> <block>{
			<function><type><specifier>public</specifier> <name>void</name></type> <name>actionPerformed</name><parameter_list>(<param><decl><type><name>ActionEvent</name></type> <name>arg0</name></decl></param>)</parameter_list> <block>{
				<decl_stmt><decl><type><name>int</name></type> <name>locationSelectIndex</name> <init>= <expr><operator>(</operator><name>Integer</name><operator>)</operator><call><name><name>classLocationCombo</name><operator>.</operator><name>getSelectedIndex</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>int</name></type> <name>selectedCourseOfferIndex</name> <init>= <expr><operator>(</operator><name>Integer</name><operator>)</operator><call><name><name>courseScheduledCombo</name><operator>.</operator><name>getSelectedIndex</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>int</name></type> <name>classRoomSelectedIndex</name> <init>= <expr><call><name><name>classRoomCombo</name><operator>.</operator><name>getSelectedIndex</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>int</name></type> <name>timeSlotSelectedIndex</name> <init>= <expr><call><name><name>timingAvailableCombo</name><operator>.</operator><name>getSelectedIndex</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				
				<if>if<condition>(<expr><name>locationSelectIndex</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>selectedCourseOfferIndex</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>classRoomSelectedIndex</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>timeSlotSelectedIndex</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
					<decl_stmt><decl><type><name>int</name></type> <name>OfferID</name> <init>= <expr><operator>(</operator><name>Integer</name><operator>)</operator><call><name><name>courseScheduledCombo</name><operator>.</operator><name>getSelectedItem</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					<try>try <block>{
						<decl_stmt><decl><type><name>CourseOffered</name></type> <name>c</name> <init>= <expr><operator>new</operator> <call><name>CourseOffered</name><argument_list>(<argument><expr><name>OfferID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name>Classroom</name></type> <name>newClassroom</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name>Timeslots</name></type> <name>newTimeslot</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><name>classRoomSelectedIndex</name> <operator>=</operator> <call><name><name>classRoomCombo</name><operator>.</operator><name>getSelectedIndex</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name>timeSlotSelectedIndex</name> <operator>=</operator> <call><name><name>timingAvailableCombo</name><operator>.</operator><name>getSelectedIndex</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
						
						<for>for<control>(<init><decl><type><name>Classroom</name></type> <name>classroom</name><range>:<expr><call><name><name>classroomAndTimeslots</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block>{
							<expr_stmt><expr><name>newClassroom</name> <operator>=</operator> <name>classroom</name></expr>;</expr_stmt>
							<if>if<condition>(<expr><name>count</name> <operator>==</operator> <name>classRoomSelectedIndex</name></expr>)</condition><then><block>{
								<break>break;</break>
							}</block></then>
							<else>else
								<block type="pseudo"><expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt></block></else></if>
						}</block></for>
						
						<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
						<for>for<control>(<init><decl><type><name>Timeslots</name></type> <name>t</name> <range>: <expr><call><name><name>classroomAndTimeslots</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>newClassroom</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control><block>{
							<expr_stmt><expr><name>newTimeslot</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
							<if>if<condition>(<expr><name>count</name> <operator>==</operator> <name>timeSlotSelectedIndex</name></expr>)</condition><then><block>{
								<break>break;</break>
							}</block></then>
							<else>else
								<block type="pseudo"><expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt></block></else></if>
						}</block></for>
						
						<expr_stmt><expr><call><name>updateCourseSchedule</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>newClassroom</name></expr></argument>, <argument><expr><name>newTimeslot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						
					}</block> <catch>catch <parameter_list>(<param><decl><type><name><name>Course</name><operator>.</operator><name>CourseDoesNotExistException</name></name></type> <name>e</name></decl></param>)</parameter_list> <block>{
						<comment type="line">// TODO Auto-generated catch block</comment>
						<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					}</block></catch> <catch>catch <parameter_list>(<param><decl><type><name><name>CourseOffered</name><operator>.</operator><name>CourseOfferingDoesNotExistException</name></name></type> <name>e</name></decl></param>)</parameter_list> <block>{
						<comment type="line">// TODO Auto-generated catch block</comment>
						<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					}</block></catch></try>
				}</block></then>
				
				<elseif>else <if>if <condition>(<expr><name>selectedCourseOfferIndex</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then><block>{
					<expr_stmt><expr><call><name>showMessage</name><argument_list>(<argument><expr><literal type="string">"Please selesct a course first"</literal></expr></argument>, <argument><expr><literal type="string">"Error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return>return;</return>
				}</block></then></if></elseif>
				
				<elseif>else <if>if<condition>(<expr><name>classRoomSelectedIndex</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
					<expr_stmt><expr><call><name>showMessage</name><argument_list>(<argument><expr><literal type="string">"Select a classroom first"</literal></expr></argument>, <argument><expr><literal type="string">"Error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return>return;</return>
				}</block></then></if></elseif>
				
				<elseif>else <if>if<condition>(<expr><name>timeSlotSelectedIndex</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
					<expr_stmt><expr><call><name>showMessage</name><argument_list>(<argument><expr><literal type="string">"Select a time slot first"</literal></expr></argument>, <argument><expr><literal type="string">"Error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return>return;</return>
				}</block></then></if></elseif></if>
				
				
			}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>btnUpdateSelectedCourse</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><literal type="number">318</literal></expr></argument>, <argument><expr><literal type="number">298</literal></expr></argument>, <argument><expr><literal type="number">441</literal></expr></argument>, <argument><expr><literal type="number">48</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>rescheduleIndividual</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>btnUpdateSelectedCourse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		
		<comment type="line">//------------initialization of data--------//</comment>
		<expr_stmt><expr><call><name>initializeBackgroundData</name><argument_list>(<argument><expr><name><name>CourseScheduleUI</name><operator>.</operator><name>adminDepartment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>
	
	
	<function><type><specifier>public</specifier> <name>void</name></type> <name>initializeBackgroundData</name><parameter_list>(<param><decl><type><name>Department</name></type> <name>department</name></decl></param>)</parameter_list><block>{
		<expr_stmt><expr><name>allDeptCourseOfferings</name> <operator>=</operator> <call><name><name>department</name><operator>.</operator><name>getDepartmentCourseOffered</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>allDeptCoursesSchedule</name> <operator>=</operator> <call><name><name>CourseSchedule</name><operator>.</operator><name>getAllScheduledCourses</name></name><argument_list>(<argument><expr><name>department</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>initializeJListsForCourseSchedule</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>initilizeSingleRescheduleTab</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><type><specifier>private</specifier> <name>void</name></type> <name>initializeJListsForCourseSchedule</name><parameter_list>()</parameter_list><block>{
		<decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>courseNameList</name> <init>= <expr><operator>new</operator> <name><name>String</name><index>[<expr><call><name><name>allDeptCoursesSchedule</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Integer</name><index>[]</index></type> <name>courseOfferIDList</name> <init>= <expr><operator>new</operator> <name><name>Integer</name><index>[<expr><call><name><name>allDeptCoursesSchedule</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>profNameList</name> <init>= <expr><operator>new</operator> <name><name>String</name><index>[<expr><call><name><name>allDeptCoursesSchedule</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>classLocationList</name> <init>= <expr><operator>new</operator> <name><name>String</name><index>[<expr><call><name><name>allDeptCoursesSchedule</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>classRoomNameList</name> <init>= <expr><operator>new</operator> <name><name>String</name><index>[<expr><call><name><name>allDeptCoursesSchedule</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>classTimingList</name> <init>= <expr><operator>new</operator> <name><name>String</name><index>[<expr><call><name><name>allDeptCoursesSchedule</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
		
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name><name>allDeptCoursesSchedule</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
			<decl_stmt><decl><type><name>CourseSchedule</name></type> <name>cs</name></decl>;</decl_stmt>
			<try>try <block>{
				<expr_stmt><expr><name>cs</name> <operator>=</operator> <call><name><name>allDeptCoursesSchedule</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				
				<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"oID"</literal></expr></argument>, <argument><expr><literal type="string">"courseschedule"</literal></expr></argument>, <argument><expr><literal type="string">"OfferID"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><name>int</name></type> <name>oID</name> <init>= <expr><call><name><name>cs</name><operator>.</operator><name>getOfferID</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>CourseOffered</name></type> <name>co</name> <init>= <expr><operator>new</operator> <call><name>CourseOffered</name><argument_list>(<argument><expr><name>oID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				
				<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"courseName"</literal></expr></argument>, <argument><expr><literal type="string">"courses"</literal></expr></argument>, <argument><expr><literal type="string">"CourseName"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><name>String</name></type> <name>courseName</name> <init>= <expr><call><name><name>co</name><operator>.</operator><name>getCourseName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name><name>courseNameList</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>courseName</name></expr>;</expr_stmt>
				
				<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"offerID"</literal></expr></argument>, <argument><expr><literal type="string">"coursesoffered"</literal></expr></argument>, <argument><expr><literal type="string">"OfferID"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><name>int</name></type> <name>offerID</name> <init>= <expr><call><name><name>co</name><operator>.</operator><name>getOfferID</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name><name>courseOfferIDList</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>offerID</name></expr>;</expr_stmt>
				
				<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"prof"</literal></expr></argument>, <argument><expr><literal type="string">"people"</literal></expr></argument>, <argument><expr><literal type="string">"Name"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><name>String</name></type> <name>prof</name> <init>= <expr><call><name><name>co</name><operator>.</operator><name>getProfessorName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name><name>profNameList</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>prof</name></expr>;</expr_stmt>
				
				<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"classLoc"</literal></expr></argument>, <argument><expr><literal type="string">"classroom"</literal></expr></argument>, <argument><expr><literal type="string">"ClassroomLocation"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><name>String</name></type> <name>classLoc</name> <init>= <expr><call><name><name>co</name><operator>.</operator><name>getClassRoomLocation</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name><name>classLocationList</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>classLoc</name></expr>;</expr_stmt>
				
				<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"className"</literal></expr></argument>, <argument><expr><literal type="string">"classroom"</literal></expr></argument>, <argument><expr><literal type="string">"ClassroomName"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><name>String</name></type> <name>className</name> <init>= <expr><call><name><name>co</name><operator>.</operator><name>getClassRoomName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name><name>classRoomNameList</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>className</name></expr>;</expr_stmt>
				
				<expr_stmt><expr><name><name>classTimingList</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>co</name><operator>.</operator><name>getTiming</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				
			}</block> <catch>catch <parameter_list>(<param><decl><type><name><name>Course</name><operator>.</operator><name>CourseDoesNotExistException</name></name></type> <name>e</name></decl></param>)</parameter_list> <block>{
				<comment type="line">// TODO Auto-generated catch block</comment>
				<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></catch> <catch>catch <parameter_list>(<param><decl><type><name><name>CourseOffered</name><operator>.</operator><name>CourseOfferingDoesNotExistException</name></name></type> <name>e</name></decl></param>)</parameter_list> <block>{
				<comment type="line">// TODO Auto-generated catch block</comment>
				<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
		}</block></for>
		<comment type="line">//Setting the Jlists</comment>
		<expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>courseNameList</name><operator>.</operator><name>setListData</name></name><argument_list>(<argument><expr><name>courseNameList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>courseOfferIDList</name><operator>.</operator><name>setListData</name></name><argument_list>(<argument><expr><name>courseOfferIDList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>professorNameList</name><operator>.</operator><name>setListData</name></name><argument_list>(<argument><expr><name>profNameList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>classLocationList</name><operator>.</operator><name>setListData</name></name><argument_list>(<argument><expr><name>classLocationList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>classNameList</name><operator>.</operator><name>setListData</name></name><argument_list>(<argument><expr><name>classRoomNameList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>classTimingList</name><operator>.</operator><name>setListData</name></name><argument_list>(<argument><expr><name>classTimingList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<comment type="line">//also initializing the offer select combo in the single reschedule tab</comment>
		<expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>courseScheduledCombo</name><operator>.</operator><name>setModel</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>DefaultComboBoxModel</name><argument_list type="template">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>courseOfferIDList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>setSelectionForCurrentSchedule</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
	}</block></function>
	
	<function><type><specifier>private</specifier> <name>void</name></type> <name>initilizeSingleRescheduleTab</name><parameter_list>()</parameter_list> <block>{
		<decl_stmt><decl><type><name>CourseOffered</name></type> <name>co</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><operator>(</operator><name>Integer</name><operator>)</operator><call><name><name>courseScheduledCombo</name><operator>.</operator><name>getSelectedIndex</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>index</name><operator>&gt;=</operator><literal type="number">0</literal></expr>)</condition><then><block>{
			<try>try <block>{
				<decl_stmt><decl><type><name>int</name></type> <name>offerID</name> <init>= <expr><operator>(</operator><name>Integer</name><operator>)</operator><call><name><name>courseScheduledCombo</name><operator>.</operator><name>getSelectedItem</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name>co</name> <operator>=</operator> <operator>new</operator> <call><name>CourseOffered</name><argument_list>(<argument><expr><name>offerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><name>String</name></type> <name>s</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
				
				<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"courseName"</literal></expr></argument>, <argument><expr><literal type="string">"courses"</literal></expr></argument>, <argument><expr><literal type="string">"CourseName"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><name>String</name></type> <name>courseName</name> <init>= <expr><call><name><name>co</name><operator>.</operator><name>getCourseName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name>s</name><operator>+=</operator><literal type="string">"Course Name:"</literal><operator>+</operator><name>courseName</name></expr>;</expr_stmt>
				
				<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"deptName"</literal></expr></argument>, <argument><expr><literal type="string">"department"</literal></expr></argument>, <argument><expr><literal type="string">"DepartmentName"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><name>String</name></type> <name>deptName</name> <init>= <expr><call><name><name>co</name><operator>.</operator><name>getDepartmentName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name>s</name><operator>+=</operator><literal type="string">"\nDepartment:"</literal><operator>+</operator><name>deptName</name></expr>;</expr_stmt>
				
				<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"classLoc"</literal></expr></argument>, <argument><expr><literal type="string">"classroom"</literal></expr></argument>, <argument><expr><literal type="string">"ClassroomLocation"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><name>String</name></type> <name>classLoc</name> <init>= <expr><call><name><name>co</name><operator>.</operator><name>getClassRoomLocation</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name>s</name><operator>+=</operator><literal type="string">"\nClassroom Location:"</literal><operator>+</operator><name>classLoc</name></expr>;</expr_stmt>
				
				<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"className"</literal></expr></argument>, <argument><expr><literal type="string">"classroom"</literal></expr></argument>, <argument><expr><literal type="string">"ClassroomName"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><name>String</name></type> <name>className</name> <init>= <expr><call><name><name>co</name><operator>.</operator><name>getClassRoomName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name>s</name><operator>+=</operator><literal type="string">"\nClasstroom Name:"</literal><operator>+</operator> <name>className</name></expr>;</expr_stmt>
				
				<expr_stmt><expr><name>s</name><operator>+=</operator><literal type="string">"\nTimings:"</literal><operator>+</operator><call><name><name>co</name><operator>.</operator><name>getTiming</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				
				<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"prof"</literal></expr></argument>, <argument><expr><literal type="string">"people"</literal></expr></argument>, <argument><expr><literal type="string">"Name"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><name>String</name></type> <name>prof</name> <init>= <expr><call><name><name>co</name><operator>.</operator><name>getProfessorName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name>s</name><operator>+=</operator><literal type="string">"\nTaught by professor:"</literal><operator>+</operator><name>prof</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>courseScheduleTextPane</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				
			}</block> <catch>catch <parameter_list>(<param><decl><type><name><name>Course</name><operator>.</operator><name>CourseDoesNotExistException</name></name></type> <name>e</name></decl></param>)</parameter_list> <block>{
				<comment type="line">// TODO Auto-generated catch block</comment>
				<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></catch> <catch>catch <parameter_list>(<param><decl><type><name><name>CourseOffered</name><operator>.</operator><name>CourseOfferingDoesNotExistException</name></name></type> <name>e</name></decl></param>)</parameter_list> <block>{
				<comment type="line">// TODO Auto-generated catch block</comment>
				<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
		}</block></then></if>
	}</block></function>
	
	<function><type><specifier>private</specifier> <name>void</name></type> <name>updateCourseSchedule</name><parameter_list>(<param><decl><type><name>CourseOffered</name></type> <name>coursOffered</name></decl></param>, <param><decl><type><name>Classroom</name></type> <name>classroom</name></decl></param>, <param><decl><type><name>Timeslots</name></type> <name>timeslot</name></decl></param>)</parameter_list><block>{
		<try>try <block>{
			<expr_stmt><expr><call><name><name>CourseSchedule</name><operator>.</operator><name>updateCourseSchedule</name></name><argument_list>(<argument><expr><name>coursOffered</name></expr></argument>, <argument><expr><name>classroom</name></expr></argument>, <argument><expr><name>timeslot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>showMessage</name><argument_list>(<argument><expr><literal type="string">"Updated successfully"</literal></expr></argument>, <argument><expr><literal type="string">"Success"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>initializeBackgroundData</name><argument_list>(<argument><expr><name><name>CourseScheduleUI</name><operator>.</operator><name>adminDepartment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>initializeJListsForCourseSchedule</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>ClassroomLocation</name></type> <name>l</name> <init>= <expr><call><name><name>ClassroomLocation</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator><call><name><name>classLocationCombo</name><operator>.</operator><name>getSelectedItem</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>timeSlotType</name> <init>= <expr><call><name><name>timeSlotTypeCombo</name><operator>.</operator><name>getSelectedIndex</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>CourseOffered</name></type> <name>c</name> <init>= <expr><operator>new</operator> <call><name>CourseOffered</name><argument_list>(<argument><expr><operator>(</operator><name>Integer</name><operator>)</operator><call><name><name>courseScheduledCombo</name><operator>.</operator><name>getSelectedItem</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>cap</name> <init>= <expr><call><name><name>c</name><operator>.</operator><name>getTotalCapacity</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>initializeEmptyClassAndTimeSlot</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>timeSlotType</name></expr></argument>, <argument><expr><name>cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
		}</block> <catch>catch <parameter_list>(<param><decl><type><name><name>CourseOffered</name><operator>.</operator><name>CourseOfferingNotCurrentException</name></name></type> <name>e</name></decl></param>)</parameter_list> <block>{
			<expr_stmt><expr><call><name>showMessage</name><argument_list>(<argument><expr><literal type="string">"Unable to update"</literal></expr></argument>, <argument><expr><literal type="string">"Unable to update"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></catch> <catch>catch <parameter_list>(<param><decl><type><name><name>Course</name><operator>.</operator><name>CourseDoesNotExistException</name></name></type> <name>e</name></decl></param>)</parameter_list> <block>{
			<comment type="line">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></catch> <catch>catch <parameter_list>(<param><decl><type><name><name>CourseOffered</name><operator>.</operator><name>CourseOfferingDoesNotExistException</name></name></type> <name>e</name></decl></param>)</parameter_list> <block>{
			<comment type="line">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
	}</block></function>
	
	<function><type><specifier>private</specifier> <name>void</name></type> <name>initializeEmptyClassAndTimeSlot</name><parameter_list>(<param><decl><type><name>ClassroomLocation</name></type> <name>location</name></decl></param>, <param><decl><type><name>int</name></type> <name>timeSlotType</name></decl></param>, <param><decl><type><name>int</name></type> <name>courseCapacity</name></decl></param>)</parameter_list><block>{
		<decl_stmt><decl><type><name><name>LinkedHashMap</name><argument_list type="template">&lt;<argument><name>Integer</name></argument>, <argument><name>Classroom</name></argument>&gt;</argument_list></name></type> <name>emptyClassRooms</name> <init>= <expr><call><name><name>Classroom</name><operator>.</operator><name>getAllEmptyClassroom</name></name><argument_list>(<argument><expr><name>location</name></expr></argument>, <argument><expr><name>timeSlotType</name></expr></argument>, <argument><expr><name>courseCapacity</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>classroomAndTimeslots</name> <operator>=</operator> <operator>new</operator> <call><name><name>LinkedHashMap</name><argument_list type="template">&lt;<argument><name>Classroom</name></argument>, <argument><name><name>ArrayList</name><argument_list type="template">&lt;<argument><name>Timeslots</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>		
		<decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>classRoomStrings</name> <init>= <expr><operator>new</operator> <name><name>String</name><index>[<expr><call><name><name>emptyClassRooms</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>index</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>Integer</name></type> <name>i</name> <range>: <expr><call><name><name>emptyClassRooms</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block>{
			<decl_stmt><decl><type><name>Classroom</name></type> <name>cr</name> <init>= <expr><call><name><name>emptyClassRooms</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="template">&lt;<argument><name>Timeslots</name></argument>&gt;</argument_list></name></type> <name>ts</name> <init>= <expr><call><name><name>cr</name><operator>.</operator><name>findOpenSlotsForClassroom</name></name><argument_list>(<argument><expr><name>timeSlotType</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>classroomAndTimeslots</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>cr</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>classRoomStrings</name><index>[<expr><name>index</name></expr>]</index></name> <operator>=</operator> <call><name><name>cr</name><operator>.</operator><name>getClassroomName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr>;</expr_stmt>			
			<if>if<condition>(<expr><name>index</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><call><name>initializeEmptyTimeSlotCombo</name><argument_list>(<argument><expr><name>cr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
			<expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt>
		}</block></for>
		
		<expr_stmt><expr><call><name><name>classRoomCombo</name><operator>.</operator><name>setModel</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>DefaultComboBoxModel</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>classRoomStrings</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if<condition>(<expr><call><name><name>classRoomCombo</name><operator>.</operator><name>getModel</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSize</name><argument_list>()</argument_list></call><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><call><name><name>classRoomCombo</name><operator>.</operator><name>setSelectedIndex</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
		
		<if>if<condition>(<expr><call><name><name>timingAvailableCombo</name><operator>.</operator><name>getModel</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSize</name><argument_list>()</argument_list></call><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><call><name><name>timingAvailableCombo</name><operator>.</operator><name>setSelectedIndex</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
		
	}</block></function>
	
	<function><type><specifier>private</specifier> <name>void</name></type> <name>initializeEmptyTimeSlotCombo</name><parameter_list>(<param><decl><type><name>Classroom</name></type> <name>c</name></decl></param>)</parameter_list><block>{
		<decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="template">&lt;<argument><name>Timeslots</name></argument>&gt;</argument_list></name></type> <name>ts</name> <init>= <expr><call><name><name>classroomAndTimeslots</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>timeSlotsStrings</name> <init>= <expr><operator>new</operator> <name><name>String</name><index>[<expr><call><name><name>ts</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name><name>ts</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
			<expr_stmt><expr><name><name>timeSlotsStrings</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>ts</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getStartHour</name><argument_list>()</argument_list></call><operator>+</operator> <literal type="string">"00 to "</literal><operator>+</operator><call><name><name>ts</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getEndHour</name><argument_list>()</argument_list></call><operator>+</operator><literal type="string">"00"</literal></expr>;</expr_stmt>
		}</block></for>
		
		<expr_stmt><expr><call><name><name>timingAvailableCombo</name><operator>.</operator><name>setModel</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>DefaultComboBoxModel</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>timeSlotsStrings</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><type><specifier>private</specifier> <name>void</name></type> <name>showMessage</name><parameter_list>(<param><decl><type><name>String</name></type> <name>message</name></decl></param>, <param><decl><type><name>String</name></type> <name>title</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name><name>JOptionPane</name><operator>.</operator><name>showMessageDialog</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name>title</name></expr></argument>, <argument><expr><name><name>JOptionPane</name><operator>.</operator><name>INFORMATION_MESSAGE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
	
	<function><type><specifier>private</specifier> <name>void</name></type> <name>setSelectionForCurrentSchedule</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>)</parameter_list><block>{
		<expr_stmt><expr><call><name><name>courseNameList</name><operator>.</operator><name>setSelectedIndex</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>courseOfferIDList</name><operator>.</operator><name>setSelectedIndex</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>professorNameList</name><operator>.</operator><name>setSelectedIndex</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>classLocationList</name><operator>.</operator><name>setSelectedIndex</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>classNameList</name><operator>.</operator><name>setSelectedIndex</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>classTimingList</name><operator>.</operator><name>setSelectedIndex</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

}</block></class>
</unit>
