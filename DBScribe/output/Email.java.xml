<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Boyang\Desktop\ASE15\subjects\UMAS\src\com\umas\code\Email.java"><package>package <name><name>com</name><operator>.</operator><name>umas</name><operator>.</operator><name>code</name></name>;</package>


<comment type="block" format="javadoc">/****************@author Simant Purohit*********************************/</comment>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>UnsupportedEncodingException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Date</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Properties</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>activation</name><operator>.</operator><name>DataHandler</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>activation</name><operator>.</operator><name>DataSource</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>activation</name><operator>.</operator><name>FileDataSource</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>mail</name><operator>.</operator><name>Authenticator</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>mail</name><operator>.</operator><name>BodyPart</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>mail</name><operator>.</operator><name>Message</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>mail</name><operator>.</operator><name>MessagingException</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>mail</name><operator>.</operator><name>Multipart</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>mail</name><operator>.</operator><name>PasswordAuthentication</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>mail</name><operator>.</operator><name>Session</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>mail</name><operator>.</operator><name>Transport</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>mail</name><operator>.</operator><name>internet</name><operator>.</operator><name>AddressException</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>mail</name><operator>.</operator><name>internet</name><operator>.</operator><name>InternetAddress</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>mail</name><operator>.</operator><name>internet</name><operator>.</operator><name>MimeBodyPart</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>mail</name><operator>.</operator><name>internet</name><operator>.</operator><name>MimeMessage</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>mail</name><operator>.</operator><name>internet</name><operator>.</operator><name>MimeMultipart</name></name>;</import>


<class><specifier>public</specifier> class <name>Email</name> <block>{

	<comment type="line">//send email to single recipient</comment>
	<comment type="line">//send email to multiple recipient</comment>
	<comment type="line">//handle zero to multiple attachments</comment>
	<decl_stmt><decl><type><specifier>private</specifier> <name>Session</name></type> <name>session</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>Authenticator</name></type> <name>authentication</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>Properties</name></type> <name>properties</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <name>String</name></type> <name>fromEmail</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>String</name></type> <name>password</name></decl>;</decl_stmt>
    
    <constructor><specifier>private</specifier> <name>Email</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>fromEmail</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>String</name></type> <name>password</name></decl></param>)</parameter_list><block>{    	
    	<comment type="line">//try parsing the from address</comment>
    	<decl_stmt><decl><type><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unused"</literal></expr></argument>)</argument_list></annotation>
		<name>InternetAddress</name><index>[]</index></type> <name>fromAddress</name> <init>= <expr><call><name>parseToEmailAddress</name><argument_list>(<argument><expr><name>fromEmail</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    	
    	<expr_stmt><expr><name><name>this</name><operator>.</operator><name>fromEmail</name></name> <operator>=</operator> <name>fromEmail</name></expr>;</expr_stmt>
    	<expr_stmt><expr><name><name>this</name><operator>.</operator><name>password</name></name> <operator>=</operator> <name>password</name></expr>;</expr_stmt>
    	
    	<expr_stmt><expr><name><name>this</name><operator>.</operator><name>properties</name></name> <operator>=</operator> <operator>new</operator> <call><name>Properties</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    	
    	<comment type="line">//SMTP Host</comment>
    	<expr_stmt><expr><call><name><name>properties</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"mail.smtp.host"</literal></expr></argument>, <argument><expr><literal type="string">"smtp.gmail.com"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
    	
    	<comment type="line">//SSL Port</comment>
    	<expr_stmt><expr><call><name><name>properties</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"mail.smtp.socketFactory.port"</literal></expr></argument>, <argument><expr><literal type="string">"465"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
    	
    	<comment type="line">//SSL Factory Class</comment>
    	<expr_stmt><expr><call><name><name>properties</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"mail.smtp.socketFactory.class"</literal></expr></argument>,
                <argument><expr><literal type="string">"javax.net.ssl.SSLSocketFactory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
    	
    	<comment type="line">//Enabling SMTP Authentication</comment>
    	<expr_stmt><expr><call><name><name>properties</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"mail.smtp.auth"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    	
    	<comment type="line">//SMTP Port</comment>
    	<expr_stmt><expr><call><name><name>properties</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"mail.smtp.port"</literal></expr></argument>, <argument><expr><literal type="string">"465"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    	
    	<expr_stmt><expr><name><name>this</name><operator>.</operator><name>authentication</name></name> <operator>=</operator> <operator>new</operator> <class><super><name>Authenticator</name></super><argument_list>()</argument_list> <block>{
    		<function><type><annotation>@<name>Override</name></annotation>
            <specifier>protected</specifier> <name>PasswordAuthentication</name></type> <name>getPasswordAuthentication</name><parameter_list>()</parameter_list> <block>{
                <return>return <expr><operator>new</operator> <call><name>PasswordAuthentication</name><argument_list>(<argument><expr><name>fromEmail</name></expr></argument>, <argument><expr><name>password</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>
        }</block></class></expr>;</expr_stmt>
         
       <expr_stmt><expr><name><name>this</name><operator>.</operator><name>session</name></name> <operator>=</operator> <call><name><name>Session</name><operator>.</operator><name>getDefaultInstance</name></name><argument_list>(<argument><expr><name>properties</name></expr></argument>, <argument><expr><name>authentication</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
    
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Email</name></type> <name>getInstance</name><parameter_list>(<param><decl><type><name>String</name></type> <name>fromEmail</name></decl></param>, <param><decl><type><name>String</name></type> <name>password</name></decl></param>)</parameter_list><block>{
    	<decl_stmt><decl><type><name>Email</name></type> <name>email</name> <init>= <expr><operator>new</operator> <call><name>Email</name><argument_list>(<argument><expr><name>fromEmail</name></expr></argument>, <argument><expr><name>password</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    	<return>return <expr><name>email</name></expr>;</return>
    }</block></function>
    
    <comment type="line">//Address parser for recipient address</comment>
    <comment type="line">//pass comma separated recipient email ids</comment>
    <comment type="line">//returns array of addresses</comment>
    <function><type><specifier>private</specifier> <name>InternetAddress</name><index>[]</index></type> <name>parseToEmailAddress</name><parameter_list>(<param><decl><type><name>String</name></type> <name>toEmail</name></decl></param>)</parameter_list><block>{
    	<decl_stmt><decl><type><name>InternetAddress</name><index>[]</index></type> <name>email</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    	<try>try <block>{
			<expr_stmt><expr><name>email</name> <operator>=</operator> <call><name><name>InternetAddress</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>toEmail</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch>catch <parameter_list>(<param><decl><type><name>AddressException</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
			<comment type="line">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
    	
    	<return>return <expr><name>email</name></expr>;</return>
    }</block></function>
	
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>sendEmail</name><parameter_list>(<param><decl><type><name>String</name></type> <name>toEmail</name></decl></param>, <param><decl><type><name>String</name></type> <name>subject</name></decl></param>, <param><decl><type><name>String</name></type> <name>body</name></decl></param>)</parameter_list><block>{
        <try>try
        <block>{
          <decl_stmt><decl><type><name>MimeMessage</name></type> <name>msg</name> <init>= <expr><operator>new</operator> <call><name>MimeMessage</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <comment type="line">//set message headers</comment>
          <expr_stmt><expr><call><name><name>msg</name><operator>.</operator><name>addHeader</name></name><argument_list>(<argument><expr><literal type="string">"Content-type"</literal></expr></argument>, <argument><expr><literal type="string">"text/HTML; charset=UTF-8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>msg</name><operator>.</operator><name>addHeader</name></name><argument_list>(<argument><expr><literal type="string">"format"</literal></expr></argument>, <argument><expr><literal type="string">"flowed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>msg</name><operator>.</operator><name>addHeader</name></name><argument_list>(<argument><expr><literal type="string">"Content-Transfer-Encoding"</literal></expr></argument>, <argument><expr><literal type="string">"8bit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
          <expr_stmt><expr><call><name><name>msg</name><operator>.</operator><name>setFrom</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>InternetAddress</name><argument_list>(<argument><expr><name>fromEmail</name></expr></argument>, <argument><expr><literal type="string">"UMAS-EMAIL"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
          <expr_stmt><expr><call><name><name>msg</name><operator>.</operator><name>setReplyTo</name></name><argument_list>(<argument><expr><call><name><name>InternetAddress</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>fromEmail</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
          <expr_stmt><expr><call><name><name>msg</name><operator>.</operator><name>setSubject</name></name><argument_list>(<argument><expr><name>subject</name></expr></argument>, <argument><expr><literal type="string">"UTF-8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
          <expr_stmt><expr><call><name><name>msg</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>body</name></expr></argument>, <argument><expr><literal type="string">"UTF-8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
          <expr_stmt><expr><call><name><name>msg</name><operator>.</operator><name>setSentDate</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Date</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
          <expr_stmt><expr><call><name><name>msg</name><operator>.</operator><name>setRecipients</name></name><argument_list>(<argument><expr><name><name>Message</name><operator>.</operator><name>RecipientType</name><operator>.</operator><name>TO</name></name></expr></argument>, <argument><expr><call><name>parseToEmailAddress</name><argument_list>(<argument><expr><name>toEmail</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Sending"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>Transport</name><operator>.</operator><name>send</name></name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
          <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Email Sent Successfully!!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        }</block>
        <catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
          <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>sendEmailWithAttachments</name><parameter_list>(<param><decl><type><name>String</name></type> <name>toEmail</name></decl></param>, <param><decl><type><name>String</name></type> <name>subject</name></decl></param>, <param><decl><type><name>String</name></type> <name>body</name></decl></param>, <param><decl><type><name><name>String</name><index>[]</index></name></type> <name>attachmentLocations</name></decl></param>)</parameter_list><block>{
    	<try>try<block>{
    		 <decl_stmt><decl><type><name>MimeMessage</name></type> <name>msg</name> <init>= <expr><operator>new</operator> <call><name>MimeMessage</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
             <comment type="line">//set message headers</comment>
             <expr_stmt><expr><call><name><name>msg</name><operator>.</operator><name>addHeader</name></name><argument_list>(<argument><expr><literal type="string">"Content-type"</literal></expr></argument>, <argument><expr><literal type="string">"text/HTML; charset=UTF-8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             <expr_stmt><expr><call><name><name>msg</name><operator>.</operator><name>addHeader</name></name><argument_list>(<argument><expr><literal type="string">"format"</literal></expr></argument>, <argument><expr><literal type="string">"flowed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             <expr_stmt><expr><call><name><name>msg</name><operator>.</operator><name>addHeader</name></name><argument_list>(<argument><expr><literal type="string">"Content-Transfer-Encoding"</literal></expr></argument>, <argument><expr><literal type="string">"8bit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
             <expr_stmt><expr><call><name><name>msg</name><operator>.</operator><name>setFrom</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>InternetAddress</name><argument_list>(<argument><expr><name>fromEmail</name></expr></argument>, <argument><expr><literal type="string">"UMAS-EMAIL"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
             <expr_stmt><expr><call><name><name>msg</name><operator>.</operator><name>setReplyTo</name></name><argument_list>(<argument><expr><call><name><name>InternetAddress</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>fromEmail</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
             <expr_stmt><expr><call><name><name>msg</name><operator>.</operator><name>setSubject</name></name><argument_list>(<argument><expr><name>subject</name></expr></argument>, <argument><expr><literal type="string">"UTF-8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
             <expr_stmt><expr><call><name><name>msg</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>body</name></expr></argument>, <argument><expr><literal type="string">"UTF-8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
             <expr_stmt><expr><call><name><name>msg</name><operator>.</operator><name>setSentDate</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Date</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
            <expr_stmt><expr><call><name><name>msg</name><operator>.</operator><name>setRecipients</name></name><argument_list>(<argument><expr><name><name>Message</name><operator>.</operator><name>RecipientType</name><operator>.</operator><name>TO</name></name></expr></argument>, <argument><expr><call><name><name>InternetAddress</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>toEmail</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              
            <comment type="line">// Create the message body part</comment>
            <decl_stmt><decl><type><name>BodyPart</name></type> <name>messageBodyPart</name> <init>= <expr><operator>new</operator> <call><name>MimeBodyPart</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    
            <comment type="line">// Fill the message</comment>
            <expr_stmt><expr><call><name><name>messageBodyPart</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>body</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             
            <comment type="line">// Create a multipart message for attachment</comment>
            <decl_stmt><decl><type><name>Multipart</name></type> <name>multipart</name> <init>= <expr><operator>new</operator> <call><name>MimeMultipart</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    
            <comment type="line">// Set text message part</comment>
            <expr_stmt><expr><call><name><name>multipart</name><operator>.</operator><name>addBodyPart</name></name><argument_list>(<argument><expr><name>messageBodyPart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
            <comment type="line">// Second part is attachment</comment>
            <for>for<control>(<init><decl><type><name>String</name></type> <name>fileLocation</name><range>: <expr><name>attachmentLocations</name></expr></range></decl></init>)</control><block>{
            	<expr_stmt><expr><name>messageBodyPart</name> <operator>=</operator> <operator>new</operator> <call><name>MimeBodyPart</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>DataSource</name></type> <name>source</name> <init>= <expr><operator>new</operator> <call><name>FileDataSource</name><argument_list>(<argument><expr><name>fileLocation</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>messageBodyPart</name><operator>.</operator><name>setDataHandler</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>DataHandler</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>messageBodyPart</name><operator>.</operator><name>setFileName</name></name><argument_list>(<argument><expr><name>fileLocation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>multipart</name><operator>.</operator><name>addBodyPart</name></name><argument_list>(<argument><expr><name>messageBodyPart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
                
            <comment type="line">// Send the complete message parts</comment>
            <expr_stmt><expr><call><name><name>msg</name><operator>.</operator><name>setContent</name></name><argument_list>(<argument><expr><name>multipart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
            <comment type="line">// Send message</comment>
            <expr_stmt><expr><call><name><name>Transport</name><operator>.</operator><name>send</name></name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Email Sent with all the attachments"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
         }</block><catch>catch <parameter_list>(<param><decl><type><name>MessagingException</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
         }</block></catch> <catch>catch <parameter_list>(<param><decl><type><name>UnsupportedEncodingException</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
       }</block></catch></try>
   }</block></function>
    
}</block></class>
</unit>
