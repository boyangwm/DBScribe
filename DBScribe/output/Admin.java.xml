<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Boyang\Desktop\ASE15\subjects\UMAS\src\com\umas\code\Admin.java"><package>package <name><name>com</name><operator>.</operator><name>umas</name><operator>.</operator><name>code</name></name>;</package>


<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>Connection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>PreparedStatement</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>ResultSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>SQLException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Akshay
 * 
 */</comment>

<comment type="block" format="javadoc">/*************** ADMIN.JAVA CLASS WAS WRITTEN BY AKSHAY THIRKATEH ********************************/</comment>

<class><specifier>public</specifier> class <name>Admin</name> <super><extends>extends <name>Employee</name></extends></super> <block>{


	<comment type="block">/* this constructor calls the employee class constructor by UIN */</comment>
	<constructor><specifier>public</specifier> <name>Admin</name><parameter_list>(<param><decl><type><name>int</name></type> <name>UIN</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>PersonDoesNotExistException</name></expr></argument></throws> <block>{
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// TODO Auto-generated constructor stub</comment>
	}</block></constructor>

	<comment type="block">/*
	 * addAdmin function takes in the inputs of the name of the employee and the
	 * department object.
	 * 
	 * checks if the department object is not null
	 * 
	 * calls the add into the database which returns(int) the added UIN.
	 * 
	 * with the retrieved UIN, it is then added into the employee table.
	 * 
	 * if returns true then it is successfully added
	 * 
	 * else the function returns false
	 */</comment>
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>addAdmin</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>, <param><decl><type><name>Department</name></type> <name>dept</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>loginDetailsnotAdded</name></expr></argument></throws> <block>{

		<decl_stmt><decl><type><name>boolean</name></type> <name>isAdded</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt> <comment type="line">//create a boolean value for returning. set it to false</comment>

		<if>if <condition>(<expr><name>dept</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<comment type="line">//if the dept object is null then return false</comment>
			<return>return <expr><literal type="boolean">false</literal></expr>;</return>
		}</block></then></if>
		
		<if>if <condition>(<expr><name>name</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<comment type="line">//if the name is null then return false</comment>
			<return>return <expr><literal type="boolean">false</literal></expr>;</return>
		}</block></then></if>
		
		<if>if <condition>(<expr><call><name><name>name</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block>{
			<comment type="line">//if the name is null then return false</comment>
			<return>return <expr><literal type="boolean">false</literal></expr>;</return>
		}</block></then></if>

		<decl_stmt><decl><type><name>int</name></type> <name>addedUIN</name> <init>= <expr><call><name><name>Employee</name><operator>.</operator><name>addIntoDatabase</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>dept</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//add the admin into the database with the name, dept and position ID</comment>

		<decl_stmt><decl><type><name>boolean</name></type> <name>isAddedtoEmp</name> <init>= <expr><call><name><name>Employee</name><operator>.</operator><name>addEmployee</name></name><argument_list>(<argument><expr><name>addedUIN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//returns true if added</comment>

		<if>if <condition>(<expr><name>isAddedtoEmp</name></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>isAdded</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt></block></then></if><comment type="line">//return true</comment>

		<return>return <expr><name>isAdded</name></expr>;</return>
	}</block></function>

	<comment type="block">/*
	 * getAllAdmin function returns an arraylist of the admins from the
	 * database.
	 * 
	 * It retrieves the data from the people table.
	 */</comment>
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>ArrayList</name><argument_list type="template">&lt;<argument><name>Admin</name></argument>&gt;</argument_list></name></type> <name>getAllAdmin</name><parameter_list>()</parameter_list> <block>{
		<comment type="line">// if(Professor == null)</comment>
		<comment type="line">// throw new NullPointerException();</comment>

		<decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="template">&lt;<argument><name>Admin</name></argument>&gt;</argument_list></name></type> <name>getAllAdmin</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="template">&lt;<argument><name>Admin</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//declare a arraylist</comment>

		<try>try <block>{
			<decl_stmt><decl><type><name>Connection</name></type> <name>conn</name> <init>= <expr><call><name><name>Database</name><operator>.</operator><name>getConnection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//establish a connection</comment>

			<try>try <block>{
				<if>if <condition>(<expr><name>conn</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{

					<comment type="line">// Retrieve all the professors from one department</comment>
					<decl_stmt><decl><type><name>String</name></type> <name>adminSelect</name> <init>= <expr><literal type="string">"Select *"</literal> <operator>+</operator> <literal type="string">" FROM people"</literal>
							<operator>+</operator> <literal type="string">" WHERE PositionID=1"</literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>PreparedStatement</name></type> <name>statement</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>prepareStatement</name></name><argument_list>(<argument><expr><name>adminSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>ResultSet</name></type> <name>rs</name> <init>= <expr><call><name><name>statement</name><operator>.</operator><name>executeQuery</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//execute the query</comment>

					<while>while <condition>(<expr><call><name><name>rs</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
						
						<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"retreivedAdminUIN"</literal></expr></argument>,<argument><expr><literal type="string">"people"</literal></expr></argument>,<argument><expr><literal type="string">"UIN"</literal></expr></argument>,<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name>int</name></type> <name>retreivedAdminUIN</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"UIN"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//get the UIN and store it in a variable</comment>
						<decl_stmt><decl><type><name>Admin</name></type> <name>admins</name></decl>;</decl_stmt>
						<try>try <block>{
							<expr_stmt><expr><name>admins</name> <operator>=</operator> <operator>new</operator> <call><name>Admin</name><argument_list>(<argument><expr><name>retreivedAdminUIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line">//put the retrieved UIN and put it in the admin object</comment>
							<expr_stmt><expr><call><name><name>getAllAdmin</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>admins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line">//add it to the arraylist</comment>
							
							<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"adminUserName"</literal></expr></argument>, <argument><expr><literal type="string">"People"</literal></expr></argument>, <argument><expr><literal type="string">"Username"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<decl_stmt><decl><type><name>String</name></type> <name>adminUserName</name><init>=<expr><call><name><name>admins</name><operator>.</operator><name>getUserName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>	
							
							<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>adminUserName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							
						}</block> 
						<comment type="line">//catch the person does not exist exception</comment>
						<catch>catch <parameter_list>(<param><decl><type><name>PersonDoesNotExistException</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
							<comment type="line">// TODO Auto-generated catch block</comment>
							<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
						}</block></catch></try>
						
					}</block></while>

				}</block></then></if>

			}</block>
			<comment type="line">//catch the SQl exception</comment>
			<catch>catch <parameter_list>(<param><decl><type><name>SQLException</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Error fetching all the professors"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

			}</block></catch>
			<comment type="block">/*The code thats placed in the finally block gets executed no matter what. But 
														here the finally block does not contain any general statements*/</comment>
			<finally>finally <block>{
				<comment type="line">// Database.commitTransaction(conn);</comment>
			}</block></finally></try>

			<return>return <expr><name>getAllAdmin</name></expr>;</return>
		}</block>

		<finally>finally <block>{
		}</block></finally></try>

	}</block></function>

	<comment type="block">/*
	 * updateAdminUserName function takes in the inputs of the new user name of
	 * the admin 
	 * calls the boolean function update username from the people class with the new passed new username and the initialized objects
	 * username.
	 * 
	 * if updated returns true
	 * 
	 * 
	 * else the function returns false
	 */</comment>
	<function><type><specifier>public</specifier> <name>boolean</name></type> <name>updateAdminUserName</name><parameter_list>(<param><decl><type><name>String</name></type> <name>userName</name></decl></param>)</parameter_list> <block>{

		<decl_stmt><decl><type><name>boolean</name></type> <name>isUpdated</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt><comment type="line">//create a boolean value for returning. set it to false</comment>


		<try>try <block>{
			<decl_stmt><decl><type><name>Connection</name></type> <name>conn</name> <init>= <expr><call><name><name>Database</name><operator>.</operator><name>getConnection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//establish the connection</comment>

			<try>try <block>{

				<decl_stmt><decl><type><name>boolean</name></type> <name>ifAddedInLogin</name> <init>= <expr><call><name><name>People</name><operator>.</operator><name>updateUserNameIntoLoginTable</name></name><argument_list>(<argument><expr><name>userName</name></expr></argument>, <argument><expr><call><name><name>this</name><operator>.</operator><name>getUserName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//update the username inthe login table</comment>
				<if>if <condition>(<expr><name>ifAddedInLogin</name></expr>)</condition><then>
					<block type="pseudo"><expr_stmt><expr><name>isUpdated</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt></block></then></if><comment type="line">//if updated set true</comment>

			}</block>
			<comment type="line">//catch block</comment>
			<catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Error adding/updating to database"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>

		}</block>
		<comment type="line">//catch block</comment>
		<catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Connection failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></catch>
		<comment type="block">/*The code thats placed in the finally block gets executed no matter what. But 
														here the finally block does not contain any general statements*/</comment>
		<finally>finally <block>{

			<comment type="line">// System.out.println("retrieved");</comment>
		}</block></finally></try>

		<return>return <expr><name>isUpdated</name></expr>;</return>

	}</block></function>

	<comment type="block">/*
	 * updateAdminName function takes in the inputs of the new name of the admin
	 * 
	 * calls the boolean function update name from the people class with the
	 * passed new name and the initialized objects UIN.
	 * 
	 * if updated returns true
	 * 
	 * 
	 * else the function returns false
	 */</comment>
	<function><type><specifier>public</specifier> <name>boolean</name></type> <name>updateAdminName</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{

		<decl_stmt><decl><type><name>boolean</name></type> <name>isUpdated</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

		<try>try <block>{
			<decl_stmt><decl><type><name>Connection</name></type> <name>conn</name> <init>= <expr><call><name><name>Database</name><operator>.</operator><name>getConnection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//create a boolean value for returning. set it to false</comment>

			<try>try <block>{

				<decl_stmt><decl><type><name>boolean</name></type> <name>ifUpdatedInPeople</name> <init>= <expr><call><name><name>People</name><operator>.</operator><name>updateNameIntoPeopleTable</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>this</name><operator>.</operator><name>getUIN</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//update name in the people table</comment>
				<if>if <condition>(<expr><name>ifUpdatedInPeople</name></expr>)</condition><then>
					<block type="pseudo"><expr_stmt><expr><name>isUpdated</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt></block></then></if><comment type="line">//if added then set true</comment>

			}</block>
			<comment type="line">//catch block for the exception</comment>
			<catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Error adding/updating to database"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>

		}</block>
		<comment type="line">//catch block</comment>
		<catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Connection failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></catch>
		
		<comment type="block">/*The code thats placed in the finally block gets executed no matter what. But 
													here the finally block does not contain any general statements*/</comment>
		<finally>finally <block>{

			<comment type="line">// System.out.println("retrieved");</comment>
		}</block></finally></try>

		<return>return <expr><name>isUpdated</name></expr>;</return>

	}</block></function>

	<comment type="block">/*
	 * updateAdminDept function takes in the inputs of the newdept of the admin
	 * * calls the boolean function update dept from the people class with the
	 * passed new name and the initialized objects UIN.
	 * 
	 * if updated returns true
	 * 
	 * 
	 * else the function returns false
	 */</comment>

	<function><type><specifier>public</specifier> <name>boolean</name></type> <name>updateAdminDept</name><parameter_list>(<param><decl><type><name>int</name></type> <name>deptID</name></decl></param>)</parameter_list> <block>{

		<decl_stmt><decl><type><name>boolean</name></type> <name>isUpdated</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt><comment type="line">//create a boolean value for returning. set it to false</comment>


		<try>try <block>{
			<decl_stmt><decl><type><name>Connection</name></type> <name>conn</name> <init>= <expr><call><name><name>Database</name><operator>.</operator><name>getConnection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//establish a connection</comment>

			<try>try <block>{

				<decl_stmt><decl><type><name>boolean</name></type> <name>ifUpdatedInPeople</name> <init>= <expr><call><name><name>People</name><operator>.</operator><name>updateDeptIntoPeopleTable</name></name><argument_list>(<argument><expr><name>deptID</name></expr></argument>, <argument><expr><call><name><name>this</name><operator>.</operator><name>getUIN</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//update dept in people table</comment>
				<if>if <condition>(<expr><name>ifUpdatedInPeople</name></expr>)</condition><then>
					<block type="pseudo"><expr_stmt><expr><name>isUpdated</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt></block></then></if><comment type="line">//set the return type to true</comment>

			}</block>
			<comment type="line">//catch block</comment>
			<catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Error adding/updating to database"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>

		}</block>
		<comment type="line">//catch block</comment>
		<catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Connection failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></catch>

		<comment type="block">/*The code thats placed in the finally block gets executed no matter what. But 
														here the finally block does not contain any general statements*/</comment>
		<finally>finally <block>{

			<comment type="line">// System.out.println("retrieved");</comment>
		}</block></finally></try>

		<return>return <expr><name>isUpdated</name></expr>;</return>

	}</block></function>

	<comment type="block">/*
	 * All admin functions add, update, retrieve are specified in the this class
	 * 
	 * local main class is used for testing functions and specific executions
	 */</comment>

	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<param><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></param>)</parameter_list> <block>{


	}</block></function>

}</block></class>
</unit>
