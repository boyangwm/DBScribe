<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Boyang\Desktop\ASE15\subjects\UMAS\src\com\umas\code\Login.java"><package>package <name><name>com</name><operator>.</operator><name>umas</name><operator>.</operator><name>code</name></name>;</package>


<comment type="line">//import java.lang.annotation.*;</comment>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>Connection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>PreparedStatement</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>ResultSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>SQLException</name></name>;</import>

<class><specifier>public</specifier> class <name>Login</name> <block>{
	<decl_stmt><decl><type><name>String</name></type> <name>username</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>String</name></type> <name>password</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>People</name></type> <name>people</name></decl>;</decl_stmt>
	
<comment type="line">//	@Target({ElementType.LOCAL_VARIABLE})</comment>
<comment type="line">//	@Retention(RetentionPolicy.RUNTIME)</comment>
<comment type="line">//	public @interface DBAnnotation {</comment>
<comment type="line">//	 String[] variable () default "";</comment>
<comment type="line">//	 String[] table () default "";</comment>
<comment type="line">//	 String[] column () default "";</comment>
<comment type="line">//	 boolean[] isSource () default false; </comment>
<comment type="line">//	}</comment>
	
	<function><type><specifier>public</specifier> <name>String</name></type> <name>getUsername</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>username</name></expr>;</return>
	}</block></function>

	<function><type><specifier>public</specifier> <name>String</name></type> <name>getPassword</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>password</name></expr>;</return>
	}</block></function>
	
	<function><type><specifier>public</specifier> <name>void</name></type> <name>setUsername</name><parameter_list>(<param><decl><type><name>String</name></type> <name>username</name></decl></param>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>username</name></name> <operator>=</operator> <name>username</name></expr>;</expr_stmt>
	}</block></function>
	
	<function><type><specifier>public</specifier> <name>void</name></type> <name>setPassword</name><parameter_list>(<param><decl><type><name>String</name></type> <name>password</name></decl></param>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>password</name></name> <operator>=</operator> <name>password</name></expr>;</expr_stmt>
	}</block></function>

	<comment type="line">// Constructor</comment>
	<constructor><specifier>public</specifier> <name>Login</name><parameter_list>(<param><decl><type><name>String</name></type> <name>username</name></decl></param>, <param><decl><type><name><name>char</name><index>[]</index></name></type> <name>password</name></decl></param>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>username</name></name> <operator>=</operator> <name>username</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>password</name></name> <operator>=</operator> <operator>new</operator> <call><name>String</name><argument_list>(<argument><expr><name>password</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>

	<comment type="line">// To authenticate the username and password during login</comment>
	<function><type><specifier>public</specifier> <name>boolean</name></type> <name>authenticate</name><parameter_list>()</parameter_list><block>{
		<decl_stmt><decl><type><name>String</name></type> <name>username</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>getUsername</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>password</name> <init>=  <expr><call><name><name>this</name><operator>.</operator><name>getPassword</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>boolean</name></type> <name>isValidUser</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt> 
<comment type="line">//		@DBAnnotation (</comment>
<comment type="line">//				variable = {"username","password"},  </comment>
<comment type="line">//				table = "logindetails", </comment>
<comment type="line">//				column = {"Username","Password"}, </comment>
<comment type="line">//				isSource = true)</comment>
		<decl_stmt><decl><type><name>String</name></type> <name>SQLLoginSelect</name> <init>= <expr><literal type="string">"SELECT Username, Password FROM logindetails WHERE username = ? AND Password = ? ;"</literal></expr></init></decl>;</decl_stmt>
		
		<try>try <block>{
			<decl_stmt><decl><type><name>Connection</name></type> <name>conn</name> <init>= <expr><call><name><name>Database</name><operator>.</operator><name>getConnection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<try>try <block>{
				<if>if <condition>(<expr><name>conn</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
					<comment type="line">// Check if file is already present. </comment>
					<decl_stmt><decl><type><name>PreparedStatement</name></type> <name>statement</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>prepareStatement</name></name><argument_list>(<argument><expr><name>SQLLoginSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"username"</literal></expr></argument>, <argument><expr><literal type="string">"logindetails"</literal></expr></argument>, <argument><expr><literal type="string">"Username"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>statement</name><operator>.</operator><name>setString</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>username</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"password"</literal></expr></argument>, <argument><expr><literal type="string">"logindetails"</literal></expr></argument>, <argument><expr><literal type="string">"Password"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>statement</name><operator>.</operator><name>setString</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>password</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name>ResultSet</name></type> <name>rs</name> <init>= <expr><call><name><name>statement</name><operator>.</operator><name>executeQuery</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					<if>if <condition>(<expr><call><name><name>rs</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
						<comment type="line">// Retrieve by column name</comment>
						<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"tableUsername"</literal></expr></argument>, <argument><expr><literal type="string">"logindetails"</literal></expr></argument>, <argument><expr><literal type="string">"Username"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name>String</name></type> <name>tableUsername</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"Username"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"tablePassword"</literal></expr></argument>, <argument><expr><literal type="string">"logindetails"</literal></expr></argument>, <argument><expr><literal type="string">"Password"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name>String</name></type> <name>tablePassword</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"Password"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						
						<if>if<condition>(<expr><operator>(</operator><call><name><name>tableUsername</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>username</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name><name>tablePassword</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>password</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><then><block>{ 
								<expr_stmt><expr><name>isValidUser</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
							<comment type="line">//break;</comment>
						}</block></then></if>
					}</block></then></if>
				}</block></then></if>	
			}</block> <catch>catch <parameter_list>(<param><decl><type><name>SQLException</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>

		}</block> <catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		
		<return>return <expr><name>isValidUser</name></expr>;</return>
	}</block></function>
	
	<comment type="line">// Adds username and password into the database table when a person is added to the people table</comment>
	<function><type><specifier>public</specifier> <name>boolean</name></type> <name>addLoginInfoToDB</name><parameter_list>(<param><decl><type><name>String</name></type> <name>username</name></decl></param>, <param><decl><type><name>String</name></type> <name>password</name></decl></param>)</parameter_list><block>{
		<decl_stmt><decl><type><name>boolean</name></type> <name>loginInfoAdded</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>boolean</name></type> <name>isUsernamePresent</name> <init>= <expr><call><name>checkUsernameInDatabase</name><argument_list>(<argument><expr><name>username</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<if>if <condition>(<expr><name>isUsernamePresent</name> <operator>==</operator> <literal type="boolean">false</literal></expr>)</condition><then><block>{
<comment type="line">//			@DBAnnotation (</comment>
<comment type="line">//				variable = {"username","password"},  </comment>
<comment type="line">//				table = "logindetails", </comment>
<comment type="line">//				column = {"Username","Password"}, </comment>
<comment type="line">//				isSource = false)</comment>
		
			<decl_stmt><decl><type><name>String</name></type> <name>SQLLoginInsert</name> <init>= <expr><literal type="string">"INSERT INTO logindetails (Username,Password) VALUES(?,?);"</literal></expr></init></decl>;</decl_stmt>
			
			<try>try <block>{
				<decl_stmt><decl><type><name>Connection</name></type> <name>conn</name> <init>= <expr><call><name><name>Database</name><operator>.</operator><name>getConnection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<try>try <block>{
					<if>if <condition>(<expr><name>conn</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			
						<decl_stmt><decl><type><name>PreparedStatement</name></type> <name>statement</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>prepareStatement</name></name><argument_list>(<argument><expr><name>SQLLoginInsert</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"username"</literal></expr></argument>, <argument><expr><literal type="string">"logindetails"</literal></expr></argument>, <argument><expr><literal type="string">"Username"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name>statement</name><operator>.</operator><name>setString</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>username</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"password"</literal></expr></argument>, <argument><expr><literal type="string">"logindetails"</literal></expr></argument>, <argument><expr><literal type="string">"Password"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name>statement</name><operator>.</operator><name>setString</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>password</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name>statement</name><operator>.</operator><name>executeUpdate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name>Database</name><operator>.</operator><name>commitTransaction</name></name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name>loginInfoAdded</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
					}</block></then></if>
				}</block> <catch>catch <parameter_list>(<param><decl><type><name>SQLException</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
					<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>Database</name><operator>.</operator><name>rollBackTransaction</name></name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><empty_stmt>;</empty_stmt>
				}</block></catch></try>

			}</block> <catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>			
		}</block></then></if>
		
		<return>return <expr><name>loginInfoAdded</name></expr>;</return>
	}</block></function>
	
	<comment type="line">// Checks whether the username is already present in the logindetails table before </comment>
	<comment type="line">// addLoginInfoToDB() adds it in the logindetails table</comment>
	<function><type><specifier>private</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>checkUsernameInDatabase</name><parameter_list>(<param><decl><type><name>String</name></type> <name>username</name></decl></param>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>boolean</name></type> <name>isUsernamePresent</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
		
<comment type="line">//		@DBAnnotation (</comment>
<comment type="line">//				variable = "username",  </comment>
<comment type="line">//				table = "logindetails", </comment>
<comment type="line">//				column = "Username", </comment>
<comment type="line">//				isSource = true)</comment>
		<decl_stmt><decl><type><name>String</name></type> <name>SQLLoginSelect</name> <init>= <expr><literal type="string">"SELECT Username FROM logindetails WHERE username = ? ;"</literal></expr></init></decl>;</decl_stmt>
		
		<try>try <block>{
			<decl_stmt><decl><type><name>Connection</name></type> <name>conn</name> <init>= <expr><call><name><name>Database</name><operator>.</operator><name>getConnection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<try>try <block>{
				<if>if <condition>(<expr><name>conn</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
					
					<comment type="line">// Check if file is already present. </comment>
					<decl_stmt><decl><type><name>PreparedStatement</name></type> <name>statement</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>prepareStatement</name></name><argument_list>(<argument><expr><name>SQLLoginSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"username"</literal></expr></argument>, <argument><expr><literal type="string">"logindetails"</literal></expr></argument>, <argument><expr><literal type="string">"Username"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>statement</name><operator>.</operator><name>setString</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>username</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name>ResultSet</name></type> <name>rs</name> <init>= <expr><call><name><name>statement</name><operator>.</operator><name>executeQuery</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					<while>while <condition>(<expr><call><name><name>rs</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
						<comment type="line">// Retrieve by column name</comment>
						<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"tableUsername"</literal></expr></argument>, <argument><expr><literal type="string">"logindetails"</literal></expr></argument>, <argument><expr><literal type="string">"Username"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name>String</name></type> <name>tableUsername</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"Username"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<if>if<condition>(<expr><call><name><name>tableUsername</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>username</name></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
							<expr_stmt><expr><name>isUsernamePresent</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
							<break>break;</break>
						}</block></then></if>
					}</block></while>
				}</block></then></if>	
			}</block> <catch>catch <parameter_list>(<param><decl><type><name>SQLException</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>

		}</block> <catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		
		<return>return <expr><name>isUsernamePresent</name></expr>;</return>
	}</block></function>

	<comment type="line">// To change the password for a user who is logged in</comment>
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>changePassword</name><parameter_list>(<param><decl><type><name>String</name></type> <name>username</name></decl></param>, <param><decl><type><name>String</name></type> <name>newPassword</name></decl></param>)</parameter_list><block>{
		
		<decl_stmt><decl><type><name>boolean</name></type> <name>passwordChanged</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
	<comment type="line">//	String username = this.getUsername();</comment>
		
<comment type="line">//		@DBAnnotation (</comment>
<comment type="line">//			variable = {"username","newPassword"},  </comment>
<comment type="line">//			table = "logindetails", </comment>
<comment type="line">//			column = {"Username","Password"}, </comment>
<comment type="line">//			isSource = false)</comment>
		
		<decl_stmt><decl><type><name>String</name></type> <name>SQLLoginUpdate</name> <init>= <expr><literal type="string">"UPDATE logindetails SET Password = ? WHERE Username = ?;"</literal></expr></init></decl>;</decl_stmt>
			
		<try>try <block>{
			<decl_stmt><decl><type><name>Connection</name></type> <name>conn</name> <init>= <expr><call><name><name>Database</name><operator>.</operator><name>getConnection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<try>try <block>{
				<if>if <condition>(<expr><name>conn</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
		
					<decl_stmt><decl><type><name>PreparedStatement</name></type> <name>statement</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>prepareStatement</name></name><argument_list>(<argument><expr><name>SQLLoginUpdate</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"newPassword"</literal></expr></argument>, <argument><expr><literal type="string">"logindetails"</literal></expr></argument>, <argument><expr><literal type="string">"Password"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>statement</name><operator>.</operator><name>setString</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>newPassword</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"username"</literal></expr></argument>, <argument><expr><literal type="string">"logindetails"</literal></expr></argument>, <argument><expr><literal type="string">"Username"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>statement</name><operator>.</operator><name>setString</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>username</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>statement</name><operator>.</operator><name>executeUpdate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>Database</name><operator>.</operator><name>commitTransaction</name></name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>passwordChanged</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
				}</block></then></if>
			}</block> <catch>catch <parameter_list>(<param><decl><type><name>SQLException</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>Database</name><operator>.</operator><name>rollBackTransaction</name></name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><empty_stmt>;</empty_stmt>
			}</block></catch></try>
			}</block> <catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		<return>return <expr><name>passwordChanged</name></expr>;</return>
	}</block></function>

	<comment type="line">// To recover a user's password</comment>
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>recoverPassword</name> <parameter_list>(<param><decl><type><name>String</name></type> <name>username</name></decl></param>)</parameter_list><block>{
		<decl_stmt><decl><type><name>boolean</name></type> <name>passwordrecovered</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>boolean</name></type> <name>isUserPresent</name> <init>= <expr><call><name>checkUsernameInDatabase</name><argument_list>(<argument><expr><name>username</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>isUserPresent</name> <operator>==</operator> <literal type="boolean">false</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Username not present"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then>
		<else>else <block>{
<comment type="line">//			@DBAnnotation (</comment>
<comment type="line">//					variable = {"username","password"},  </comment>
<comment type="line">//					table = "logindetails",</comment>
<comment type="line">//					column = {"Username", "Password"}, </comment>
<comment type="line">//					isSource = true)</comment>
			
			<decl_stmt><decl><type><name>String</name></type> <name>SQLFileSelect</name> <init>= <expr><literal type="string">"SELECT Password FROM logindetails WHERE Username = ?;"</literal></expr></init></decl>;</decl_stmt>
			
			<try>try <block>{
				<decl_stmt><decl><type><name>Connection</name></type> <name>conn</name> <init>= <expr><call><name><name>Database</name><operator>.</operator><name>getConnection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<try>try <block>{
					<if>if <condition>(<expr><name>conn</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
						
						<comment type="line">// Check if file is already present. </comment>
						<decl_stmt><decl><type><name>PreparedStatement</name></type> <name>statement</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>prepareStatement</name></name><argument_list>(<argument><expr><name>SQLFileSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"username"</literal></expr></argument>, <argument><expr><literal type="string">"logindetails"</literal></expr></argument>, <argument><expr><literal type="string">"Username"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name>statement</name><operator>.</operator><name>setString</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>username</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name>ResultSet</name></type> <name>rs</name> <init>= <expr><call><name><name>statement</name><operator>.</operator><name>executeQuery</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
						<while>while <condition>(<expr><call><name><name>rs</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
							<comment type="line">// Retrieve by column name</comment>
							<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"password"</literal></expr></argument>, <argument><expr><literal type="string">"logindetails"</literal></expr></argument>, <argument><expr><literal type="string">"Password"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<decl_stmt><decl><type><name>String</name></type> <name>password</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"Password"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
							<comment type="line">//this.setPassword(password);</comment>
							<decl_stmt><decl><type><name>Email</name></type> <name>email</name> <init>= <expr><call><name><name>Email</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><literal type="string">"umas.uic@gmail.com"</literal></expr></argument>, <argument><expr><literal type="string">"cs597project"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
							<decl_stmt><decl><type><name>String</name></type> <name>subject</name> <init>= <expr><literal type="string">"UMAS Password"</literal></expr></init></decl>;</decl_stmt>
							<decl_stmt><decl><type><name>String</name></type> <name>body</name> <init>= <expr><literal type="string">"Your password is "</literal> <operator>+</operator> <name>password</name> <operator>+</operator> 
											<literal type="string">"Please change your password after you login"</literal></expr></init></decl>;</decl_stmt>
							
							<decl_stmt><decl><type><name>boolean</name></type> <name>mailSent</name> <init>= <expr><call><name><name>email</name><operator>.</operator><name>sendEmail</name></name><argument_list>(<argument><expr><name>username</name><operator>+</operator><literal type="string">"@gmail.com"</literal></expr></argument>, <argument><expr><name>subject</name></expr></argument>, <argument><expr><name>body</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
							<if>if <condition>(<expr><name>mailSent</name> <operator>==</operator> <literal type="boolean">true</literal></expr>)</condition><then><block>{
								<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Mail containing password sent to the user."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								<expr_stmt><expr><name>passwordrecovered</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
							}</block></then></if>
						}</block></while>
					}</block></then></if>	
				}</block> <catch>catch <parameter_list>(<param><decl><type><name>SQLException</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
					<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></catch></try>

			}</block> <catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>

		}</block></else></if>
		
		<return>return <expr><name>passwordrecovered</name></expr>;</return>
		
	}</block></function>
	
 	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<param><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></param>)</parameter_list><block>{
		
 		<comment type="line">// Test authenticate function when user is present</comment>
<comment type="line">// 		Login user = new Login("aky1","pra");</comment>
<comment type="line">// 		String username = user.getUsername();</comment>
<comment type="line">//		boolean isPresent = user.authenticate();</comment>
<comment type="line">//		if(isPresent == true){</comment>
<comment type="line">//			System.out.println("User Present");</comment>
<comment type="line">//		} else {</comment>
<comment type="line">//			System.out.println("User Absent");</comment>
<comment type="line">//		}</comment>
<comment type="line">// 		</comment>
<comment type="line">//		// Test authenticate function when user is absent</comment>
<comment type="line">//		user = new Login("aky1","pra");</comment>
<comment type="line">//		isPresent = user.authenticate();</comment>
<comment type="line">//		if(isPresent == true){</comment>
<comment type="line">//			System.out.println("User Present");</comment>
<comment type="line">//		} else {</comment>
<comment type="line">//			System.out.println("User Absent");</comment>
<comment type="line">//		}</comment>
<comment type="line">//		</comment>
		
		<comment type="line">// Test checkUsernameInDatabase function when user is present</comment>
<comment type="line">// 		String username = "aky";</comment>
<comment type="line">// 		boolean isPresent = Login.checkUsernameInDatabase(username);</comment>
<comment type="line">//		if(isPresent == true){</comment>
<comment type="line">//			System.out.println("User Present");</comment>
<comment type="line">//		} else {</comment>
<comment type="line">//			System.out.println("User Absent");</comment>
<comment type="line">//		}</comment>
<comment type="line">// 		</comment>
<comment type="line">//		// Test checkUsernameInDatabase function when user is absent</comment>
<comment type="line">//		username = "aky1";</comment>
<comment type="line">//		isPresent = Login.checkUsernameInDatabase(username);</comment>
<comment type="line">//		if(isPresent == true){</comment>
<comment type="line">//			System.out.println("User Present");</comment>
<comment type="line">//		} else {</comment>
<comment type="line">//			System.out.println("User Absent");</comment>
<comment type="line">//		}</comment>
		
	}</block></function>

}</block></class>
</unit>
