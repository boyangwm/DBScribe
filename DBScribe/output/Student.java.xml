<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Boyang\Desktop\ASE15\subjects\UMAS\src\com\umas\code\Student.java"><package>package <name><name>com</name><operator>.</operator><name>umas</name><operator>.</operator><name>code</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>Connection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>PreparedStatement</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>ResultSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>SQLException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedHashMap</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Akshay
 * 
 */</comment>

<comment type="block" format="javadoc">/*************** STUDENT.JAVA CLASS WAS WRITTEN BY AKSHAY THIRKATEH ********************************/</comment>

<class><specifier>public</specifier> class <name>Student</name> <super><extends>extends <name>People</name></extends></super> <block>{

	<comment type="line">// class variables that are specific to student class</comment>
	<decl_stmt><decl><type><specifier>protected</specifier> <name>double</name></type> <name>GPA</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>protected</specifier> <name>int</name></type> <name>level</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <name>JobApplication</name></type> <name>jobApplication</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

	<comment type="block">/*student class constructor with the UIN passed 
	 * 
	 * it throws an exception
	 * */</comment>
	<constructor><specifier>public</specifier> <name>Student</name><parameter_list>(<param><decl><type><name>int</name></type> <name>UIN</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>PersonDoesNotExistException</name></expr></argument></throws> <block>{
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<try>try <block>{
			<decl_stmt><decl><type><name>Connection</name></type> <name>conn</name> <init>= <expr><call><name><name>Database</name><operator>.</operator><name>getConnection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//get the connection</comment>
			<decl_stmt><decl><type><name>String</name></type> <name>SQLStudentGPASelect</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
			<try>try <block>{

				<if>if <condition>(<expr><name>conn</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{

					<expr_stmt><expr><name>SQLStudentGPASelect</name> <operator>=</operator> <literal type="string">"Select * From student where UIN=?;"</literal></expr>;</expr_stmt><comment type="line">//write query</comment>
				}</block></then></if>

				<decl_stmt><decl><type><name>PreparedStatement</name></type> <name>stmtForSelect</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>prepareStatement</name></name><argument_list>(<argument><expr><name>SQLStudentGPASelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>stmtForSelect</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line">//set the UIN</comment>

				<decl_stmt><decl><type><name>ResultSet</name></type> <name>rs</name> <init>= <expr><call><name><name>stmtForSelect</name><operator>.</operator><name>executeQuery</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//execute the query</comment>

				<if>if <condition>(<expr><call><name><name>rs</name><operator>.</operator><name>first</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
					
					<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"retrievedStudentUIN"</literal></expr></argument>, <argument><expr><literal type="string">"student"</literal></expr></argument>, <argument><expr><literal type="string">"UIN"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name>int</name></type> <name>retrievedStudentUIN</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"UIN"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//retrieve the values</comment>
					
					<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"retrievedStudentGPA"</literal></expr></argument>, <argument><expr><literal type="string">"student"</literal></expr></argument>, <argument><expr><literal type="string">"GPA"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name>double</name></type> <name>retrievedStudentGPA</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getDouble</name></name><argument_list>(<argument><expr><literal type="string">"GPA"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//retrieve the values</comment>
					
					<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"retrievedStudentLevel"</literal></expr></argument>, <argument><expr><literal type="string">"student"</literal></expr></argument>, <argument><expr><literal type="string">"Level"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name>int</name></type> <name>retrievedStudentLevel</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"Level"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//retrieve the values</comment>

					<comment type="line">//set the class variables to UIN specific </comment>
					
					<expr_stmt><expr><name><name>this</name><operator>.</operator><name>UIN</name></name> <operator>=</operator> <name>retrievedStudentUIN</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>this</name><operator>.</operator><name>GPA</name></name> <operator>=</operator> <name>retrievedStudentGPA</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>this</name><operator>.</operator><name>level</name></name> <operator>=</operator> <name>retrievedStudentLevel</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>this</name><operator>.</operator><name>jobApplication</name></name> <operator>=</operator> <operator>new</operator> <call><name>JobApplication</name><argument_list>(<argument><expr><name>retrievedStudentUIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				}</block></then>

				<else>else <block>{

					<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"UIN does not exist in the student table"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<throw>throw <expr><operator>new</operator> <call><name>PersonDoesNotExistException</name><argument_list>()</argument_list></call></expr>;</throw><comment type="line">//throw the exception</comment>

				}</block></else></if>

			}</block>
			<comment type="line">//catch block</comment>
			<catch>catch <parameter_list>(<param><decl><type><name>SQLException</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>print</name></name><argument_list>(<argument><expr><literal type="string">"SQL exception in student const"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
		}</block>
		<comment type="line">//catch block</comment>
		<catch>catch <parameter_list>(<param><decl><type><name>PersonDoesNotExistException</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<throw>throw <expr><operator>new</operator> <call><name>PersonDoesNotExistException</name><argument_list>()</argument_list></call></expr>;</throw>

		}</block></catch>

		<finally>finally <block>{

			<comment type="line">// System.out.println("retrieved");</comment>
		}</block></finally></try>

	}</block></constructor>

	<comment type="line">// TODO Auto-generated constructor stub</comment>
	
	<comment type="line">//student construtor with name, username and dpet ID and positionID</comment>
	<constructor><specifier>public</specifier> <name>Student</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>, <param><decl><type><name>String</name></type> <name>userName</name></decl></param>, <param><decl><type><name>int</name></type> <name>deptID</name></decl></param>, <param><decl><type><name>int</name></type> <name>positionID</name></decl></param>)</parameter_list> <block>{
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>userName</name></expr></argument>, <argument><expr><name>deptID</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// TODO Auto-generated constructor stub</comment>
	}</block></constructor>

	<comment type="block">/*-------------------------GETTERS AND SETTERS START----------------------------------*/</comment>
	<function><type><specifier>public</specifier> <name>double</name></type> <name>getGPA</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>GPA</name></expr>;</return>
	}</block></function>

	<function><type><specifier>public</specifier> <name>void</name></type> <name>setGPA</name><parameter_list>(<param><decl><type><name>double</name></type> <name>gPA</name></decl></param>)</parameter_list> <block>{
		<expr_stmt><expr><name>GPA</name> <operator>=</operator> <name>gPA</name></expr>;</expr_stmt>
	}</block></function>

	<function><type><specifier>public</specifier> <name>int</name></type> <name>getLevel</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>level</name></expr>;</return>
	}</block></function>

	<function><type><specifier>public</specifier> <name>void</name></type> <name>setLevel</name><parameter_list>(<param><decl><type><name>int</name></type> <name>level</name></decl></param>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>level</name></name> <operator>=</operator> <name>level</name></expr>;</expr_stmt>
	}</block></function>

	<comment type="block">/*-------------------------GETTERS AND SETTERS END----------------------------------*/</comment>
	
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>addStudentToDb</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>, <param><decl><type><name>Department</name></type> <name>dept</name></decl></param>, <param><decl><type><name>int</name></type> <name>level</name></decl></param>)</parameter_list>
			<throws>throws <argument><expr><name>levelNotExistException</name></expr></argument></throws> <block>{

		<decl_stmt><decl><type><name>boolean</name></type> <name>isAdded</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

		<if>if <condition>(<expr><name>dept</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<throw>throw <expr><operator>new</operator> <call><name>NullPointerException</name><argument_list>()</argument_list></call></expr>;</throw><comment type="line">//if dept is null then throw an exception</comment>
		}</block></then></if>

		<if>if <condition>(<expr><name><name>level</name> <argument_list type="template">&lt; <argument><literal type="number">0</literal> <operator>||</operator> <name>level</name></argument> &gt;</argument_list></name> <literal type="number">4</literal></expr>)</condition><then> <block>{
			<throw>throw <expr><operator>new</operator> <call><name>levelNotExistException</name><argument_list>()</argument_list></call></expr>;</throw><comment type="line">//throw an exception</comment>
		}</block></then></if>

		<decl_stmt><decl><type><name>int</name></type> <name>addedUIN</name></decl>;</decl_stmt>
		<try>try <block>{
			<expr_stmt><expr><name>addedUIN</name> <operator>=</operator> <call><name>addIntoDatabase</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>dept</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line">//add into database</comment>
			<if>if <condition>(<expr><name>addedUIN</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block>{

				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>addedUIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<try>try <block>{
					<expr_stmt><expr><name>isAdded</name> <operator>=</operator> <call><name>addIntoStudentTable</name><argument_list>(<argument><expr><name>addedUIN</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line">//add into the student table</comment>

				}</block> <catch>catch <parameter_list>(<param><decl><type><name>levelNotExistException</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
					<comment type="line">// TODO Auto-generated catch block</comment>
					<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				}</block></catch></try>

				<decl_stmt><decl><type><name>Connection</name></type> <name>conn</name> <init>= <expr><call><name><name>Database</name><operator>.</operator><name>getConnection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>Database</name><operator>.</operator><name>commitTransaction</name></name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line">//commit transaction</comment>

			}</block></then></if>
		}</block> <catch>catch <parameter_list>(<param><decl><type><name>loginDetailsnotAdded</name></type> <name>e1</name></decl></param>)</parameter_list> <block>{
			<comment type="line">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name>e1</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>

		<return>return <expr><name>isAdded</name></expr>;</return>

	}</block></function>
	
	<comment type="block">/*add into the student table with the UIN and level passed
	 * 
	 * the return type is boolean 
	 * 
	 * it throws an exception
	 * */</comment>
	<function><type><specifier>private</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>addIntoStudentTable</name><parameter_list>(<param><decl><type><name>int</name></type> <name>UIN</name></decl></param>, <param><decl><type><name>int</name></type> <name>level</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>levelNotExistException</name></expr></argument></throws> <block>{

		<decl_stmt><decl><type><name>boolean</name></type> <name>isAdded</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>float</name></type> <name>gpa</name><init>=<expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>

		<if>if <condition>(<expr><name>level</name> <operator>&gt;</operator> <literal type="number">3</literal> <operator>||</operator> <name>level</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
			<throw>throw <expr><operator>new</operator> <call><name>levelNotExistException</name><argument_list>()</argument_list></call></expr>;</throw><comment type="line">//level not exists exception</comment>
		}</block></then></if>

		<try>try <block>{
			<decl_stmt><decl><type><name>Connection</name></type> <name>conn</name> <init>= <expr><call><name><name>Database</name><operator>.</operator><name>getConnection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//get the connection</comment>
			<decl_stmt><decl><type><name>String</name></type> <name>SQLPeopleSelect</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

			<try>try <block>{

				<expr_stmt><expr><name>SQLPeopleSelect</name> <operator>=</operator> <literal type="string">"Select UIN From student where UIN=?;"</literal></expr>;</expr_stmt>
				<decl_stmt><decl><type><name>PreparedStatement</name></type> <name>stmt</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>prepareStatement</name></name><argument_list>(<argument><expr><name>SQLPeopleSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>stmt</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line">//set the UIN</comment>
				<decl_stmt><decl><type><name>ResultSet</name></type> <name>rs</name> <init>= <expr><call><name><name>stmt</name><operator>.</operator><name>executeQuery</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//execute the query</comment>

				<if>if <condition>(<expr><call><name><name>rs</name><operator>.</operator><name>first</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
					<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>UIN</name> <operator>+</operator> <literal type="string">"already exists"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then>

				<else>else <block>{
					<comment type="line">//insert new data into the student table</comment>
					<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Adding new data into the database"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name>String</name></type> <name>SQLPeopleInsert</name> <init>= <expr><literal type="string">"Insert into student (UIN, GPA, Level) Values (?,?,?);"</literal></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><name>stmt</name> <operator>=</operator> <call><name><name>conn</name><operator>.</operator><name>prepareStatement</name></name><argument_list>(<argument><expr><name>SQLPeopleInsert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>stmt</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line">//set the values</comment>
					<expr_stmt><expr><call><name><name>stmt</name><operator>.</operator><name>setFloat</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>gpa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line">//set the values</comment>
					<expr_stmt><expr><call><name><name>stmt</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line">//set the values</comment>
					<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name><name>stmt</name><operator>.</operator><name>executeUpdate</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//execute the query</comment>
					
					<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"UIN"</literal></expr></argument>, <argument><expr><literal type="string">"student"</literal></expr></argument>, <argument><expr><literal type="string">"UIN"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"gpa"</literal></expr></argument>, <argument><expr><literal type="string">"student"</literal></expr></argument>, <argument><expr><literal type="string">"GPA"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"level"</literal></expr></argument>, <argument><expr><literal type="string">"student"</literal></expr></argument>, <argument><expr><literal type="string">"Level"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					
					<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Inserted"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>isAdded</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>

				}</block></else></if>

			}</block>
			<comment type="line">//catch block </comment>
			<catch>catch <parameter_list>(<param><decl><type><name>SQLException</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Error adding/updating to database"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>

		}</block>
		<comment type="line">//catch block</comment>
		<catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Connection failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></catch>
		<comment type="block">/*The code thats placed in the finally block gets executed no matter what. But 
													here the finally block does not contain any general statements*/</comment>
		<finally>finally <block>{

			<comment type="line">// System.out.println("retrieved");</comment>
		}</block></finally></try>
		<return>return <expr><name>isAdded</name></expr>;</return>

	}</block></function>
	<comment type="line">//delete student function</comment>
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>deleteStudent</name><parameter_list>(<param><decl><type><name>int</name></type> <name>UIN</name></decl></param>)</parameter_list> <block>{
	}</block></function>

	<comment type="line">//delete student function</comment>
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>deleteStudent</name><parameter_list>(<param><decl><type><name>String</name></type> <name>userName</name></decl></param>)</parameter_list> <block>{
	}</block></function>

	<comment type="line">//check if student with the UIN passed</comment>
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>checkIfStudent</name><parameter_list>(<param><decl><type><name>int</name></type> <name>UIN</name></decl></param>)</parameter_list> <block>{

		<try>try <block>{
			<decl_stmt><decl><type><name>Connection</name></type> <name>conn</name> <init>= <expr><call><name><name>Database</name><operator>.</operator><name>getConnection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//get the connection</comment>
			<decl_stmt><decl><type><name>String</name></type> <name>SQLPeopleSelect</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
			<try>try <block>{

				<if>if <condition>(<expr><name>conn</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{

					<expr_stmt><expr><name>SQLPeopleSelect</name> <operator>=</operator> <literal type="string">"Select PositionID From People where UIN=?;"</literal></expr>;</expr_stmt><comment type="line">//write query</comment>
				}</block></then></if>

				<decl_stmt><decl><type><name>PreparedStatement</name></type> <name>stmtForSelect</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>prepareStatement</name></name><argument_list>(<argument><expr><name>SQLPeopleSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>stmtForSelect</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line">//set the values</comment>

				<decl_stmt><decl><type><name>ResultSet</name></type> <name>rs</name> <init>= <expr><call><name><name>stmtForSelect</name><operator>.</operator><name>executeQuery</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//execute the query</comment>

				<if>if <condition>(<expr><call><name><name>rs</name><operator>.</operator><name>first</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
					
					<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"peopleRetrievedPositionID"</literal></expr></argument>, <argument><expr><literal type="string">"people"</literal></expr></argument>, <argument><expr><literal type="string">"PositionID"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name>int</name></type> <name>peopleRetrievedPositionID</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"PositionID"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//retrieve the values</comment>
					
					<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"UIN:"</literal> <operator>+</operator> <name>UIN</name> <operator>+</operator> <literal type="string">" Position ID:"</literal><operator>+</operator> <name>peopleRetrievedPositionID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="line">//check the position ID</comment>
					<if>if <condition>(<expr><name>peopleRetrievedPositionID</name> <operator>==</operator> <literal type="number">3</literal> <operator>||</operator> <name>peopleRetrievedPositionID</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><then> <block>{
						<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Student UIN exists"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<return>return <expr><literal type="boolean">true</literal></expr>;</return>
					}</block></then> <else>else <block>{
						<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"UIN exists, but it is not a student"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<return>return <expr><literal type="boolean">false</literal></expr>;</return>

					}</block></else></if>

				}</block></then>

				<else>else <block>{

					<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"UIN does not exist"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return>return <expr><literal type="boolean">false</literal></expr>;</return>

				}</block></else></if>

			}</block>
			<comment type="line">//catch block</comment>
			<catch>catch <parameter_list>(<param><decl><type><name>SQLException</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
				<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			}</block></catch></try>


		}</block>
		<comment type="line">//catch block</comment>
		<catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		}</block></catch>
		<comment type="block">/*The code thats placed in the finally block gets executed no matter what. But 
														here the finally block does not contain any general statements*/</comment>
		<finally>finally <block>{

			<comment type="line">// System.out.println("retrieved");</comment>
		}</block></finally></try>

		<return>return <expr><literal type="boolean">false</literal></expr>;</return>
	}</block></function>

	<comment type="line">//update GPA for the UIN with the new GPA</comment>
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>updateGPA</name><parameter_list>(<param><decl><type><name>int</name></type> <name>UIN</name></decl></param>, <param><decl><type><name>double</name></type> <name>newGPA</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>GPAnotValidException</name></expr></argument></throws> <block>{

		<comment type="line">// if(level&gt;3 || level&lt;1){</comment>
		<comment type="line">// throw new levelNotExistException();</comment>
		<comment type="line">// }</comment>
		<decl_stmt><decl><type><name>boolean</name></type> <name>updateGPA</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

		<if>if <condition>(<expr><name>newGPA</name> <operator>&gt;</operator> <literal type="number">4.00</literal> <operator>||</operator> <name>newGPA</name> <operator>&lt;</operator> <literal type="number">1.0</literal></expr>)</condition><then>

			<block type="pseudo"><throw>throw <expr><operator>new</operator> <call><name>GPAnotValidException</name><argument_list>()</argument_list></call></expr>;</throw></block></then></if><comment type="line">//throw an exception</comment>

		<try>try <block>{
			<decl_stmt><decl><type><name>Connection</name></type> <name>conn</name> <init>= <expr><call><name><name>Database</name><operator>.</operator><name>getConnection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//get the connection</comment>

			<try>try <block>{

				<decl_stmt><decl><type><name>boolean</name></type> <name>ifExisting</name> <init>= <expr><call><name>updateGPACheck</name><argument_list>(<argument><expr><name>UIN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//check if the UIN exists</comment>

				<if>if <condition>(<expr><name>ifExisting</name></expr>)</condition><then> <block>{

					<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Updating GPA into the database"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name>String</name></type> <name>SQLupdateGPA</name> <init>= <expr><literal type="string">"UPDATE student SET GPA=? where UIN=?;"</literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>PreparedStatement</name></type> <name>stmt</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>prepareStatement</name></name><argument_list>(<argument><expr><name>SQLupdateGPA</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name>stmt</name><operator>.</operator><name>setDouble</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>newGPA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line">//set the values</comment>
					<expr_stmt><expr><call><name><name>stmt</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line">//set the values</comment>
					<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name><name>stmt</name><operator>.</operator><name>executeUpdate</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//execute the query</comment>
					
					<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"newGPA"</literal></expr></argument>, <argument><expr><literal type="string">"student"</literal></expr></argument>, <argument><expr><literal type="string">"GPA"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"UIN"</literal></expr></argument>, <argument><expr><literal type="string">"student"</literal></expr></argument>, <argument><expr><literal type="string">"UIN"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					
					<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Updated"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>updateGPA</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>

					<comment type="line">// Connection conn=Database.getConnection();</comment>
					<expr_stmt><expr><call><name><name>Database</name><operator>.</operator><name>commitTransaction</name></name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line">//commit the transaction</comment>

				}</block></then>

				<else>else <block>{
					<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>UIN</name> <operator>+</operator> <literal type="string">"already exists"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				}</block></else></if>

			}</block>
			<comment type="line">//catch block</comment>
			<catch>catch <parameter_list>(<param><decl><type><name>SQLException</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Error adding/updating to database"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>

		}</block>
		<comment type="line">//catch block</comment>
		<catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Connection failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></catch>
		<comment type="block">/*The code thats placed in the finally block gets executed no matter what. But 
												here the finally block does not contain any general statements*/</comment>
		<finally>finally <block>{

			<comment type="line">// System.out.println("retrieved");</comment>
		}</block></finally></try>

		<return>return <expr><name>updateGPA</name></expr>;</return>
	}</block></function>
	
	<comment type="block">/*this function checks that if the UIN exists in the student Table*/</comment>
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>updateGPACheck</name><parameter_list>(<param><decl><type><name>int</name></type> <name>UIN</name></decl></param>)</parameter_list> <block>{

		<decl_stmt><decl><type><name>boolean</name></type> <name>isExisting</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

		<try>try <block>{
			<decl_stmt><decl><type><name>Connection</name></type> <name>conn</name> <init>= <expr><call><name><name>Database</name><operator>.</operator><name>getConnection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//get the connection</comment>
			<decl_stmt><decl><type><name>String</name></type> <name>SQLPeopleSelect</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

			<try>try <block>{

				<expr_stmt><expr><name>SQLPeopleSelect</name> <operator>=</operator> <literal type="string">"Select UIN From student where UIN=?;"</literal></expr>;</expr_stmt>
				<decl_stmt><decl><type><name>PreparedStatement</name></type> <name>stmt</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>prepareStatement</name></name><argument_list>(<argument><expr><name>SQLPeopleSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>stmt</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line">//set the UIN</comment>
				<decl_stmt><decl><type><name>ResultSet</name></type> <name>rs</name> <init>= <expr><call><name><name>stmt</name><operator>.</operator><name>executeQuery</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//query fire</comment>

				<if>if <condition>(<expr><call><name><name>rs</name><operator>.</operator><name>first</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
					<comment type="line">//if exists then return true</comment>
					<return>return <expr><literal type="boolean">true</literal></expr>;</return>

				}</block></then>

				<else>else <block>{
					<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>UIN</name> <operator>+</operator> <literal type="string">"already exists"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				}</block></else></if>

			}</block>
			<comment type="line">//catch block</comment>
			<catch>catch <parameter_list>(<param><decl><type><name>SQLException</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Error adding/updating to database"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>

		}</block>
		<comment type="line">//catch block</comment>
		<catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Connection failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></catch>

		<finally>finally <block>{

			<comment type="line">// System.out.println("retrieved");</comment>
		}</block></finally></try>

		<return>return <expr><name>isExisting</name></expr>;</return>
	}</block></function>

	<comment type="block">/*get all students*/</comment>
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>ArrayList</name><argument_list type="template">&lt;<argument><name>Student</name></argument>&gt;</argument_list></name></type> <name>getAllStudents</name><parameter_list>()</parameter_list> <block>{


		<decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="template">&lt;<argument><name>Student</name></argument>&gt;</argument_list></name></type> <name>allStudents</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="template">&lt;<argument><name>Student</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//initialize the arraylist</comment>

		<try>try <block>{
			<decl_stmt><decl><type><name>Connection</name></type> <name>conn</name> <init>= <expr><call><name><name>Database</name><operator>.</operator><name>getConnection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//get the connection</comment>

			<try>try <block>{
				<if>if <condition>(<expr><name>conn</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{

					<comment type="line">// Retrieve all the professors from one department</comment>
					<decl_stmt><decl><type><name>String</name></type> <name>ProfessorSelect</name> <init>= <expr><literal type="string">"Select *"</literal>
							<operator>+</operator> <literal type="string">" FROM people"</literal> <operator>+</operator> <literal type="string">" WHERE PositionID=3"</literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>PreparedStatement</name></type> <name>statement</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>prepareStatement</name></name><argument_list>(<argument><expr><name>ProfessorSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>ResultSet</name></type> <name>rs</name> <init>= <expr><call><name><name>statement</name><operator>.</operator><name>executeQuery</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//execute the query</comment>

					<while>while <condition>(<expr><call><name><name>rs</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
						
						<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"retreivedStudentUserUIN"</literal></expr></argument>, <argument><expr><literal type="string">"people"</literal></expr></argument>, <argument><expr><literal type="string">"UIN"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name>int</name></type> <name>retreivedStudentUserUIN</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"UIN"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//retrieve the UIN</comment>
						
						<decl_stmt><decl><type><name>Student</name></type> <name>stud</name> <init>= <expr><operator>new</operator> <call><name>Student</name><argument_list>(<argument><expr><name>retreivedStudentUserUIN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name>allStudents</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>stud</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line">//add it to the arraylist</comment>
						
						<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"getStudentUserName"</literal></expr></argument>, <argument><expr><literal type="string">"people"</literal></expr></argument>, <argument><expr><literal type="string">"Username"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name>String</name></type> <name>getStudentUserName</name><init>=<expr><call><name><name>stud</name><operator>.</operator><name>getUserName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>getStudentUserName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></while>

				}</block></then></if>

			}</block>
			<comment type="line">//catch block</comment>
			<catch>catch <parameter_list>(<param><decl><type><name>SQLException</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Error fetching all the professors"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

			}</block></catch> 
			<comment type="line">//catch block</comment>
			<catch>catch <parameter_list>(<param><decl><type><name><name>People</name><operator>.</operator><name>PersonDoesNotExistException</name></name></type> <name>e</name></decl></param>)</parameter_list> <block>{
				<comment type="line">// TODO Auto-generated catch block</comment>
				<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>


			<return>return <expr><name>allStudents</name></expr>;</return>
		}</block>
		<comment type="block">/*The code thats placed in the finally block gets executed no matter what. But 
													here the finally block does not contain any general statements*/</comment>
		<finally>finally <block>{
		}</block></finally></try>

	}</block></function>

	<comment type="block">/*get all student courses*/</comment>
	<function><type><specifier>public</specifier> <name><name>LinkedHashMap</name><argument_list type="template">&lt;<argument><name>Integer</name></argument>, <argument><name>CourseOffered</name></argument>&gt;</argument_list></name></type> <name>getStudentCourses</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name><name>Course</name><operator>.</operator><name>CourseDoesNotExistException</name></name></expr></argument>, <argument><expr><name><name>CourseOffered</name><operator>.</operator><name>CourseOfferingDoesNotExistException</name></name></expr></argument></throws> <block>{

		<decl_stmt><decl><type><name><name>LinkedHashMap</name><argument_list type="template">&lt;<argument><name>Integer</name></argument>, <argument><name>CourseOffered</name></argument>&gt;</argument_list></name></type> <name>studentCourses</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedHashMap</name><argument_list type="template">&lt;<argument><name>Integer</name></argument>, <argument><name>CourseOffered</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//initilaize the hashmap</comment>

		<try>try <block>{
			<decl_stmt><decl><type><name>Connection</name></type> <name>conn</name> <init>= <expr><call><name><name>Database</name><operator>.</operator><name>getConnection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//get the connection</comment>

			<try>try <block>{
				<if>if <condition>(<expr><name>conn</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{

					<comment type="line">// Retrieve the current semester ID</comment>
					<decl_stmt><decl><type><name>String</name></type> <name>SemesterSelect</name> <init>= <expr><literal type="string">"Select *"</literal>
							<operator>+</operator> <literal type="string">" FROM studentenrollment"</literal>
							<operator>+</operator> <literal type="string">" WHERE UIN= ?"</literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>PreparedStatement</name></type> <name>statement</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>prepareStatement</name></name><argument_list>(<argument><expr><name>SemesterSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name>statement</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>this</name><operator>.</operator><name>getUIN</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line">//set the UIN</comment>
					<decl_stmt><decl><type><name>ResultSet</name></type> <name>rs</name> <init>= <expr><call><name><name>statement</name><operator>.</operator><name>executeQuery</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

					<while>while <condition>(<expr><call><name><name>rs</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
						
						<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"offerID"</literal></expr></argument>, <argument><expr><literal type="string">"studentenrollment"</literal></expr></argument>, <argument><expr><literal type="string">"OfferID"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name>int</name></type> <name>offerID</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"OfferID"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						
						<decl_stmt><decl><type><name>CourseOffered</name></type> <name>course</name> <init>= <expr><operator>new</operator> <call><name>CourseOffered</name><argument_list>(<argument><expr><name>offerID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//set the object</comment>
						
						<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"getOfferID"</literal></expr></argument>, <argument><expr><literal type="string">"coursesoffered"</literal></expr></argument>, <argument><expr><literal type="string">"OfferID"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name>int</name></type> <name>getOfferID</name><init>=<expr><call><name><name>course</name><operator>.</operator><name>getOfferID</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
						
						<expr_stmt><expr><call><name><name>studentCourses</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>getOfferID</name></expr></argument>, <argument><expr><name>course</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line">//add it to the hashmap</comment>
					}</block></while>

				}</block></then></if>

			}</block>

			<catch>catch <parameter_list>(<param><decl><type><name>SQLException</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Error addind course offering"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

			}</block></catch></try>

			<return>return <expr><name>studentCourses</name></expr>;</return>
		}</block>
		<comment type="block">/*The code thats placed in the finally block gets executed no matter what. But 
										here the finally block does not contain any general statements*/</comment>
		<finally>finally <block>{
		}</block></finally></try>

	}</block></function>
	
	<comment type="block">/*update student name when the username is passed*/</comment>
	<function><type><specifier>public</specifier> <name>boolean</name></type> <name>updateStudentUserName</name><parameter_list>(<param><decl><type><name>String</name></type> <name>userName</name></decl></param>)</parameter_list> <block>{

		<if>if <condition>(<expr><name>userName</name><operator>==</operator><literal type="null">null</literal></expr>)</condition><then> <block>{
			<throw>throw <expr><operator>new</operator> <call><name>NullPointerException</name><argument_list>()</argument_list></call></expr>;</throw><comment type="line">//check if its null</comment>
		}</block></then></if>
		
		<if>if <condition>(<expr><call><name><name>userName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<throw>throw <expr><operator>new</operator> <call><name>NullPointerException</name><argument_list>()</argument_list></call></expr>;</throw><comment type="line">//check if its null</comment>
		}</block></then></if>
		<decl_stmt><decl><type><name>boolean</name></type> <name>isUpdated</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

		<try>try <block>{
			<decl_stmt><decl><type><name>Connection</name></type> <name>conn</name> <init>= <expr><call><name><name>Database</name><operator>.</operator><name>getConnection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//get the connection</comment>

			<try>try <block>{

				<decl_stmt><decl><type><name>boolean</name></type> <name>ifAddedInLogin</name> <init>= <expr><call><name><name>People</name><operator>.</operator><name>updateUserNameIntoLoginTable</name></name><argument_list>(<argument><expr><name>userName</name></expr></argument>, <argument><expr><call><name><name>this</name><operator>.</operator><name>getUserName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//update in the login table</comment>
				<if>if <condition>(<expr><name>ifAddedInLogin</name></expr>)</condition><then>
					<block type="pseudo"><expr_stmt><expr><name>isUpdated</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt></block></then></if>

			}</block>
			<comment type="line">//catch block</comment>
			<catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Error adding/updating to database"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>

		}</block>
		
		<comment type="line">//catch block</comment>
		<catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Connection failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></catch>
		
		<comment type="block">/*The code thats placed in the finally block gets executed no matter what. But 
											here the finally block does not contain any general statements*/</comment>
		<finally>finally <block>{

			<comment type="line">// System.out.println("retrieved");</comment>
		}</block></finally></try>

		<return>return <expr><name>isUpdated</name></expr>;</return>

	}</block></function>

	<comment type="block">/*update the student name which passed the new name to this function*/</comment>
	<function><type><specifier>public</specifier> <name>boolean</name></type> <name>updateStudentName</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{

		<if>if <condition>(<expr><name>name</name><operator>==</operator><literal type="null">null</literal></expr>)</condition><then> <block>{
			<throw>throw <expr><operator>new</operator> <call><name>NullPointerException</name><argument_list>()</argument_list></call></expr>;</throw><comment type="line">//throw an exception</comment>
		}</block></then></if>
		
		<if>if <condition>(<expr><call><name><name>name</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<throw>throw <expr><operator>new</operator> <call><name>NullPointerException</name><argument_list>()</argument_list></call></expr>;</throw><comment type="line">//throw an exception</comment>
		}</block></then></if>
		

		<decl_stmt><decl><type><name>boolean</name></type> <name>isUpdated</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

		<try>try <block>{
			<decl_stmt><decl><type><name>Connection</name></type> <name>conn</name> <init>= <expr><call><name><name>Database</name><operator>.</operator><name>getConnection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//get the connection</comment>

			<try>try <block>{

				<decl_stmt><decl><type><name>boolean</name></type> <name>ifUpdatedInPeople</name> <init>= <expr><call><name><name>People</name><operator>.</operator><name>updateNameIntoPeopleTable</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>this</name><operator>.</operator><name>getUIN</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//update in people table</comment>
				<if>if <condition>(<expr><name>ifUpdatedInPeople</name></expr>)</condition><then>
					<block type="pseudo"><expr_stmt><expr><name>isUpdated</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt></block></then></if>

			}</block>
			<comment type="line">//catch block </comment>
			<catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Error adding/updating to database"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<throw>throw <expr><operator>new</operator> <call><name>NullPointerException</name><argument_list>()</argument_list></call></expr>;</throw>
			}</block></catch></try>

		}</block>
		<comment type="line">//catch block </comment>
		<catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Connection failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<throw>throw <expr><operator>new</operator> <call><name>NullPointerException</name><argument_list>()</argument_list></call></expr>;</throw>

		}</block></catch>
		
		<comment type="block">/*The code thats placed in the finally block gets executed no matter what. But 
													here the finally block does not contain any general statements*/</comment>
		<finally>finally <block>{

			<comment type="line">// System.out.println("retrieved");</comment>
		}</block></finally></try>

		<return>return <expr><name>isUpdated</name></expr>;</return>

	}</block></function>

	<comment type="block">/*update the student Dept when it is passed to it the new dpet ID*/</comment>
	<function><type><specifier>public</specifier> <name>boolean</name></type> <name>updateStudentDept</name><parameter_list>(<param><decl><type><name>int</name></type> <name>deptID</name></decl></param>)</parameter_list> <block>{

		<comment type="line">// ask simant how to check for the dept</comment>

		<decl_stmt><decl><type><name>boolean</name></type> <name>isUpdated</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

		<try>try <block>{
			<decl_stmt><decl><type><name>Connection</name></type> <name>conn</name> <init>= <expr><call><name><name>Database</name><operator>.</operator><name>getConnection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//get the connection </comment>

			<try>try <block>{

				<decl_stmt><decl><type><name>boolean</name></type> <name>ifUpdatedInPeople</name> <init>= <expr><call><name><name>People</name><operator>.</operator><name>updateDeptIntoPeopleTable</name></name><argument_list>(<argument><expr><name>deptID</name></expr></argument>, <argument><expr><call><name><name>this</name><operator>.</operator><name>getUIN</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//update in the people table</comment>
				<if>if <condition>(<expr><name>ifUpdatedInPeople</name></expr>)</condition><then>
					<block type="pseudo"><expr_stmt><expr><name>isUpdated</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt></block></then></if>

			}</block>
			<comment type="line">//catch block </comment>
			<catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Error adding/updating to database"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>

		}</block>
		<comment type="line">//CATCH block</comment>
		<catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Connection failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></catch>
		
		<comment type="block">/*The code thats placed in the finally block gets executed no matter what. But 
													here the finally block does not contain any general statements*/</comment>
		<finally>finally <block>{

			<comment type="line">// System.out.println("retrieved");</comment>
		}</block></finally></try>

		<return>return <expr><name>isUpdated</name></expr>;</return>

	}</block></function>

	<comment type="block">/*calculates the GPA from the grades it has for the passed UIN*/</comment>
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>calculateGPA</name><parameter_list>(<param><decl><type><name>int</name></type> <name>UIN</name></decl></param>)</parameter_list> <block>{

		<decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getGrades</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//get the grades</comment>
		<decl_stmt><decl><type><name>double</name></type> <name>finalGrade</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>maxLevel</name> <init>= <expr><call><name><name>GradeSystem</name><operator>.</operator><name>getMaxGradeLevel</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//get the max grade level</comment>

		<try>try <block>{
			<decl_stmt><decl><type><name>Connection</name></type> <name>conn</name> <init>= <expr><call><name><name>Database</name><operator>.</operator><name>getConnection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//get the connection</comment>
			<decl_stmt><decl><type><name>String</name></type> <name>SQLStudentGPASelect</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
			<try>try <block>{

				<if>if <condition>(<expr><name>conn</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{

					<expr_stmt><expr><name>SQLStudentGPASelect</name> <operator>=</operator> <literal type="string">"Select * From studentenrollment natural join gradingsystem where UIN=?;"</literal></expr>;</expr_stmt>
				}</block></then></if>

				<decl_stmt><decl><type><name>PreparedStatement</name></type> <name>stmtForSelect</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>prepareStatement</name></name><argument_list>(<argument><expr><name>SQLStudentGPASelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>stmtForSelect</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line">//pass the UIN</comment>

				<decl_stmt><decl><type><name>ResultSet</name></type> <name>rs</name> <init>= <expr><call><name><name>stmtForSelect</name><operator>.</operator><name>executeQuery</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//execute the query</comment>

				<while>while <condition>(<expr><call><name><name>rs</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{

					<comment type="line">//calculate the final GPA</comment>
					<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"retrievedStudentGradeLevel"</literal></expr></argument>, <argument><expr><literal type="string">"gradingsystem"</literal></expr></argument>, <argument><expr><literal type="string">"GradeLevel"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name>double</name></type> <name>retrievedStudentGradeLevel</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getDouble</name></name><argument_list>(<argument><expr><literal type="string">"GradeLevel"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//get the grade</comment>
					
					<decl_stmt><decl><type><name>double</name></type> <name>normalizedLevel</name> <init>= <expr><name>maxLevel</name><operator>-</operator> <name>retrievedStudentGradeLevel</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><name>retrievedStudentGradeLevel</name> <operator>=</operator> <operator>(</operator><name>normalizedLevel</name> <operator>*</operator> <literal type="number">4.0</literal><operator>)</operator> <operator>/</operator> <literal type="number">7.0</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>finalGrade</name> <operator>+=</operator> <name>retrievedStudentGradeLevel</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>

				}</block></while>

				<comment type="line">//calculate the GPA</comment>
				<if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
					<expr_stmt><expr><name>finalGrade</name> <operator>=</operator> <name>finalGrade</name> <operator>/</operator> <name>count</name></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>updateGPA</name><argument_list>(<argument><expr><name>UIN</name></expr></argument>, <argument><expr><name>finalGrade</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line">//update the new GPA</comment>
				}</block></then>

				<else>else <block>{
					<expr_stmt><expr><call><name>updateGPA</name><argument_list>(<argument><expr><name>UIN</name></expr></argument>, <argument><expr><literal type="number">4.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line">//update the gpa</comment>
				}</block></else></if>

			}</block>
			<comment type="line">//catch block</comment>
			<catch>catch <parameter_list>(<param><decl><type><name>SQLException</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>print</name></name><argument_list>(<argument><expr><literal type="string">"SQL exception in student const"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

			}</block></catch></try>

		}</block>
		<comment type="line">//catch block</comment>
		<catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		}</block></catch>
		
		<comment type="block">/*The code thats placed in the finally block gets executed no matter what. But 
														here the finally block does not contain any general statements*/</comment>
		<finally>finally <block>{

			<comment type="line">// System.out.println("retrieved");</comment>
		}</block></finally></try>

	}</block></function>
	
	<comment type="line">//new exceptions added that can be thrown </comment>
	<class><specifier>public</specifier> <specifier>static</specifier> class <name>levelNotExistException</name> <super><extends>extends <name>Exception</name></extends></super> <block>{
		<decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> <init>= <expr><literal type="number">1L</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>message</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

		<constructor><specifier>public</specifier> <name>levelNotExistException</name><parameter_list>()</parameter_list> <block>{
			<expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>message</name></name> <operator>=</operator> <literal type="string">"level does not exist"</literal></expr>;</expr_stmt>
		}</block></constructor>

		<constructor><specifier>public</specifier> <name>levelNotExistException</name><parameter_list>(<param><decl><type><name>String</name></type> <name>message</name></decl></param>)</parameter_list> <block>{
			<expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>message</name></name> <operator>=</operator> <name>message</name></expr>;</expr_stmt>
		}</block></constructor>

		<function><type><annotation>@<name>Override</name></annotation>
		<specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
			<return>return <expr><name>message</name></expr>;</return>
		}</block></function>

		<function><type><annotation>@<name>Override</name></annotation>
		<specifier>public</specifier> <name>String</name></type> <name>getMessage</name><parameter_list>()</parameter_list> <block>{
			<return>return <expr><name>message</name></expr>;</return>
		}</block></function>
	}</block></class>

	<comment type="line">//new exceptions added that can be thrown </comment>
	<class><specifier>static</specifier> class <name>GPAnotValidException</name> <super><extends>extends <name>Exception</name></extends></super> <block>{
		<decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> <init>= <expr><literal type="number">1L</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>message</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

		<constructor><specifier>public</specifier> <name>GPAnotValidException</name><parameter_list>()</parameter_list> <block>{
			<expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>message</name></name> <operator>=</operator> <literal type="string">"GPA is not valid"</literal></expr>;</expr_stmt>
		}</block></constructor>

		<constructor><specifier>public</specifier> <name>GPAnotValidException</name><parameter_list>(<param><decl><type><name>String</name></type> <name>message</name></decl></param>)</parameter_list> <block>{
			<expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>message</name></name> <operator>=</operator> <name>message</name></expr>;</expr_stmt>
		}</block></constructor>

		<function><type><annotation>@<name>Override</name></annotation>
		<specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
			<return>return <expr><name>message</name></expr>;</return>
		}</block></function>

		<function><type><annotation>@<name>Override</name></annotation>
		<specifier>public</specifier> <name>String</name></type> <name>getMessage</name><parameter_list>()</parameter_list> <block>{
			<return>return <expr><name>message</name></expr>;</return>
		}</block></function>
	}</block></class>

	<comment type="line">//new exceptions added that can be thrown </comment>
	<class><specifier>public</specifier> <specifier>static</specifier> class <name>AccessDeniedException</name> <super><extends>extends <name>Exception</name></extends></super> <block>{
		<decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> <init>= <expr><literal type="number">1L</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>message</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

		<constructor><specifier>public</specifier> <name>AccessDeniedException</name><parameter_list>()</parameter_list> <block>{
			<expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>message</name></name> <operator>=</operator> <literal type="string">"You do not have the access"</literal></expr>;</expr_stmt>
		}</block></constructor>

		<constructor><specifier>public</specifier> <name>AccessDeniedException</name><parameter_list>(<param><decl><type><name>String</name></type> <name>message</name></decl></param>)</parameter_list> <block>{
			<expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>message</name></name> <operator>=</operator> <name>message</name></expr>;</expr_stmt>
		}</block></constructor>

		<function><type><annotation>@<name>Override</name></annotation>
		<specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
			<return>return <expr><name>message</name></expr>;</return>
		}</block></function>

		<function><type><annotation>@<name>Override</name></annotation>
		<specifier>public</specifier> <name>String</name></type> <name>getMessage</name><parameter_list>()</parameter_list> <block>{
			<return>return <expr><name>message</name></expr>;</return>
		}</block></function>
	}</block></class>

	<function><type><annotation>@<name>Override</name></annotation>
	<specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>arg0</name></decl></param>)</parameter_list> <block>{
		<comment type="line">// TODO Auto-generated method stub</comment>
		<if>if <condition>(<expr><name>arg0</name> <operator>instanceof</operator> <name>Student</name></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>Student</name></type> <name>temp</name> <init>= <expr><operator>(</operator><name>Student</name><operator>)</operator> <name>arg0</name></expr></init></decl>;</decl_stmt>
			<comment type="line">// ask sim to add a return stmt here</comment>
		}</block></then></if>
		<return>return <expr><call><name><name>super</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>arg0</name></expr></argument>)</argument_list></call></expr>;</return>

	}</block></function>

	<function><type><annotation>@<name>Override</name></annotation>
	<specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{
		<comment type="line">// TODO Auto-generated method stub</comment>
		<return>return <expr><call><name><name>super</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr>;</return>
	}</block></function>

	<comment type="block">/*
	 * All student functions add, update, retrieve are specified in the this class
	 * 
	 * local main class is used for testing functions and specific executions
	 */</comment>
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<param><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></param>)</parameter_list> <block>{

	}</block></function>

}</block></class>
</unit>
