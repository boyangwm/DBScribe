<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Boyang\Desktop\ASE15\subjects\UMAS\src\com\umas\code\Semester.java"><package>package <name><name>com</name><operator>.</operator><name>umas</name><operator>.</operator><name>code</name></name>;</package>


<comment type="block" format="javadoc">/****************@author Simant Purohit*********************************/</comment>

<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>Connection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>PreparedStatement</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>ResultSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>SQLException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>Timestamp</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Calendar</name></name>;</import>

<class><specifier>public</specifier> class <name>Semester</name> <block>{
	<decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>SemesterID</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>SemesterName</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>Timestamp</name></type> <name>SemesterYear</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>isCurrent</name></decl>;</decl_stmt>
	<comment type="block" format="javadoc">/**
	 * @return the semesterID
	 */</comment>
	<function><type><specifier>public</specifier> <name>int</name></type> <name>getSemesterID</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>SemesterID</name></expr>;</return>
	}</block></function>
	<comment type="block" format="javadoc">/**
	 * @param semesterID the semesterID to set
	 */</comment>
	<function><type><specifier>public</specifier> <name>void</name></type> <name>setSemesterID</name><parameter_list>(<param><decl><type><name>int</name></type> <name>semesterID</name></decl></param>)</parameter_list> <block>{
		<expr_stmt><expr><name>SemesterID</name> <operator>=</operator> <name>semesterID</name></expr>;</expr_stmt>
	}</block></function>
	<comment type="block" format="javadoc">/**
	 * @return the semesterName
	 */</comment>
	<function><type><specifier>public</specifier> <name>String</name></type> <name>getSemesterName</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>SemesterName</name></expr>;</return>
	}</block></function>
	<comment type="block" format="javadoc">/**
	 * @param semesterName the semesterName to set
	 */</comment>
	<function><type><specifier>public</specifier> <name>void</name></type> <name>setSemesterName</name><parameter_list>(<param><decl><type><name>String</name></type> <name>semesterName</name></decl></param>)</parameter_list> <block>{
		<expr_stmt><expr><name>SemesterName</name> <operator>=</operator> <name>semesterName</name></expr>;</expr_stmt>
	}</block></function>
	<comment type="block" format="javadoc">/**
	 * @return the semesterYear
	 */</comment>
	<function><type><specifier>public</specifier> <name>Timestamp</name></type> <name>getSemesterYear</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>SemesterYear</name></expr>;</return>
	}</block></function>
	<comment type="block" format="javadoc">/**
	 * @param semesterYear the semesterYear to set
	 */</comment>
	<function><type><specifier>public</specifier> <name>void</name></type> <name>setSemesterYear</name><parameter_list>(<param><decl><type><name>Timestamp</name></type> <name>semesterYear</name></decl></param>)</parameter_list> <block>{
		<expr_stmt><expr><name>SemesterYear</name> <operator>=</operator> <name>semesterYear</name></expr>;</expr_stmt>
	}</block></function>
	<comment type="block" format="javadoc">/**
	 * @return the isCurrent
	 */</comment>
	<function><type><specifier>public</specifier> <name>int</name></type> <name>getIsCurrent</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>isCurrent</name></expr>;</return>
	}</block></function>
	<comment type="block" format="javadoc">/**
	 * @param isCurrent the isCurrent to set
	 */</comment>
	<function><type><specifier>public</specifier> <name>void</name></type> <name>setIsCurrent</name><parameter_list>(<param><decl><type><name>int</name></type> <name>isCurrent</name></decl></param>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>isCurrent</name></name> <operator>=</operator> <name>isCurrent</name></expr>;</expr_stmt>
	}</block></function>
	
	<comment type="block">/*
	 * Initializes the Semester object to the current semester values
	 */</comment>
	<constructor><specifier>public</specifier> <name>Semester</name><parameter_list>()</parameter_list><block>{
		<try>try<block>{
			<decl_stmt><decl><type><name>Connection</name></type> <name>conn</name> <init>= <expr><call><name><name>Database</name><operator>.</operator><name>getConnection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<try>try<block>{
				<if>if<condition>(<expr><name>conn</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then><block>{
					
					<comment type="line">//Retrieve the current semester ID</comment>
					<decl_stmt><decl><type><name>String</name></type> <name>semSelect</name> <init>= <expr><literal type="string">"Select *"</literal>
							<operator>+</operator> <literal type="string">" FROM semester"</literal>
							<operator>+</operator> <literal type="string">" WHERE isCurrent= ?"</literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>PreparedStatement</name></type> <name>statement</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>prepareStatement</name></name><argument_list>(<argument><expr><name>semSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name>statement</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name>ResultSet</name></type> <name>rs</name> <init>= <expr><call><name><name>statement</name><operator>.</operator><name>executeQuery</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					
					<if>if<condition>(<expr><call><name><name>rs</name><operator>.</operator><name>first</name></name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
						<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"semID"</literal></expr></argument>, <argument><expr><literal type="string">"semester"</literal></expr></argument>, <argument><expr><literal type="string">"SemesterID"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name>int</name></type> <name>semID</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"SemesterID"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><name><name>this</name><operator>.</operator><name>SemesterID</name></name> <operator>=</operator> <name>semID</name></expr>;</expr_stmt><empty_stmt>;</empty_stmt>
						
						<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"semName"</literal></expr></argument>, <argument><expr><literal type="string">"semester"</literal></expr></argument>, <argument><expr><literal type="string">"SemesterName"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name>String</name></type> <name>semName</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"SemesterName"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><name><name>this</name><operator>.</operator><name>SemesterName</name></name> <operator>=</operator> <name>semName</name></expr>;</expr_stmt>
						
						<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"semYear"</literal></expr></argument>, <argument><expr><literal type="string">"semester"</literal></expr></argument>, <argument><expr><literal type="string">"SemesterYear"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name>Timestamp</name></type> <name>semYear</name> <init>=  <expr><call><name><name>rs</name><operator>.</operator><name>getTimestamp</name></name><argument_list>(<argument><expr><literal type="string">"SemesterYear"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><name><name>this</name><operator>.</operator><name>SemesterYear</name></name> <operator>=</operator> <name>semYear</name></expr>;</expr_stmt>
						
						<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"usCur"</literal></expr></argument>, <argument><expr><literal type="string">"semester"</literal></expr></argument>, <argument><expr><literal type="string">"IsCurrent"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name>int</name></type> <name>isCur</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"IsCurrent"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><name><name>this</name><operator>.</operator><name>isCurrent</name></name> <operator>=</operator> <name>isCur</name></expr>;</expr_stmt>
					}</block></then></if>							
					
				}</block></then></if>
			}</block>
			
			<catch>catch<parameter_list>(<param><decl><type><name>SQLException</name></type> <name>e</name></decl></param>)</parameter_list><block>{
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Error in SQL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
						
		}</block>
		
		<finally>finally<block>{
		}</block></finally></try>
	}</block></constructor>

	<comment type="block">/*
	 * Starts the process for initializing the next semester
	 * This function calculates the next semester values
	 * Empties the wait and the email lists
	 * Deletes the previous semester course schedule as the new semester is being started
	 * Commits the whole transaction
	 */</comment>
	<function><type><specifier>public</specifier> <name>boolean</name></type> <name>goToNextSemester</name><parameter_list>()</parameter_list><block>{
		<expr_stmt><expr><call><name>calculateNextSemester</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>SemesterName</name></name><operator>+</operator><literal type="string">" "</literal><operator>+</operator><name><name>this</name><operator>.</operator><name>SemesterYear</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>WaitList</name><operator>.</operator><name>emptyWaitAndEmailList</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>CourseSchedule</name><operator>.</operator><name>deleteAllCourseSchedule</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>updateIsCurrent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>commitNextSemester</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>Database</name><operator>.</operator><name>commitTransaction</name></name><argument_list>(<argument><expr><call><name><name>Database</name><operator>.</operator><name>getConnection</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="boolean">true</literal></expr>;</return>
		
	}</block></function>
	
	<comment type="block">/*
	 * Calculates the new semester values
	 */</comment>
	<function><type><specifier>private</specifier> <name>void</name></type> <name>calculateNextSemester</name><parameter_list>()</parameter_list><block>{
		<if>if<condition>(<expr><call><name><name>this</name><operator>.</operator><name>getSemesterName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">"SPRING"</literal></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
			<expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>setSemesterName</name></name><argument_list>(<argument><expr><literal type="string">"SUMMER"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		}</block></then></if>
		
		<if>if<condition>(<expr><call><name><name>this</name><operator>.</operator><name>getSemesterName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">"SUMMER"</literal></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
			<expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>setSemesterName</name></name><argument_list>(<argument><expr><literal type="string">"FALL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		}</block></then></if>
		
		<if>if<condition>(<expr><call><name><name>this</name><operator>.</operator><name>getSemesterName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">"FALL"</literal></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
			<decl_stmt><decl><type><name>long</name></type> <name>timestamp</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>getSemesterYear</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>Calendar</name></type> <name>cal</name> <init>= <expr><call><name><name>Calendar</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>cal</name><operator>.</operator><name>setTimeInMillis</name></name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>cal</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>YEAR</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>setSemesterYear</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Timestamp</name><argument_list>(<argument><expr><call><name><name>cal</name><operator>.</operator><name>getTimeInMillis</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>setSemesterName</name></name><argument_list>(<argument><expr><literal type="string">"SPRING"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		}</block></then></if>
		
	}</block></function>
	
	<comment type="block">/*
	 * Inserts the new semester values in the database
	 * Marks this new semester as current
	 */</comment>
	<function><type><specifier>public</specifier> <name>void</name></type> <name>commitNextSemester</name><parameter_list>()</parameter_list><block>{
		<try>try<block>{
			<decl_stmt><decl><type><name>Connection</name></type> <name>conn</name> <init>= <expr><call><name><name>Database</name><operator>.</operator><name>getConnection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<try>try<block>{
				<if>if<condition>(<expr><name>conn</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then><block>{

					<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"semName"</literal></expr></argument>, <argument><expr><literal type="string">"semester"</literal></expr></argument>, <argument><expr><literal type="string">"SemesterName"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name>String</name></type> <name>semName</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>getSemesterName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					
					<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"t"</literal></expr></argument>, <argument><expr><literal type="string">"semester"</literal></expr></argument>, <argument><expr><literal type="string">"SemesterYear"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name>Timestamp</name></type> <name>t</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>getSemesterYear</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					
					<comment type="line">//Retrieve the current semester ID</comment>
					<decl_stmt><decl><type><name>String</name></type> <name>semAdd</name> <init>= <expr><literal type="string">"Insert into semester"</literal>
							<operator>+</operator> <literal type="string">" (SemesterName, SemesterYear, isCurrent)"</literal>
							<operator>+</operator> <literal type="string">" Values(?,?,?)"</literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>PreparedStatement</name></type> <name>statement</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>prepareStatement</name></name><argument_list>(<argument><expr><name>semAdd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name>statement</name><operator>.</operator><name>setString</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>semName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>statement</name><operator>.</operator><name>setTimestamp</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>statement</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>statement</name><operator>.</operator><name>executeUpdate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					
					<comment type="line">//Database.commitTransaction(conn);</comment>
				}</block></then></if>
			}</block>
			
			<catch>catch<parameter_list>(<param><decl><type><name>SQLException</name></type> <name>e</name></decl></param>)</parameter_list><block>{
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Error in SQL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
						
		}</block>
		
		<finally>finally<block>{
		}</block></finally></try>
	}</block></function>
	
	<comment type="block">/*
	 * Makes all the previous semesters non current after the new semester is added
	 */</comment>
	<function><type><specifier>public</specifier> <name>void</name></type> <name>updateIsCurrent</name><parameter_list>()</parameter_list><block>{
		<try>try<block>{
			<decl_stmt><decl><type><name>Connection</name></type> <name>conn</name> <init>= <expr><call><name><name>Database</name><operator>.</operator><name>getConnection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<try>try<block>{
				<if>if<condition>(<expr><name>conn</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then><block>{
					
					<decl_stmt><decl><type><name>String</name></type> <name>semAdd</name> <init>= <expr><literal type="string">"UPDATE semester"</literal>
							<operator>+</operator> <literal type="string">" SET IsCurrent= ?"</literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>PreparedStatement</name></type> <name>statement</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>prepareStatement</name></name><argument_list>(<argument><expr><name>semAdd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name>statement</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>statement</name><operator>.</operator><name>executeUpdate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>			
					<expr_stmt><expr><call><name><name>Database</name><operator>.</operator><name>commitTransaction</name></name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
			}</block>
			
			<catch>catch<parameter_list>(<param><decl><type><name>SQLException</name></type> <name>e</name></decl></param>)</parameter_list><block>{
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Error in SQL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
						
		}</block>
		
		<finally>finally<block>{
		}</block></finally></try>		
	}</block></function>
	
	<comment type="block">/*
	 * (non-Javadoc)
	 * @see java.lang.Object#toString()
	 */</comment>
	<function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list><block>{
		<decl_stmt><decl><type><name>long</name></type> <name>timeStamp</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>getSemesterYear</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Calendar</name></type> <name>c</name> <init>= <expr><call><name><name>Calendar</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>setTimeInMillis</name></name><argument_list>(<argument><expr><name>timeStamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>year</name> <init>= <expr><call><name><name>c</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>YEAR</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<return>return <expr><call><name><name>this</name><operator>.</operator><name>getSemesterName</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="string">" "</literal><operator>+</operator><name>year</name></expr>;</return>
	}</block></function>
	
}</block></class>
</unit>
