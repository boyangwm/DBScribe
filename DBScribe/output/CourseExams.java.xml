<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Boyang\Desktop\ASE15\subjects\UMAS\src\com\umas\code\CourseExams.java"><package>package <name><name>com</name><operator>.</operator><name>umas</name><operator>.</operator><name>code</name></name>;</package>


<comment type="line">//import java.lang.annotation.ElementType;</comment>
<comment type="line">//import java.lang.annotation.Retention;</comment>
<comment type="line">//import java.lang.annotation.RetentionPolicy;</comment>
<comment type="line">//import java.lang.annotation.Target;</comment>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>Connection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>PreparedStatement</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>ResultSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>SQLException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

<class><specifier>public</specifier> class <name>CourseExams</name> <block>{

	<decl_stmt><decl><type><name>int</name></type> <name>offerID</name></decl>;</decl_stmt> <comment type="line">// CourseOffered offerID</comment>
	<decl_stmt><decl><type><name>String</name></type> <name>examName</name></decl>;</decl_stmt> <comment type="line">// Name of the exam</comment>
	<decl_stmt><decl><type><name><name>HashMap</name><argument_list type="template">&lt;<argument><name>Student</name></argument>,<argument><name>Double</name></argument>&gt;</argument_list></name></type> <name>examMarks</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="template">&lt;<argument><name>Student</name></argument>,<argument><name>Double</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> 
	<decl_stmt><decl><type><name>CourseOffered</name></type> <name>courseoffered</name></decl>;</decl_stmt>
	
<comment type="line">//	@Target({ElementType.LOCAL_VARIABLE})</comment>
<comment type="line">//	@Retention(RetentionPolicy.RUNTIME)</comment>
<comment type="line">//	public @interface DBAnnotation {</comment>
<comment type="line">//	 String[] variable () default "";</comment>
<comment type="line">//	 String[] table () default "";</comment>
<comment type="line">//	 String[] column () default "";</comment>
<comment type="line">//	 boolean[] isSource () default false; </comment>
<comment type="line">//	}</comment>
	
	<comment type="line">// Constructor</comment>
	<constructor><specifier>public</specifier> <name>CourseExams</name><parameter_list>(<param><decl><type><name>int</name></type> <name>offerID</name></decl></param>, <param><decl><type><name>String</name></type> <name>examName</name></decl></param>, <param><decl><type><name><name>HashMap</name><argument_list type="template">&lt;<argument><name>Student</name></argument>,<argument><name>Double</name></argument>&gt;</argument_list></name></type> <name>examMarks</name></decl></param>)</parameter_list> <block>{
		<expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>offerID</name></name> <operator>=</operator> <name>offerID</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>examName</name></name> <operator>=</operator> <name>examName</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>examMarks</name></name> <operator>=</operator> <name>examMarks</name></expr>;</expr_stmt>
	}</block></constructor>

	<comment type="line">// Constructor</comment>
	<constructor><specifier>public</specifier> <name>CourseExams</name><parameter_list>(<param><decl><type><name>int</name></type> <name>offerID</name></decl></param>)</parameter_list> <block>{
		<expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>offerID</name></name> <operator>=</operator> <name>offerID</name></expr>;</expr_stmt>
		<try>try <block>{
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>courseoffered</name></name> <operator>=</operator> <operator>new</operator> <call><name>CourseOffered</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>offerID</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch>catch <parameter_list>(<param><decl><type><name><name>Course</name><operator>.</operator><name>CourseDoesNotExistException</name></name></type> <name>e</name></decl></param>)</parameter_list> <block>{
			<comment type="line">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></catch> <catch>catch <parameter_list>(<param><decl><type><name><name>CourseOffered</name><operator>.</operator><name>CourseOfferingDoesNotExistException</name></name></type> <name>e</name></decl></param>)</parameter_list> <block>{
			<comment type="line">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		<comment type="line">//this.examName = examName;</comment>
	}</block></constructor>

	<function><type><specifier>public</specifier> <name>int</name></type> <name>getOfferID</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>offerID</name></expr>;</return>
	}</block></function>

	<function><type><specifier>public</specifier> <name>void</name></type> <name>setOfferID</name><parameter_list>(<param><decl><type><name>int</name></type> <name>offerID</name></decl></param>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>offerID</name></name> <operator>=</operator> <name>offerID</name></expr>;</expr_stmt>
	}</block></function>

	<function><type><specifier>public</specifier> <name>String</name></type> <name>getExamName</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>examName</name></expr>;</return>
	}</block></function>

	<function><type><specifier>public</specifier> <name>void</name></type> <name>setExamName</name><parameter_list>(<param><decl><type><name>String</name></type> <name>examName</name></decl></param>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>examName</name></name> <operator>=</operator> <name>examName</name></expr>;</expr_stmt>
	}</block></function>
	
	<function><type><specifier>public</specifier> <name><name>HashMap</name><argument_list type="template">&lt;<argument><name>Student</name></argument>,<argument><name>Double</name></argument>&gt;</argument_list></name></type> <name>getExamMarks</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>examMarks</name></expr>;</return>
	}</block></function>

	<function><type><specifier>public</specifier> <name>void</name></type> <name>setExamMarks</name><parameter_list>(<param><decl><type><name><name>HashMap</name><argument_list type="template">&lt;<argument><name>Student</name></argument>,<argument><name>Double</name></argument>&gt;</argument_list></name></type> <name>examMarks</name></decl></param>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>examMarks</name></name> <operator>=</operator> <name>examMarks</name></expr>;</expr_stmt>
	}</block></function>

	<comment type="line">// This function creates a new table for each course offered in the semester.</comment>
	<comment type="line">// It internally calls the createCourseExamStructureTable of the </comment>
	<comment type="line">// CourseExamStructure class to create a table that stores the Course Structure.</comment>
	<comment type="line">// We commit the create statements only when both the tables are created.</comment>
	<comment type="line">// Hence, the commit statement exists only in createCourseExamMarksTable function.</comment>
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>createCourseExamMarksTable</name><parameter_list>(<param><decl><type><name>String</name></type> <name>courseName</name></decl></param>, <param><decl><type><name>int</name></type> <name>offerID</name></decl></param>,<param><decl><type><name>int</name></type> <name>semID</name></decl></param>)</parameter_list><block>{
		<decl_stmt><decl><type><name>boolean</name></type> <name>tableAdded</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
<comment type="line">//		Course course = offeredCourse.getCourse();</comment>
<comment type="line">//		String courseName = course.getCourseName();</comment>
<comment type="line">//		int offerID= offeredCourse.getOfferID();</comment>
<comment type="line">//		int semID = offeredCourse.getSemesterID();</comment>
		
		
		<decl_stmt><decl><type><name>String</name></type> <name>tableName</name> <init>= <expr><name>courseName</name> <operator>+</operator> <call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>offerID</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>semID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
		<decl_stmt><decl><type><name>String</name></type> <name>studentIDConstraint</name> <init>= <expr><name>tableName</name> <operator>+</operator> <literal type="string">"studentID"</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>studentEnrollmentIDConstraint</name> <init>= <expr><name>tableName</name> <operator>+</operator> <literal type="string">"studentEnrollmentID"</literal></expr></init></decl>;</decl_stmt>
		
<comment type="line">//		@DBAnnotation (</comment>
<comment type="line">//				variable = {"tableName"},  </comment>
<comment type="line">//				table = "courseExamStructureTable", </comment>
<comment type="line">//				column = {"Username","Password"}, </comment>
<comment type="line">//				isSource = false)</comment>
		<decl_stmt><decl><type><name>String</name></type> <name>SQLExamCreate</name> <init>= <expr><literal type="string">"CREATE TABLE %s (`StudentUIN` int(12) NOT NULL,`StudentEnrollmentID` int(12) NOT NULL, "</literal> <operator>+</operator>
				<literal type="string">"PRIMARY KEY (`StudentUIN`), KEY `StudentID_idx` (`StudentUIN`),  "</literal> <operator>+</operator> 
				<literal type="string">"KEY `StudentEnrollmentID_idx` (`StudentEnrollmentID`), "</literal> <operator>+</operator>
				<literal type="string">"CONSTRAINT %s FOREIGN KEY (`StudentEnrollmentID`) REFERENCES `studentenrollment` (`EnrollmentID`) ON DELETE NO ACTION ON UPDATE NO ACTION,"</literal> <operator>+</operator>
				<literal type="string">"CONSTRAINT %s FOREIGN KEY (`StudentUIN`) REFERENCES `student` (`UIN`) ON DELETE CASCADE ON UPDATE CASCADE);"</literal></expr></init></decl> ;</decl_stmt>

		<comment type="line">//String SQLExamCreate = "CREATE TABLE %s (`StudentUIN` int(12), `StudentEnrollmentID` int(12), PRIMARY KEY (StudentUIN))";</comment>
		<expr_stmt><expr><name>SQLExamCreate</name> <operator>=</operator> <call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>SQLExamCreate</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>,<argument><expr><name>studentEnrollmentIDConstraint</name></expr></argument>,<argument><expr><name>studentIDConstraint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<try>try <block>{
			<decl_stmt><decl><type><name>Connection</name></type> <name>conn</name> <init>= <expr><call><name><name>Database</name><operator>.</operator><name>getConnection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<try>try <block>{
				<if>if <condition>(<expr><name>conn</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
					
					<decl_stmt><decl><type><name>PreparedStatement</name></type> <name>statement</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>prepareStatement</name></name><argument_list>(<argument><expr><name>SQLExamCreate</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<comment type="line">//					statement.setString(1, tableName);</comment>
<comment type="line">//					statement.setString(1, studentEnrollmentIDConstraint);</comment>
<comment type="line">//					statement.setString(2, studentIDConstraint);</comment>

					<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Before exam create"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>statement</name><operator>.</operator><name>executeUpdate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name>boolean</name></type> <name>isCourseAdded</name> <init>= <expr><call><name><name>CourseExamStructure</name><operator>.</operator><name>createCourseExamStructureTable</name></name><argument_list>(<argument><expr><name>courseName</name></expr></argument>, <argument><expr><name>offerID</name></expr></argument>,<argument><expr><name>semID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<if>if<condition>(<expr><name>isCourseAdded</name> <operator>==</operator> <literal type="boolean">true</literal></expr>)</condition><then><block>{
						<comment type="line">//Database.commitTransaction(conn);</comment>
						<expr_stmt><expr><name>tableAdded</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"After exam create"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then> <else>else <block>{
						<expr_stmt><expr><call><name><name>Database</name><operator>.</operator><name>rollBackTransaction</name></name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></else></if>
				}</block></then></if>	
			}</block> <catch>catch <parameter_list>(<param><decl><type><name>SQLException</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>Database</name><operator>.</operator><name>rollBackTransaction</name></name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>

		}</block> <catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
	
		<return>return <expr><name>tableAdded</name></expr>;</return>
	}</block></function>
		
	
	<comment type="line">// This function is called when a new exam is added in the CourseExamStructure table.</comment>
	<comment type="line">// This function adds a new column in the CourseExam table for the added exam.</comment>
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>addNewExamColumn</name><parameter_list>(<param><decl><type><name>CourseExamStructure</name></type> <name>courseExamStructure</name></decl></param>)</parameter_list><block>{
		<decl_stmt><decl><type><name>boolean</name></type> <name>examAdded</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name>CourseOffered</name></type> <name>offeredCourse</name> <init>= <expr><call><name><name>courseExamStructure</name><operator>.</operator><name>getOfferedCourse</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Course</name></type> <name>course</name> <init>= <expr><call><name><name>offeredCourse</name><operator>.</operator><name>getCourse</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>courseName</name> <init>= <expr><call><name><name>course</name><operator>.</operator><name>getCourseName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>offerID</name><init>= <expr><call><name><name>offeredCourse</name><operator>.</operator><name>getOfferID</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>semID</name> <init>= <expr><call><name><name>offeredCourse</name><operator>.</operator><name>getSemesterID</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		
		<decl_stmt><decl><type><name>String</name></type> <name>tableName</name> <init>= <expr><name>courseName</name> <operator>+</operator> <call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>offerID</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>semID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
	
		<decl_stmt><decl><type><name>String</name></type> <name>examName</name> <init>= <expr><call><name><name>courseExamStructure</name><operator>.</operator><name>getExamName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	
		<decl_stmt><decl><type><name>boolean</name></type> <name>isExamPresent</name> <init>= <expr><call><name>isExamPresent</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>,<argument><expr><name>examName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>isExamPresent</name> <operator>==</operator> <literal type="boolean">true</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Exam already present. Please try again."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else>else <block>{
			
		<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"examName"</literal></expr></argument>,<argument><expr><literal type="string">"tableName"</literal></expr></argument>,<argument><expr><literal type="string">"ExamName"</literal></expr></argument>,<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>SQLExamAlter</name> <init>= <expr><literal type="string">"ALTER TABLE %s ADD COLUMN %s DECIMAL(4,1) Null DEFAULT 0 ;"</literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>SQLExamAlter</name> <operator>=</operator> <call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>SQLExamAlter</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>,<argument><expr><name>examName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<try>try <block>{
			<decl_stmt><decl><type><name>Connection</name></type> <name>conn</name> <init>= <expr><call><name><name>Database</name><operator>.</operator><name>getConnection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<try>try <block>{
				<if>if <condition>(<expr><name>conn</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
					<decl_stmt><decl><type><name>PreparedStatement</name></type> <name>statement</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>prepareStatement</name></name><argument_list>(<argument><expr><name>SQLExamAlter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<comment type="line">//					statement.setString(1, tableName);</comment>
<comment type="line">//					statement.setString(2, examName);</comment>
					<expr_stmt><expr><call><name><name>statement</name><operator>.</operator><name>executeUpdate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>					
					<expr_stmt><expr><name>examAdded</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
				}</block></then></if>	
			}</block> <catch>catch <parameter_list>(<param><decl><type><name>SQLException</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>Database</name><operator>.</operator><name>rollBackTransaction</name></name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>

		}</block> <catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		}</block></else></if> <comment type="line">// End of Else</comment>
		<return>return <expr><name>examAdded</name></expr>;</return>
	}</block></function>
	
	<comment type="line">// Checks whether the exam is already present. Returns true, if present, else, false.</comment>
	<function><type><specifier>private</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isExamPresent</name><parameter_list>(<param><decl><type><name>String</name></type> <name>tableName</name></decl></param>, <param><decl><type><name>String</name></type> <name>examName</name></decl></param>)</parameter_list><block>{
		<decl_stmt><decl><type><name>boolean</name></type> <name>isExamPresent</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
		
		<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"tableName"</literal></expr></argument>,<argument><expr><literal type="string">"INFORMATION_SCHEMA.COLUMNS"</literal></expr></argument>,<argument><expr><literal type="string">"column_name"</literal></expr></argument>,<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>INFORMATION_SCHEMA_COLUMNS_Select</name> <init>= <expr><literal type="string">"SELECT ISC.column_name FROM INFORMATION_SCHEMA.COLUMNS ISC WHERE ISC.table_name = ?;"</literal></expr></init></decl>;</decl_stmt>
		
		<try>try <block>{
			<decl_stmt><decl><type><name>Connection</name></type> <name>conn</name> <init>= <expr><call><name><name>Database</name><operator>.</operator><name>getConnection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<try>try <block>{
				<if>if <condition>(<expr><name>conn</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
				 
					<decl_stmt><decl><type><name>PreparedStatement</name></type> <name>statement</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>prepareStatement</name></name><argument_list>(<argument><expr><name>INFORMATION_SCHEMA_COLUMNS_Select</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					
					<expr_stmt><expr><call><name><name>statement</name><operator>.</operator><name>setString</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name>ResultSet</name></type> <name>rs</name> <init>= <expr><call><name><name>statement</name><operator>.</operator><name>executeQuery</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					<while>while<condition>(<expr><call><name><name>rs</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{
						<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"tableExamName"</literal></expr></argument>,<argument><expr><literal type="string">"INFORMATION_SCHEMA.COLUMNS"</literal></expr></argument>,<argument><expr><literal type="string">"column_name"</literal></expr></argument>,<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name>String</name></type> <name>tableExamName</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"column_name"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						
						<if>if<condition>(<expr><call><name><name>examName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>tableExamName</name></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
							<expr_stmt><expr><name>isExamPresent</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
							<break>break;</break>
						}</block></then></if>
					}</block></while>
				}</block></then></if>	
			}</block> <catch>catch <parameter_list>(<param><decl><type><name>SQLException</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>

		}</block> <catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		
		<return>return <expr><name>isExamPresent</name></expr>;</return>
		
	}</block></function>
	
	<comment type="line">// This function is used to modify the column name to be consistent with the </comment>
	<comment type="line">// exam name in the CourseExamStructure table.</comment>
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>modifyExistingExamColumnName</name><parameter_list>(<param><decl><type><name>CourseExamStructure</name></type> <name>courseExamStructure</name></decl></param>, <param><decl><type><name>String</name></type> <name>newExamName</name></decl></param>)</parameter_list><block>{
		<decl_stmt><decl><type><name>boolean</name></type> <name>modifiedColumn</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name>CourseOffered</name></type> <name>offeredCourse</name> <init>= <expr><call><name><name>courseExamStructure</name><operator>.</operator><name>getOfferedCourse</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Course</name></type> <name>course</name> <init>= <expr><call><name><name>offeredCourse</name><operator>.</operator><name>getCourse</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>courseName</name> <init>= <expr><call><name><name>course</name><operator>.</operator><name>getCourseName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>offerID</name><init>= <expr><call><name><name>offeredCourse</name><operator>.</operator><name>getOfferID</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>semID</name> <init>= <expr><call><name><name>offeredCourse</name><operator>.</operator><name>getSemesterID</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		
		<decl_stmt><decl><type><name>String</name></type> <name>tableName</name> <init>= <expr><name>courseName</name> <operator>+</operator> <call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>offerID</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>semID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
	
		<decl_stmt><decl><type><name>String</name></type> <name>examName</name> <init>= <expr><call><name><name>courseExamStructure</name><operator>.</operator><name>getExamName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	
		<decl_stmt><decl><type><name>boolean</name></type> <name>isExamPresent</name> <init>= <expr><call><name>isExamPresent</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>,<argument><expr><name>examName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>boolean</name></type> <name>isNewExamPresent</name> <init>= <expr><call><name>isExamPresent</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>,<argument><expr><name>newExamName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><operator>(</operator><name>isExamPresent</name> <operator>==</operator> <literal type="boolean">true</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>isNewExamPresent</name><operator>==</operator> <literal type="boolean">false</literal><operator>)</operator></expr> )</condition><then><block>{
						
		
		<comment type="line">//DBAnnotation.annoate("newExamName","tableName","ExamName",false);</comment>
		<decl_stmt><decl><type><name>String</name></type> <name>SQLExamAlter</name> <init>= <expr><literal type="string">"ALTER TABLE %s CHANGE COLUMN %s %s DECIMAL(4,1) NULL;"</literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>SQLExamAlter</name> <operator>=</operator> <call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>SQLExamAlter</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>examName</name></expr></argument>,<argument><expr><name>newExamName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<try>try <block>{
			<decl_stmt><decl><type><name>Connection</name></type> <name>conn</name> <init>= <expr><call><name><name>Database</name><operator>.</operator><name>getConnection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<try>try <block>{
				<if>if <condition>(<expr><name>conn</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
				 
					<decl_stmt><decl><type><name>PreparedStatement</name></type> <name>statement</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>prepareStatement</name></name><argument_list>(<argument><expr><name>SQLExamAlter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<comment type="line">//					statement.setString(1, tableName);</comment>
<comment type="line">//					statement.setString(2, examName);</comment>
<comment type="line">//					statement.setString(3, newExamName);</comment>
					<expr_stmt><expr><call><name><name>statement</name><operator>.</operator><name>executeUpdate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>					
					<expr_stmt><expr><name>modifiedColumn</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
				}</block></then></if>	
			}</block> <catch>catch <parameter_list>(<param><decl><type><name>SQLException</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>Database</name><operator>.</operator><name>rollBackTransaction</name></name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>

		}</block> <catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try> 
		
		}</block></then> <else>else <block>{
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Old exam name not present or New exam name already present. Please try again."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if> 
		
		<return>return <expr><name>modifiedColumn</name></expr>;</return>
	}</block></function>	
	
	<comment type="line">// This function is used to delete the exam column when that exam is</comment>
	<comment type="line">// deleted from the CourseExamStructure table.</comment>
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>deleteExistingExamColumn</name><parameter_list>(<param><decl><type><name>CourseExamStructure</name></type> <name>courseExamStructure</name></decl></param>)</parameter_list><block>{
		<decl_stmt><decl><type><name>boolean</name></type> <name>examDeleted</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name>CourseOffered</name></type> <name>offeredCourse</name> <init>= <expr><call><name><name>courseExamStructure</name><operator>.</operator><name>getOfferedCourse</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Course</name></type> <name>course</name> <init>= <expr><call><name><name>offeredCourse</name><operator>.</operator><name>getCourse</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>courseName</name> <init>= <expr><call><name><name>course</name><operator>.</operator><name>getCourseName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>offerID</name><init>= <expr><call><name><name>offeredCourse</name><operator>.</operator><name>getOfferID</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>semID</name> <init>= <expr><call><name><name>offeredCourse</name><operator>.</operator><name>getSemesterID</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name>String</name></type> <name>tableName</name> <init>= <expr><name>courseName</name> <operator>+</operator> <call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>offerID</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>semID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name>String</name></type> <name>examName</name> <init>= <expr><call><name><name>courseExamStructure</name><operator>.</operator><name>getExamName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name>boolean</name></type> <name>isExamPresent</name> <init>= <expr><call><name>isExamPresent</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>,<argument><expr><name>examName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>isExamPresent</name> <operator>==</operator> <literal type="boolean">true</literal></expr>)</condition><then><block>{
						
		<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"examName"</literal></expr></argument>,<argument><expr><literal type="string">"tableName"</literal></expr></argument>,<argument><expr><literal type="string">"ExamName"</literal></expr></argument>,<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>SQLExamDelete</name> <init>= <expr><literal type="string">"ALTER TABLE %s DROP COLUMN %s ;"</literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>SQLExamDelete</name> <operator>=</operator> <call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>SQLExamDelete</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>,<argument><expr><name>examName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<try>try <block>{
			<decl_stmt><decl><type><name>Connection</name></type> <name>conn</name> <init>= <expr><call><name><name>Database</name><operator>.</operator><name>getConnection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<try>try <block>{
				<if>if <condition>(<expr><name>conn</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
					<decl_stmt><decl><type><name>PreparedStatement</name></type> <name>statement</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>prepareStatement</name></name><argument_list>(<argument><expr><name>SQLExamDelete</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<comment type="line">//					statement.setString(1, tableName);</comment>
<comment type="line">//					statement.setString(2, examName);</comment>
					<expr_stmt><expr><call><name><name>statement</name><operator>.</operator><name>executeUpdate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>examDeleted</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
				}</block></then></if>	
			}</block> <catch>catch <parameter_list>(<param><decl><type><name>SQLException</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>Database</name><operator>.</operator><name>rollBackTransaction</name></name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>

		}</block> <catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		}</block></then> <else>else <block>{
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Exam not present. Please try again."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if> <comment type="line">// End of Else</comment>
		<return>return <expr><name>examDeleted</name></expr>;</return>
	}</block></function>

	<comment type="line">// This function adds marks of the students in the respective exam columns</comment>
	<function><type><specifier>public</specifier> <name>boolean</name></type> <name>addStudentMarks</name><parameter_list>()</parameter_list><block>{
		<decl_stmt><decl><type><name>boolean</name></type> <name>studentsMarksAdded</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name>int</name></type> <name>offerID</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>getOfferID</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>CourseOffered</name></type> <name>offeredCourse</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
		
		<try>try <block>{
			<expr_stmt><expr><name>offeredCourse</name> <operator>=</operator> <operator>new</operator> <call><name>CourseOffered</name><argument_list>(<argument><expr><name>offerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch>catch <parameter_list>(<param><decl><type><name><name>Course</name><operator>.</operator><name>CourseDoesNotExistException</name></name></type> <name>e1</name></decl></param>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>e1</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></catch> <catch>catch <parameter_list>(<param><decl><type><name><name>CourseOffered</name><operator>.</operator><name>CourseOfferingDoesNotExistException</name></name></type> <name>e1</name></decl></param>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>e1</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		
		<decl_stmt><decl><type><name>Course</name></type> <name>course</name> <init>= <expr><call><name><name>offeredCourse</name><operator>.</operator><name>getCourse</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>courseName</name> <init>= <expr><call><name><name>course</name><operator>.</operator><name>getCourseName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>semID</name> <init>= <expr><call><name><name>offeredCourse</name><operator>.</operator><name>getSemesterID</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name>String</name></type> <name>tableName</name> <init>= <expr><name>courseName</name> <operator>+</operator> <call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>offerID</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>semID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
	
		<decl_stmt><decl><type><name>String</name></type> <name>examName</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>getExamName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>HashMap</name><argument_list type="template">&lt;<argument><name>Student</name></argument>,<argument><name>Double</name></argument>&gt;</argument_list></name></type> <name>examMarks</name> <init>= <expr><name><name>this</name><operator>.</operator><name>examMarks</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>Set</name><argument_list type="template">&lt;<argument><name>Student</name></argument>&gt;</argument_list></name></type> <name>keys</name> <init>= <expr><call><name><name>examMarks</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>Iterator</name><argument_list type="template">&lt;<argument><name>Student</name></argument>&gt;</argument_list></name></type> <name>keyIterator</name> <init>= <expr><call><name><name>keys</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<while>while <condition>(<expr><call><name><name>keyIterator</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
			<decl_stmt><decl><type><name>Student</name></type> <name>student</name> <init>= <expr><call><name><name>keyIterator</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>UIN</name> <init>= <expr><call><name><name>student</name><operator>.</operator><name>getUIN</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name>double</name></type> <name>marks</name> <init>= <expr><operator>(</operator><name>double</name><operator>)</operator> <call><name><name>examMarks</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>student</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
			
			<comment type="line">// Step 1: Check if the student is enrolled for this course</comment>
			<decl_stmt><decl><type><name>boolean</name></type> <name>isStudentEnrolled</name> <init>= <expr><call><name>isStudentEnrolled</name><argument_list>(<argument><expr><name>student</name></expr></argument>,<argument><expr><name>offerID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<comment type="line">// Step 2: Get student Enrollment ID</comment>
			<comment type="line">//int enrollmentID = StudentEnrollment.getStudentEnrollmentID(student,offerID);</comment>
			
			<comment type="line">// If enrolled, add his marks</comment>
			<if>if <condition>(<expr><name>isStudentEnrolled</name> <operator>==</operator> <literal type="boolean">true</literal></expr>)</condition><then><block>{
				
				<decl_stmt><decl><type><name>String</name></type> <name>SQLExamUpdate</name> <init>= <expr><literal type="string">"UPDATE %s SET %s = ? WHERE `StudentUIN`=?;"</literal></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name>SQLExamUpdate</name> <operator>=</operator> <call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>SQLExamUpdate</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>,<argument><expr><name>examName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<try>try <block>{
					<decl_stmt><decl><type><name>Connection</name></type> <name>conn</name> <init>= <expr><call><name><name>Database</name><operator>.</operator><name>getConnection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					<try>try <block>{
						<if>if <condition>(<expr><name>conn</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
						 
							<decl_stmt><decl><type><name>PreparedStatement</name></type> <name>statement</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>prepareStatement</name></name><argument_list>(<argument><expr><name>SQLExamUpdate</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<comment type="line">//							statement.setString(1, tableName);</comment>
<comment type="line">//							statement.setString(2, examName);</comment>
							<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"marks"</literal></expr></argument>,<argument><expr><literal type="string">"tableName"</literal></expr></argument>,<argument><expr><name>examName</name></expr></argument>,<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name><name>statement</name><operator>.</operator><name>setDouble</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>marks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"UIN"</literal></expr></argument>,<argument><expr><literal type="string">"tableName"</literal></expr></argument>,<argument><expr><literal type="string">"StudentUIN"</literal></expr></argument>,<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name><name>statement</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name><name>statement</name><operator>.</operator><name>executeUpdate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>					
							<expr_stmt><expr><call><name><name>Database</name><operator>.</operator><name>commitTransaction</name></name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><name>studentsMarksAdded</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
						}</block></then></if>	
					}</block> <catch>catch <parameter_list>(<param><decl><type><name>SQLException</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
						<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name>Database</name><operator>.</operator><name>rollBackTransaction</name></name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></catch></try>

				}</block> <catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
					<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></catch></try>
				
			}</block></then> <else>else <block>{
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"The student "</literal> <operator>+</operator> <call><name><name>student</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call> <operator>+</operator><literal type="string">" is not enrolled."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
			
		}</block></while>
		<return>return <expr><name>studentsMarksAdded</name></expr>;</return>
	}</block></function>
	
	<comment type="line">// Checks whether a student is enrolled for the course</comment>
	<function><type><specifier>private</specifier> <name>boolean</name></type> <name>isStudentEnrolled</name><parameter_list>(<param><decl><type><name>Student</name></type> <name>student</name></decl></param>, <param><decl><type><name>int</name></type> <name>offerID</name></decl></param>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>boolean</name></type> <name>isStudentEnrolled</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="template">&lt;<argument><name>CourseOffered</name></argument>&gt;</argument_list></name></type> <name>coursesTaken</name> <init>= <expr><call><name><name>StudentEnrollment</name><operator>.</operator><name>getStudentsAllCourses</name></name><argument_list>(<argument><expr><name>student</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<for>for<control>(<init><decl><type><name>CourseOffered</name></type> <name>course</name> <range>: <expr><name>coursesTaken</name></expr></range></decl></init>)</control><block>{
			<decl_stmt><decl><type><name>int</name></type> <name>courseOfferID</name> <init>= <expr><call><name><name>course</name><operator>.</operator><name>getOfferID</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if <condition>( <expr><name>courseOfferID</name> <operator>==</operator> <name>offerID</name></expr> )</condition><then><block>{
				<expr_stmt><expr><name>isStudentEnrolled</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
				<break>break;</break>
			}</block></then></if>
		}</block></for>
		
		<return>return <expr><name>isStudentEnrolled</name></expr>;</return>
	}</block></function>

	<comment type="line">// To retrive the total marks of each student in the course.</comment>
	<function><type><specifier>public</specifier>  <name>CourseExams</name></type> <name>getStudentMarks</name><parameter_list>()</parameter_list><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>offerID</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>getOfferID</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>HashMap</name><argument_list type="template">&lt;<argument><name>Student</name></argument>, <argument><name>Double</name></argument>&gt;</argument_list></name></type> <name>examMarks</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="template">&lt;<argument><name>Student</name></argument>,<argument><name>Double</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name>CourseOffered</name></type> <name>offeredCourse</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
		
		<try>try <block>{
			<expr_stmt><expr><name>offeredCourse</name> <operator>=</operator> <operator>new</operator> <call><name>CourseOffered</name><argument_list>(<argument><expr><name>offerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch>catch <parameter_list>(<param><decl><type><name><name>Course</name><operator>.</operator><name>CourseDoesNotExistException</name></name></type> <name>e1</name></decl></param>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>e1</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></catch> <catch>catch <parameter_list>(<param><decl><type><name><name>CourseOffered</name><operator>.</operator><name>CourseOfferingDoesNotExistException</name></name></type> <name>e1</name></decl></param>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>e1</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		
		<decl_stmt><decl><type><name>Course</name></type> <name>course</name> <init>= <expr><call><name><name>offeredCourse</name><operator>.</operator><name>getCourse</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>courseName</name> <init>= <expr><call><name><name>course</name><operator>.</operator><name>getCourseName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>semID</name> <init>= <expr><call><name><name>offeredCourse</name><operator>.</operator><name>getSemesterID</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name>String</name></type> <name>tableName</name> <init>= <expr><name>courseName</name> <operator>+</operator> <call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>offerID</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>semID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
	
		
		<decl_stmt><decl><type><name>int</name></type> <name>UIN</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>double</name></type> <name>studentTotalMarks</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>
		
		
		<decl_stmt><decl><type><name>String</name></type> <name>SQLExamSelect</name> <init>= <expr><literal type="string">"SELECT * FROM %s ;"</literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>SQLExamSelect</name> <operator>=</operator> <call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>SQLExamSelect</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<try>try <block>{
			<decl_stmt><decl><type><name>Connection</name></type> <name>conn</name> <init>= <expr><call><name><name>Database</name><operator>.</operator><name>getConnection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<try>try <block>{
				<if>if <condition>(<expr><name>conn</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
					<decl_stmt><decl><type><name>PreparedStatement</name></type> <name>statement</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>prepareStatement</name></name><argument_list>(<argument><expr><name>SQLExamSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<comment type="line">//					statement.setString(1, tableName);</comment>
					<decl_stmt><decl><type><name>ResultSet</name></type> <name>rs</name> <init>=  <expr><call><name><name>statement</name><operator>.</operator><name>executeQuery</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					<comment type="line">//System.out.println(rs.getDouble());</comment>
					<decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>allExams</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>viewAllExams</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					<if>if<condition>(<expr><call><name><name>allExams</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
						<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"No exams entered yet"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then> <else>else <block>{
					
						<while>while<condition>(<expr><call><name><name>rs</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{
							<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"UIN"</literal></expr></argument>,<argument><expr><literal type="string">"tableName"</literal></expr></argument>,<argument><expr><literal type="string">"StudentUIN"</literal></expr></argument>,<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><name>UIN</name> <operator>=</operator> <call><name><name>rs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"StudentUIN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><name>studentTotalMarks</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
							<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"-*-"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<for>for<control>(<init><decl><type><name>String</name></type> <name>examName</name><range>:<expr><name>allExams</name></expr></range></decl></init>)</control><block>{
								<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"studentTotalMarks"</literal></expr></argument>,<argument><expr><literal type="string">"tableName"</literal></expr></argument>,<argument><expr><name>examName</name></expr></argument>,<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								<expr_stmt><expr><name>studentTotalMarks</name> <operator>=</operator> <name>studentTotalMarks</name> <operator>+</operator> <call><name><name>rs</name><operator>.</operator><name>getDouble</name></name><argument_list>(<argument><expr><name>examName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							}</block></for>
							
							<decl_stmt><decl><type><name>Student</name></type> <name>student</name> <init>= <expr><operator>new</operator> <call><name>Student</name><argument_list>(<argument><expr><name>UIN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
							<expr_stmt><expr><call><name><name>examMarks</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>student</name></expr></argument>, <argument><expr><name>studentTotalMarks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							
						}</block></while>
					}</block></else></if>
				}</block></then></if>	
			}</block> <catch>catch <parameter_list>(<param><decl><type><name>SQLException</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>

		}</block> <catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		
		<expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>setExamMarks</name></name><argument_list>(<argument><expr><name>examMarks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// CourseExams classExamMarks = new CourseExams(offerID,examName,examMarks);</comment>
		<comment type="line">// return CourseExams;</comment>
		<return>return <expr><name>this</name></expr>;</return>
	}</block></function>

	<comment type="line">// To retrieve marks of one student for all the exams</comment>
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>HashMap</name><argument_list type="template">&lt;<argument><name>String</name></argument>,<argument><name>Double</name></argument>&gt;</argument_list></name></type> <name>getStudentMarks</name><parameter_list>(<param><decl><type><name>CourseOffered</name></type> <name>offeredCourse</name></decl></param>, <param><decl><type><name>Student</name></type> <name>student</name></decl></param>)</parameter_list><block>{
		<decl_stmt><decl><type><name><name>HashMap</name><argument_list type="template">&lt;<argument><name>String</name></argument>,<argument><name>Double</name></argument>&gt;</argument_list></name></type> <name>studentExamAndMarks</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="template">&lt;<argument><name>String</name></argument>,<argument><name>Double</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>offerID</name> <init>= <expr><call><name><name>offeredCourse</name><operator>.</operator><name>getOfferID</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Course</name></type> <name>course</name> <init>= <expr><call><name><name>offeredCourse</name><operator>.</operator><name>getCourse</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>courseName</name> <init>= <expr><call><name><name>course</name><operator>.</operator><name>getCourseName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>semID</name> <init>= <expr><call><name><name>offeredCourse</name><operator>.</operator><name>getSemesterID</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name>String</name></type> <name>tableName</name> <init>= <expr><name>courseName</name> <operator>+</operator> <call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>offerID</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>semID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
		
		<decl_stmt><decl><type><name>int</name></type> <name>UIN</name> <init>= <expr><call><name><name>student</name><operator>.</operator><name>getUIN</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>double</name></type> <name>studentMarks</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name>CourseExams</name></type> <name>exam</name> <init>= <expr><operator>new</operator> <call><name>CourseExams</name><argument_list>(<argument><expr><name>offerID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>allExams</name> <init>= <expr><call><name><name>exam</name><operator>.</operator><name>viewAllExams</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><call><name><name>allExams</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"No exams entered yet"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else>else <block>{
			<for>for<control>(<init><decl><type><name>String</name></type> <name>oneExam</name><range>: <expr><name>allExams</name></expr></range></decl></init>)</control><block>{
				
				
				<decl_stmt><decl><type><name>String</name></type> <name>SQLExamSelect</name> <init>= <expr><literal type="string">"SELECT %s FROM %s WHERE StudentUIN = ?;"</literal></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name>SQLExamSelect</name> <operator>=</operator> <call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>SQLExamSelect</name></expr></argument>, <argument><expr><name>oneExam</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<try>try <block>{
					<decl_stmt><decl><type><name>Connection</name></type> <name>conn</name> <init>= <expr><call><name><name>Database</name><operator>.</operator><name>getConnection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					<try>try <block>{
						<if>if <condition>(<expr><name>conn</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
							<decl_stmt><decl><type><name>PreparedStatement</name></type> <name>statement</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>prepareStatement</name></name><argument_list>(<argument><expr><name>SQLExamSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
							<comment type="line">// statement.setString(1, oneExam);</comment>
							<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"UIN"</literal></expr></argument>,<argument><expr><literal type="string">"tableName"</literal></expr></argument>,<argument><expr><literal type="string">"StudentUIN"</literal></expr></argument>,<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name><name>statement</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<decl_stmt><decl><type><name>ResultSet</name></type> <name>rs</name> <init>=  <expr><call><name><name>statement</name><operator>.</operator><name>executeQuery</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
							<comment type="line">//System.out.println(rs.getDouble());</comment>
								<if>if<condition>(<expr><call><name><name>rs</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
									<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"studentMarks"</literal></expr></argument>,<argument><expr><literal type="string">"tableName"</literal></expr></argument>,<argument><expr><name>oneExam</name></expr></argument>,<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
									<expr_stmt><expr><name>studentMarks</name> <operator>=</operator> <call><name><name>rs</name><operator>.</operator><name>getDouble</name></name><argument_list>(<argument><expr><name>oneExam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
									<expr_stmt><expr><call><name><name>studentExamAndMarks</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>oneExam</name></expr></argument>, <argument><expr><name>studentMarks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								}</block></then></if>
							}</block></then></if>
							
					}</block> <catch>catch <parameter_list>(<param><decl><type><name>SQLException</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
						<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></catch></try>

				}</block> <catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
					<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></catch></try>

			}</block></for>
		}</block></else></if>

		<return>return <expr><name>studentExamAndMarks</name></expr>;</return>
	}</block></function>
	
	<comment type="line">// To retrieve marks of each student for the specified exam.</comment>
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>HashMap</name><argument_list type="template">&lt;<argument><name>Integer</name></argument>,<argument><name>Double</name></argument>&gt;</argument_list></name></type> <name>getStudents</name><parameter_list>(<param><decl><type><name>CourseOffered</name></type> <name>offeredCourse</name></decl></param>, <param><decl><type><name>String</name></type> <name>examName</name></decl></param>)</parameter_list><block>{
		<decl_stmt><decl><type><name><name>HashMap</name><argument_list type="template">&lt;<argument><name>Integer</name></argument>,<argument><name>Double</name></argument>&gt;</argument_list></name></type> <name>studentsMarks</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="template">&lt;<argument><name>Integer</name></argument>,<argument><name>Double</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name>int</name></type> <name>offerID</name> <init>= <expr><call><name><name>offeredCourse</name><operator>.</operator><name>getOfferID</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Course</name></type> <name>course</name> <init>= <expr><call><name><name>offeredCourse</name><operator>.</operator><name>getCourse</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>courseName</name> <init>= <expr><call><name><name>course</name><operator>.</operator><name>getCourseName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>semID</name> <init>= <expr><call><name><name>offeredCourse</name><operator>.</operator><name>getSemesterID</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name>String</name></type> <name>tableName</name> <init>= <expr><name>courseName</name> <operator>+</operator> <call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>offerID</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>semID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
		
		<decl_stmt><decl><type><name>boolean</name></type> <name>isExamPresent</name> <init>= <expr><call><name>isExamPresent</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>examName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if<condition>(<expr><name>isExamPresent</name> <operator>==</operator> <literal type="boolean">false</literal></expr>)</condition><then><block>{
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Exam Absent"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else>else <block>{
<comment type="line">//				@DBAnnotation (</comment>
<comment type="line">//						variable = {"examName"},  </comment>
<comment type="line">//						table = "tableName", </comment>
<comment type="line">//						column = {"ExamName"}, </comment>
<comment type="line">//						isSource = true)</comment>
				<decl_stmt><decl><type><name>String</name></type> <name>SQLExamSelect</name> <init>= <expr><literal type="string">"SELECT StudentUIN, %s FROM %s;"</literal></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name>SQLExamSelect</name> <operator>=</operator> <call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>SQLExamSelect</name></expr></argument>, <argument><expr><name>examName</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<try>try <block>{
					<decl_stmt><decl><type><name>Connection</name></type> <name>conn</name> <init>= <expr><call><name><name>Database</name><operator>.</operator><name>getConnection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					<try>try <block>{
						<if>if <condition>(<expr><name>conn</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
							<decl_stmt><decl><type><name>PreparedStatement</name></type> <name>statement</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>prepareStatement</name></name><argument_list>(<argument><expr><name>SQLExamSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<comment type="line">//							statement.setInt(1, UIN);</comment>
<comment type="line">//							statement.setDouble(1, examName);</comment>
							
							<decl_stmt><decl><type><name>ResultSet</name></type> <name>rs</name> <init>=  <expr><call><name><name>statement</name><operator>.</operator><name>executeQuery</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
							<comment type="line">//System.out.println(rs.getDouble());</comment>
								<while>while<condition>(<expr><call><name><name>rs</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{
									<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"UIN"</literal></expr></argument>,<argument><expr><literal type="string">"tableName"</literal></expr></argument>,<argument><expr><literal type="string">"StudentUIN"</literal></expr></argument>,<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
									<decl_stmt><decl><type><name>int</name></type> <name>UIN</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
									<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"marks"</literal></expr></argument>,<argument><expr><literal type="string">"tableName"</literal></expr></argument>,<argument><expr><name>examName</name></expr></argument>,<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
									<decl_stmt><decl><type><name>double</name></type> <name>marks</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getDouble</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
									<expr_stmt><expr><call><name><name>studentsMarks</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>UIN</name></expr></argument>, <argument><expr><name>marks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								}</block></while>
							}</block></then></if>
							
					}</block> <catch>catch <parameter_list>(<param><decl><type><name>SQLException</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
						<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></catch></try>

				}</block> <catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
					<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></catch></try>

			}</block></else></if>

		<return>return <expr><name>studentsMarks</name></expr>;</return>
	}</block></function>
	
	<comment type="line">// To modify the marks of a student for a particular exam.</comment>
 	<function><type><specifier>public</specifier> <name>boolean</name></type> <name>modifyStudentMarks</name><parameter_list>()</parameter_list><block>{
		<decl_stmt><decl><type><name>boolean</name></type> <name>studentsMarksModified</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name>int</name></type> <name>offerID</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>getOfferID</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>examName</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>getExamName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>HashMap</name><argument_list type="template">&lt;<argument><name>Student</name></argument>,<argument><name>Double</name></argument>&gt;</argument_list></name></type> <name>examMarks</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>getExamMarks</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>CourseOffered</name></type> <name>offeredCourse</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
		
		<try>try <block>{
			<expr_stmt><expr><name>offeredCourse</name> <operator>=</operator> <operator>new</operator> <call><name>CourseOffered</name><argument_list>(<argument><expr><name>offerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch>catch <parameter_list>(<param><decl><type><name><name>Course</name><operator>.</operator><name>CourseDoesNotExistException</name></name></type> <name>e1</name></decl></param>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>e1</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></catch> <catch>catch <parameter_list>(<param><decl><type><name><name>CourseOffered</name><operator>.</operator><name>CourseOfferingDoesNotExistException</name></name></type> <name>e1</name></decl></param>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>e1</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		
		<decl_stmt><decl><type><name>Course</name></type> <name>course</name> <init>= <expr><call><name><name>offeredCourse</name><operator>.</operator><name>getCourse</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>courseName</name> <init>= <expr><call><name><name>course</name><operator>.</operator><name>getCourseName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>semID</name> <init>= <expr><call><name><name>offeredCourse</name><operator>.</operator><name>getSemesterID</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name>String</name></type> <name>tableName</name> <init>= <expr><name>courseName</name> <operator>+</operator> <call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>offerID</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>semID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
	
		<decl_stmt><decl><type><name><name>Set</name><argument_list type="template">&lt;<argument><name>Student</name></argument>&gt;</argument_list></name></type> <name>keys</name> <init>= <expr><call><name><name>examMarks</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>Iterator</name><argument_list type="template">&lt;<argument><name>Student</name></argument>&gt;</argument_list></name></type> <name>keyIterator</name> <init>= <expr><call><name><name>keys</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<while>while <condition>(<expr><call><name><name>keyIterator</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
			<decl_stmt><decl><type><name>Student</name></type> <name>student</name> <init>= <expr><call><name><name>keyIterator</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>UIN</name> <init>= <expr><call><name><name>student</name><operator>.</operator><name>getUIN</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name>double</name></type> <name>marks</name> <init>= <expr><operator>(</operator><name>double</name><operator>)</operator> <call><name><name>examMarks</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>student</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
			
			<comment type="line">// Step 1: Check if the student is enrolled for this course</comment>
			<decl_stmt><decl><type><name>boolean</name></type> <name>isStudentEnrolled</name> <init>= <expr><call><name>isStudentEnrolled</name><argument_list>(<argument><expr><name>student</name></expr></argument>,<argument><expr><name>offerID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			
			<comment type="line">// If enrolled, add his marks</comment>
			<if>if <condition>(<expr><name>isStudentEnrolled</name> <operator>==</operator> <literal type="boolean">true</literal></expr>)</condition><then><block>{
				
<comment type="line">//				@DBAnnotation (</comment>
<comment type="line">//						variable = {"marks","UIN"},  </comment>
<comment type="line">//						table = "tableName", </comment>
<comment type="line">//						column = {"ExamName","StudentUIN"}, </comment>
<comment type="line">//						isSource = false)</comment>
				<decl_stmt><decl><type><name>String</name></type> <name>SQLExamUpdate</name> <init>= <expr><literal type="string">"UPDATE %s SET %s = ? WHERE `StudentUIN`=?;"</literal></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name>SQLExamUpdate</name> <operator>=</operator> <call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>SQLExamUpdate</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>,<argument><expr><name>examName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<try>try <block>{
					<decl_stmt><decl><type><name>Connection</name></type> <name>conn</name> <init>= <expr><call><name><name>Database</name><operator>.</operator><name>getConnection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					<try>try <block>{
						<if>if <condition>(<expr><name>conn</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
						 
							<decl_stmt><decl><type><name>PreparedStatement</name></type> <name>statement</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>prepareStatement</name></name><argument_list>(<argument><expr><name>SQLExamUpdate</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<comment type="line">//							statement.setString(1, tableName);</comment>
<comment type="line">//							statement.setString(2, examName);</comment>
							<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"marks"</literal></expr></argument>,<argument><expr><literal type="string">"tableName"</literal></expr></argument>,<argument><expr><name>examName</name></expr></argument>,<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name><name>statement</name><operator>.</operator><name>setDouble</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>marks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"UIN"</literal></expr></argument>,<argument><expr><literal type="string">"tableName"</literal></expr></argument>,<argument><expr><literal type="string">"StudentUIN"</literal></expr></argument>,<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name><name>statement</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name><name>statement</name><operator>.</operator><name>executeUpdate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>					
							<expr_stmt><expr><call><name><name>Database</name><operator>.</operator><name>commitTransaction</name></name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><name>studentsMarksModified</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
						}</block></then></if>	
					}</block> <catch>catch <parameter_list>(<param><decl><type><name>SQLException</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
						<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name>Database</name><operator>.</operator><name>rollBackTransaction</name></name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></catch></try>

				}</block> <catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
					<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></catch></try>
				
			}</block></then> <else>else <block>{
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"The student "</literal> <operator>+</operator> <call><name><name>student</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call> <operator>+</operator><literal type="string">" is not enrolled."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
			
		}</block></while>
		<return>return <expr><name>studentsMarksModified</name></expr>;</return>
		
	}</block></function>

 	<comment type="line">// To view all the exams in a course</comment>
	<function><type><specifier>public</specifier> <name><name>ArrayList</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>viewAllExams</name><parameter_list>()</parameter_list><block>{
		<decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>allExams</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="template">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl> ;</decl_stmt>
		
		<decl_stmt><decl><type><name>int</name></type> <name>offerID</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>getOfferID</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>CourseOffered</name></type> <name>offeredCourse</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
		
		<try>try <block>{
			<expr_stmt><expr><name>offeredCourse</name> <operator>=</operator> <operator>new</operator> <call><name>CourseOffered</name><argument_list>(<argument><expr><name>offerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch>catch <parameter_list>(<param><decl><type><name><name>Course</name><operator>.</operator><name>CourseDoesNotExistException</name></name></type> <name>e1</name></decl></param>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>e1</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></catch> <catch>catch <parameter_list>(<param><decl><type><name><name>CourseOffered</name><operator>.</operator><name>CourseOfferingDoesNotExistException</name></name></type> <name>e1</name></decl></param>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>e1</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		
		<decl_stmt><decl><type><name>Course</name></type> <name>course</name> <init>= <expr><call><name><name>offeredCourse</name><operator>.</operator><name>getCourse</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>courseName</name> <init>= <expr><call><name><name>course</name><operator>.</operator><name>getCourseName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>semID</name> <init>= <expr><call><name><name>offeredCourse</name><operator>.</operator><name>getSemesterID</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name>String</name></type> <name>tableName</name> <init>= <expr><name>courseName</name> <operator>+</operator> <call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>offerID</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>semID</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"Structure"</literal></expr></init></decl>;</decl_stmt> 
	
<comment type="line">//		@DBAnnotation (</comment>
<comment type="line">//				variable = {"examName"},  </comment>
<comment type="line">//				table = "tableName", </comment>
<comment type="line">//				column = {"ExamName"}, </comment>
<comment type="line">//				isSource = true)</comment>
		<decl_stmt><decl><type><name>String</name></type> <name>SQLExamSelect</name> <init>= <expr><literal type="string">"SELECT ExamName FROM %s ;"</literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>SQLExamSelect</name> <operator>=</operator> <call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>SQLExamSelect</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<try>try <block>{
			<decl_stmt><decl><type><name>Connection</name></type> <name>conn</name> <init>= <expr><call><name><name>Database</name><operator>.</operator><name>getConnection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<try>try <block>{
				<if>if <condition>(<expr><name>conn</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
					<comment type="line">//System.out.println(tableName);</comment>
					<decl_stmt><decl><type><name>PreparedStatement</name></type> <name>statement</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>prepareStatement</name></name><argument_list>(<argument><expr><name>SQLExamSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<comment type="line">//					statement.setString(1, tableName);</comment>
					<decl_stmt><decl><type><name>ResultSet</name></type> <name>rs</name> <init>=  <expr><call><name><name>statement</name><operator>.</operator><name>executeQuery</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
									
					<while>while<condition>(<expr><call><name><name>rs</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{
						<expr_stmt><expr><call><name><name>DBAnnotation</name><operator>.</operator><name>annoate</name></name><argument_list>(<argument><expr><literal type="string">"examName"</literal></expr></argument>,<argument><expr><literal type="string">"tableName"</literal></expr></argument>,<argument><expr><literal type="string">"ExamName"</literal></expr></argument>,<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name>String</name></type> <name>examName</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"ExamName"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>examName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<if>if<condition>(<expr><name>examName</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
							<block type="pseudo"><expr_stmt><expr><call><name><name>allExams</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>examName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
						<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>allExams</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							
					}</block></while>
					
				}</block></then></if>	
			}</block> <catch>catch <parameter_list>(<param><decl><type><name>SQLException</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
		}</block> <catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		<return>return <expr><name>allExams</name></expr>;</return>
	}</block></function>

	
<comment type="line">//	public static void main(String[] args){</comment>

<comment type="line">//		int offerID = 345678;</comment>
<comment type="line">//		@SuppressWarnings("unused")</comment>
<comment type="line">//		CourseOffered offeredCourse = null;</comment>
<comment type="line">//		try {</comment>
<comment type="line">//			offeredCourse = new CourseOffered(offerID);</comment>
<comment type="line">//		} catch (Course.CourseDoesNotExistException e) {</comment>
<comment type="line">//			e.printStackTrace();</comment>
<comment type="line">//		} catch (CourseOffered.CourseOfferingDoesNotExistException e) {</comment>
<comment type="line">//			e.printStackTrace();</comment>
<comment type="line">//		}</comment>
		
<comment type="line">//		Test to add an exam</comment>
<comment type="line">//		boolean courseAdded = CourseExams.createCourseExamMarksTable(offeredCourse);</comment>
<comment type="line">//		if(courseAdded == true){</comment>
<comment type="line">//			System.out.println("Course Added");</comment>
<comment type="line">//		} else {</comment>
<comment type="line">//			System.out.println("Course Not Added");</comment>
<comment type="line">//		}</comment>
		
		<comment type="line">// To add mks for a student</comment>
<comment type="line">//		String examName = "Assgn1";</comment>
<comment type="line">//		int UIN = 1;</comment>
<comment type="line">//		Student student = new Student(UIN);</comment>
<comment type="line">//		double marks = 8.5; </comment>
<comment type="line">//		HashMap&lt;Student,Double&gt; examMarks = new HashMap&lt;Student,Double&gt;();</comment>
<comment type="line">//		examMarks.put(student, marks);</comment>
<comment type="line">//		UIN = 2;</comment>
<comment type="line">//		marks = 7.5;</comment>
<comment type="line">//		student = new Student(UIN);</comment>
<comment type="line">//		examMarks.put(student, marks);</comment>
<comment type="line">//		CourseExams exams = new CourseExams(offerID,examName,examMarks);</comment>
<comment type="line">//		</comment>
<comment type="line">//		boolean marksAdded = exams.addStudentMarks();</comment>
<comment type="line">//		if(marksAdded == true){</comment>
<comment type="line">//			System.out.println("Mks Added");</comment>
<comment type="line">//		} else {</comment>
<comment type="line">//			System.out.println("Mks Not Added");</comment>
<comment type="line">//		}</comment>
		
		<comment type="line">// To get student's marks</comment>
<comment type="line">//		CourseExams exams = new CourseExams(offerID);</comment>
<comment type="line">//		CourseExams marks = exams.getStudentMarks();</comment>
<comment type="line">//		HashMap&lt;Student,Double&gt; examMarks = marks.getExamMarks();</comment>
<comment type="line">//		Set&lt;Student&gt; keys = examMarks.keySet();</comment>
<comment type="line">//		Iterator&lt;Student&gt; keyIterator = keys.iterator();</comment>
<comment type="line">//		while (keyIterator.hasNext()) {</comment>
<comment type="line">//			Student student = keyIterator.next();</comment>
<comment type="line">//			int UIN = student.getUIN();</comment>
<comment type="line">//			double studeMarks = (double) examMarks.get(student);</comment>
<comment type="line">//			System.out.println("UIN: " + UIN + " TotalMarks: " + studeMarks);</comment>
<comment type="line">//		}	</comment>
		
		
		<comment type="line">// To modify student's marks</comment>
<comment type="line">//		int UIN = 1;</comment>
<comment type="line">//		Student student = new Student(UIN);</comment>
<comment type="line">//		double marks = 9; </comment>
<comment type="line">//		HashMap&lt;Student,Double&gt; examMarks = new HashMap&lt;Student,Double&gt;();</comment>
<comment type="line">//		examMarks.put(student, marks);</comment>
<comment type="line">//		UIN = 2;</comment>
<comment type="line">//		marks = 3;</comment>
<comment type="line">//		student = new Student(UIN);</comment>
<comment type="line">//		examMarks.put(student, marks);</comment>
<comment type="line">//		CourseExams exams = new CourseExams(offerID,examName,examMarks);</comment>
<comment type="line">//		</comment>
<comment type="line">//		boolean marksModified = exams.modifyStudentMarks();</comment>
<comment type="line">//		if(marksModified == true){</comment>
<comment type="line">//			System.out.println("Mks Modified");</comment>
<comment type="line">//		} else {</comment>
<comment type="line">//			System.out.println("Mks Not Modified");</comment>
<comment type="line">//		}</comment>
		
<comment type="line">//	}</comment>
}</block></class>
</unit>
