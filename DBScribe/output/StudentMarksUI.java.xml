<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Boyang\Desktop\ASE15\subjects\UMAS\src\com\umas\frontend\StudentMarksUI.java"><package>package <name><name>com</name><operator>.</operator><name>umas</name><operator>.</operator><name>frontend</name></name>;</package>


<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>BorderLayout</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>EventQueue</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>JButton</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>JFrame</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>JOptionPane</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>JPanel</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>JTextField</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>border</name><operator>.</operator><name>EmptyBorder</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>BoxLayout</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>GridLayout</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>event</name><operator>.</operator><name>ActionEvent</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>event</name><operator>.</operator><name>ActionListener</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>JLabel</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>umas</name><operator>.</operator><name>code</name><operator>.</operator><name>CourseExams</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>umas</name><operator>.</operator><name>code</name><operator>.</operator><name>CourseOffered</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>umas</name><operator>.</operator><name>code</name><operator>.</operator><name>People</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>umas</name><operator>.</operator><name>code</name><operator>.</operator><name>Student</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>umas</name><operator>.</operator><name>code</name><operator>.</operator><name>People</name><operator>.</operator><name>PersonDoesNotExistException</name></name>;</import>

<class><specifier>public</specifier> class <name>StudentMarksUI</name> <super><extends>extends <name>JFrame</name></extends></super> <block>{

	<decl_stmt><decl><type><specifier>private</specifier> <name>JPanel</name></type> <name>contentPane</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>JButton</name></type> <name>updateButton</name></decl>;</decl_stmt>

	<comment type="block" format="javadoc">/**
	 * Launch the application.
	 */</comment>
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<param><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></param>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>EventQueue</name><operator>.</operator><name>invokeLater</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
			<function><type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
				<try>try <block>{
					<decl_stmt><decl><type><name>StudentMarksUI</name></type> <name>frame</name> <init>= <expr><operator>new</operator> <call><name>StudentMarksUI</name><argument_list>(<argument><expr><operator>new</operator> <call><name>CourseOffered</name><argument_list>(<argument><expr><literal type="number">423</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Assgn2"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name>frame</name><operator>.</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block> <catch>catch <parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
					<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				}</block></catch></try>
			}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * Create the frame.
	 */</comment>
	<constructor><specifier>public</specifier> <name>StudentMarksUI</name><parameter_list>(<param><decl><type><name>CourseOffered</name></type> <name>offeredCourse</name></decl></param>, <param><decl><type><name>String</name></type> <name>examName</name></decl></param>)</parameter_list> <block>{
		
		
		<decl_stmt><decl><type><name><name>HashMap</name><argument_list type="template">&lt;<argument><name>Integer</name></argument>,<argument><name>Double</name></argument>&gt;</argument_list></name></type> <name>studentExamMarks</name> <init>= <expr><call><name><name>CourseExams</name><operator>.</operator><name>getStudents</name></name><argument_list>(<argument><expr><name>offeredCourse</name></expr></argument>, <argument><expr><name>examName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<comment type="line">//setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</comment>
		<expr_stmt><expr><call><name>setBounds</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">800</literal></expr></argument>, <argument><expr><literal type="number">600</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>contentPane</name> <operator>=</operator> <operator>new</operator> <call><name>JPanel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>contentPane</name><operator>.</operator><name>setBorder</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>EmptyBorder</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>setContentPane</name><argument_list>(<argument><expr><name>contentPane</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>contentPane</name><operator>.</operator><name>setLayout</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>BoxLayout</name><argument_list>(<argument><expr><name>contentPane</name></expr></argument>, <argument><expr><name><name>BoxLayout</name><operator>.</operator><name>Y_AXIS</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Hash set size:"</literal><operator>+</operator><call><name><name>studentExamMarks</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>UIN</name> <range>: <expr><call><name><name>studentExamMarks</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block>{
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Student UIN:"</literal><operator>+</operator><name>UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>double</name></type> <name>marks</name> <init>= <expr><call><name><name>studentExamMarks</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>UIN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>JPanel</name></type> <name>panel</name> <init>= <expr><call><name>makePanel</name><argument_list>(<argument><expr><name>UIN</name></expr></argument>,<argument><expr><name>marks</name></expr></argument>, <argument><expr><name>offeredCourse</name></expr></argument>, <argument><expr><name>examName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>contentPane</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>panel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
		
	}</block></constructor>
	
	<comment type="line">// Makes a panel to display the UIN and marks of each student</comment>
	<function><type><specifier>public</specifier> <name>JPanel</name></type> <name>makePanel</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>int</name></type> <name>UIN</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>double</name></type> <name>marks</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>CourseOffered</name></type> <name>courseOffered</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>String</name></type> <name>examName</name></decl></param>)</parameter_list><block>{
		<decl_stmt><decl><type><name>JPanel</name></type> <name>studentmarks</name> <init>= <expr><operator>new</operator> <call><name>JPanel</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>studentmarks</name><operator>.</operator><name>setLayout</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>GridLayout</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JLabel</name></type> <name>lblUIN</name> <init>= <expr><operator>new</operator> <call><name>JLabel</name><argument_list>(<argument><expr><literal type="string">""</literal><operator>+</operator><name>UIN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>studentmarks</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>lblUIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><specifier>final</specifier> <name>JTextField</name></type> <name>lblmarks</name> <init>= <expr><operator>new</operator> <call><name>JTextField</name><argument_list>(<argument><expr><literal type="string">""</literal><operator>+</operator><name>marks</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>studentmarks</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>lblmarks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><name>updateButton</name> <operator>=</operator> <operator>new</operator> <call><name>JButton</name><argument_list>(<argument><expr><literal type="string">"Update score"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>updateButton</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>ActionListener</name></super><argument_list>()</argument_list> <block>{
			
			<comment type="line">//@Override</comment>
			<function><type><specifier>public</specifier> <name>void</name></type> <name>actionPerformed</name><parameter_list>(<param><decl><type><name>ActionEvent</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
				<decl_stmt><decl><type><name><name>HashMap</name><argument_list type="template">&lt;<argument><name>Student</name></argument>, <argument><name>Double</name></argument>&gt;</argument_list></name></type> <name>marksMap</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="template">&lt;<argument><name>Student</name></argument>, <argument><name>Double</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>Student</name></type> <name>s</name></decl>;</decl_stmt>
				<try>try <block>{
					<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>new</operator> <call><name>Student</name><argument_list>(<argument><expr><name>UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name>double</name></type> <name>newMarks</name> <init>= <expr><call><name><name>Double</name><operator>.</operator><name>parseDouble</name></name><argument_list>(<argument><expr><call><name><name>lblmarks</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name>marksMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>newMarks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name>CourseExams</name></type> <name>ce</name> <init>= <expr><operator>new</operator> <call><name>CourseExams</name><argument_list>(<argument><expr><call><name><name>courseOffered</name><operator>.</operator><name>getOfferID</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>examName</name></expr></argument>, <argument><expr><name>marksMap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>boolean</name></type> <name>updateSuccess</name> <init>= <expr><call><name><name>ce</name><operator>.</operator><name>addStudentMarks</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					
					<if>if<condition>(<expr><name>updateSuccess</name></expr>)</condition><then><block>{
						<expr_stmt><expr><call><name><name>JOptionPane</name><operator>.</operator><name>showMessageDialog</name></name><argument_list>(<argument><expr><name>updateButton</name></expr></argument>, <argument><expr><literal type="string">"Successfully update"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if>
					
				}</block> <catch>catch <parameter_list>(<param><decl><type><name><name>People</name><operator>.</operator><name>PersonDoesNotExistException</name></name></type> <name>e1</name></decl></param>)</parameter_list> <block>{
					<comment type="line">// TODO Auto-generated catch block</comment>
					<expr_stmt><expr><call><name><name>e1</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				}</block></catch></try>
			}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name><name>studentmarks</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>updateButton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<return>return <expr><name>studentmarks</name></expr>;</return>
	}</block></function>

}</block></class>
</unit>
